//
//  Size.swift
//  RagnarokConstants
//
//  Generated by RagnarokOfflineGenerator.
//

/// Converted from `e_size` in `map/mob.hpp`.
public enum Size: Int, CaseIterable, Sendable {
    case small = 0
    case medium = 1
    case large = 2
}

extension Size: CodingKey {
    public var stringValue: String {
        switch self {
        case .small: "SMALL"
        case .medium: "MEDIUM"
        case .large: "LARGE"
        }
    }

    public init?(stringValue: String) {
        switch stringValue.uppercased() {
        case "SMALL": self = .small
        case "MEDIUM": self = .medium
        case "LARGE": self = .large
        default: return nil
        }
    }

    public var intValue: Int? {
        rawValue
    }

    public init?(intValue: Int) {
        self.init(rawValue: intValue)
    }
}

extension Size: CodingKeyRepresentable {
    public var codingKey: any CodingKey {
        self
    }

    public init?<T>(codingKey: T) where T: CodingKey {
        self.init(stringValue: codingKey.stringValue)
    }
}

extension Size: Decodable {
    public init(from decoder: any Decoder) throws {
        let container = try decoder.singleValueContainer()
        let stringValue = try container.decode(String.self)
        if let value = Self.init(stringValue: stringValue) {
            self = value
        } else {
            throw DecodingError.dataCorruptedError(in: container, debugDescription: "Could not initialize \(Self.self) from invalid string value \(stringValue)")
        }
    }
}
