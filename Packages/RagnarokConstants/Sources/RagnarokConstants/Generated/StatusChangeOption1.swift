//
//  StatusChangeOption1.swift
//  RagnarokConstants
//
//  Generated by RagnarokOfflineGenerator.
//

/// Converted from `e_sc_opt1` in `map/status.hpp`.
public enum StatusChangeOption1: Int, CaseIterable, Sendable {
    case none = 0
    case stone = 1
    case freeze = 2
    case stun = 3
    case sleep = 4
    case stonewait = 6
    case burning = 7
    case imprison = 8
}

extension StatusChangeOption1: CodingKey {
    public var stringValue: String {
        switch self {
        case .none: "NONE"
        case .stone: "STONE"
        case .freeze: "FREEZE"
        case .stun: "STUN"
        case .sleep: "SLEEP"
        case .stonewait: "STONEWAIT"
        case .burning: "BURNING"
        case .imprison: "IMPRISON"
        }
    }

    public init?(stringValue: String) {
        switch stringValue.uppercased() {
        case "NONE": self = .none
        case "STONE": self = .stone
        case "FREEZE": self = .freeze
        case "STUN": self = .stun
        case "SLEEP": self = .sleep
        case "STONEWAIT": self = .stonewait
        case "BURNING": self = .burning
        case "IMPRISON": self = .imprison
        default: return nil
        }
    }

    public var intValue: Int? {
        rawValue
    }

    public init?(intValue: Int) {
        self.init(rawValue: intValue)
    }
}

extension StatusChangeOption1: CodingKeyRepresentable {
    public var codingKey: any CodingKey {
        self
    }

    public init?<T>(codingKey: T) where T: CodingKey {
        self.init(stringValue: codingKey.stringValue)
    }
}

extension StatusChangeOption1: Decodable {
    public init(from decoder: any Decoder) throws {
        let container = try decoder.singleValueContainer()
        let stringValue = try container.decode(String.self)
        if let value = Self.init(stringValue: stringValue) {
            self = value
        } else {
            throw DecodingError.dataCorruptedError(in: container, debugDescription: "Could not initialize \(Self.self) from invalid string value \(stringValue)")
        }
    }
}
