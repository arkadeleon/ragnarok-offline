//
//  Race.swift
//  RagnarokConstants
//
//  Generated by RagnarokOfflineGenerator.
//

/// Converted from `e_race` in `map/map.hpp`.
public enum Race: Int, CaseIterable, Sendable {
    case formless = 0
    case undead = 1
    case brute = 2
    case plant = 3
    case insect = 4
    case fish = 5
    case demon = 6
    case demihuman = 7
    case angel = 8
    case dragon = 9
}

extension Race: CodingKey {
    public var stringValue: String {
        switch self {
        case .formless: "FORMLESS"
        case .undead: "UNDEAD"
        case .brute: "BRUTE"
        case .plant: "PLANT"
        case .insect: "INSECT"
        case .fish: "FISH"
        case .demon: "DEMON"
        case .demihuman: "DEMIHUMAN"
        case .angel: "ANGEL"
        case .dragon: "DRAGON"
        }
    }

    public init?(stringValue: String) {
        switch stringValue.uppercased() {
        case "FORMLESS": self = .formless
        case "UNDEAD": self = .undead
        case "BRUTE": self = .brute
        case "PLANT": self = .plant
        case "INSECT": self = .insect
        case "FISH": self = .fish
        case "DEMON": self = .demon
        case "DEMIHUMAN": self = .demihuman
        case "ANGEL": self = .angel
        case "DRAGON": self = .dragon
        default: return nil
        }
    }

    public var intValue: Int? {
        rawValue
    }

    public init?(intValue: Int) {
        self.init(rawValue: intValue)
    }
}

extension Race: CodingKeyRepresentable {
    public var codingKey: any CodingKey {
        self
    }

    public init?<T>(codingKey: T) where T: CodingKey {
        self.init(stringValue: codingKey.stringValue)
    }
}

extension Race: Decodable {
    public init(from decoder: any Decoder) throws {
        let container = try decoder.singleValueContainer()
        let stringValue = try container.decode(String.self)
        if let value = Self.init(stringValue: stringValue) {
            self = value
        } else {
            throw DecodingError.dataCorruptedError(in: container, debugDescription: "Could not initialize \(Self.self) from invalid string value \(stringValue)")
        }
    }
}
