//
//  SkillStateRequirement.swift
//  RagnarokOffline
//
//  Generated by ROCodeGenerator.
//

/// Converted from `e_require_state` in `map/skill.hpp`.
public enum SkillStateRequirement: Int, CaseIterable, Sendable {
    case none = 0
    case hidden = 1
    case riding = 2
    case falcon = 3
    case cart = 4
    case shield = 5
    case recover_weight_rate = 6
    case move_enable = 7
    case water = 8
    case ridingdragon = 9
    case wug = 10
    case ridingwug = 11
    case mado = 12
    case elementalspirit = 13
    case elementalspirit2 = 14
    case peco = 15
    case sunstance = 16
    case moonstance = 17
    case starstance = 18
    case universestance = 19
}

extension SkillStateRequirement: CodingKey {
    public var stringValue: String {
        switch self {
        case .none: "NONE"
        case .hidden: "HIDDEN"
        case .riding: "RIDING"
        case .falcon: "FALCON"
        case .cart: "CART"
        case .shield: "SHIELD"
        case .recover_weight_rate: "RECOVER_WEIGHT_RATE"
        case .move_enable: "MOVE_ENABLE"
        case .water: "WATER"
        case .ridingdragon: "RIDINGDRAGON"
        case .wug: "WUG"
        case .ridingwug: "RIDINGWUG"
        case .mado: "MADO"
        case .elementalspirit: "ELEMENTALSPIRIT"
        case .elementalspirit2: "ELEMENTALSPIRIT2"
        case .peco: "PECO"
        case .sunstance: "SUNSTANCE"
        case .moonstance: "MOONSTANCE"
        case .starstance: "STARSTANCE"
        case .universestance: "UNIVERSESTANCE"
        }
    }

    public init?(stringValue: String) {
        switch stringValue.uppercased() {
        case "NONE": self = .none
        case "HIDDEN": self = .hidden
        case "RIDING": self = .riding
        case "FALCON": self = .falcon
        case "CART": self = .cart
        case "SHIELD": self = .shield
        case "RECOVER_WEIGHT_RATE": self = .recover_weight_rate
        case "MOVE_ENABLE": self = .move_enable
        case "WATER": self = .water
        case "RIDINGDRAGON": self = .ridingdragon
        case "WUG": self = .wug
        case "RIDINGWUG": self = .ridingwug
        case "MADO": self = .mado
        case "ELEMENTALSPIRIT": self = .elementalspirit
        case "ELEMENTALSPIRIT2": self = .elementalspirit2
        case "PECO": self = .peco
        case "SUNSTANCE": self = .sunstance
        case "MOONSTANCE": self = .moonstance
        case "STARSTANCE": self = .starstance
        case "UNIVERSESTANCE": self = .universestance
        default: return nil
        }
    }

    public var intValue: Int? {
        rawValue
    }

    public init?(intValue: Int) {
        self.init(rawValue: intValue)
    }
}

extension SkillStateRequirement: CodingKeyRepresentable {
    public var codingKey: any CodingKey {
        self
    }

    public init?<T>(codingKey: T) where T: CodingKey {
        self.init(stringValue: codingKey.stringValue)
    }
}

extension SkillStateRequirement: Decodable {
    public init(from decoder: any Decoder) throws {
        let container = try decoder.singleValueContainer()
        let stringValue = try container.decode(String.self)
        if let value = Self.init(stringValue: stringValue) {
            self = value
        } else {
            throw DecodingError.dataCorruptedError(in: container, debugDescription: "Could not initialize \(Self.self) from invalid string value \(stringValue)")
        }
    }
}
