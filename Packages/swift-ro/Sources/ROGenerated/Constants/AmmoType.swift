//
//  AmmoType.swift
//  RagnarokOffline
//
//  Generated by ROGenerator.
//

public enum AmmoType: CaseIterable, RawRepresentable, Sendable {
    case arrow
    case dagger
    case bullet
    case shell
    case grenade
    case shuriken
    case kunai
    case cannonball
    case throwweapon

    public var rawValue: Int {
        switch self {
        case .arrow: 1
        case .dagger: 2
        case .bullet: 3
        case .shell: 4
        case .grenade: 5
        case .shuriken: 6
        case .kunai: 7
        case .cannonball: 8
        case .throwweapon: 9
        }
    }

    public init?(rawValue: Int) {
        switch rawValue {
        case 1: self = .arrow
        case 2: self = .dagger
        case 3: self = .bullet
        case 4: self = .shell
        case 5: self = .grenade
        case 6: self = .shuriken
        case 7: self = .kunai
        case 8: self = .cannonball
        case 9: self = .throwweapon
        default: return nil
        }
    }
}

extension AmmoType: CodingKey, CodingKeyRepresentable, Decodable {
    public init?(stringValue: String) {
        switch stringValue.uppercased() {
        case "ARROW": self = .arrow
        case "DAGGER": self = .dagger
        case "BULLET": self = .bullet
        case "SHELL": self = .shell
        case "GRENADE": self = .grenade
        case "SHURIKEN": self = .shuriken
        case "KUNAI": self = .kunai
        case "CANNONBALL": self = .cannonball
        case "THROWWEAPON": self = .throwweapon
        default: return nil
        }
    }

    public init?<T>(codingKey: T) where T: CodingKey {
        self.init(stringValue: codingKey.stringValue)
    }

    public init(from decoder: any Decoder) throws {
        let container = try decoder.singleValueContainer()
        let stringValue = try container.decode(String.self)
        if let value = Self.init(stringValue: stringValue) {
            self = value
        } else {
            throw DecodingError.dataCorruptedError(in: container, debugDescription: "Could not initialize \(Self.self) from invalid string value \(stringValue)")
        }
    }
}
