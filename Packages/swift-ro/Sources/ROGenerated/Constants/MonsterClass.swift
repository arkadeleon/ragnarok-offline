//
//  MonsterClass.swift
//  RagnarokOffline
//
//  Generated by ROGenerator.
//

/// Converted from `e_aegis_monsterclass` in `map/mob.hpp`.
public enum MonsterClass: CaseIterable, RawRepresentable, Sendable {
    case normal
    case boss
    case guardian
    case battlefield
    case event

    public var rawValue: Int {
        switch self {
        case .normal: 0
        case .boss: 1
        case .guardian: 2
        case .battlefield: 4
        case .event: 5
        }
    }

    public init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .normal
        case 1: self = .boss
        case 2: self = .guardian
        case 4: self = .battlefield
        case 5: self = .event
        default: return nil
        }
    }
}

extension MonsterClass: CodingKey, CodingKeyRepresentable, Decodable {
    public init?(stringValue: String) {
        switch stringValue.uppercased() {
        case "NORMAL": self = .normal
        case "BOSS": self = .boss
        case "GUARDIAN": self = .guardian
        case "BATTLEFIELD": self = .battlefield
        case "EVENT": self = .event
        default: return nil
        }
    }

    public init?<T>(codingKey: T) where T: CodingKey {
        self.init(stringValue: codingKey.stringValue)
    }

    public init(from decoder: any Decoder) throws {
        let container = try decoder.singleValueContainer()
        let stringValue = try container.decode(String.self)
        if let value = Self.init(stringValue: stringValue) {
            self = value
        } else {
            throw DecodingError.dataCorruptedError(in: container, debugDescription: "Could not initialize \(Self.self) from invalid string value \(stringValue)")
        }
    }
}
