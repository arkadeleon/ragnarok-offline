//
//  SkillCopyableOption.swift
//  RagnarokOffline
//
//  Generated by ROGenerator.
//

public enum SkillCopyableOption: CaseIterable, RawRepresentable, Sendable {
    case plagiarism
    case reproduce

    public var rawValue: Int {
        switch self {
        case .plagiarism: 0x1
        case .reproduce: 0x2
        }
    }

    public init?(rawValue: Int) {
        switch rawValue {
        case 0x1: self = .plagiarism
        case 0x2: self = .reproduce
        default: return nil
        }
    }
}

extension SkillCopyableOption: CodingKey, CodingKeyRepresentable, Decodable {
    public init?(stringValue: String) {
        switch stringValue.uppercased() {
        case "PLAGIARISM": self = .plagiarism
        case "REPRODUCE": self = .reproduce
        default: return nil
        }
    }

    public init?<T>(codingKey: T) where T: CodingKey {
        self.init(stringValue: codingKey.stringValue)
    }

    public init(from decoder: any Decoder) throws {
        let container = try decoder.singleValueContainer()
        let stringValue = try container.decode(String.self)
        if let value = Self.init(stringValue: stringValue) {
            self = value
        } else {
            throw DecodingError.dataCorruptedError(in: container, debugDescription: "Could not initialize \(Self.self) from invalid string value \(stringValue)")
        }
    }
}
