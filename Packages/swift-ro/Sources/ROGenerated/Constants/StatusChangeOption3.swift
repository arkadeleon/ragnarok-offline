//
//  StatusChangeOption3.swift
//  RagnarokOffline
//
//  Generated by ROGenerator.
//

/// Converted from `e_sc_opt3` in `map/status.hpp`.
public enum StatusChangeOption3: Int, CaseIterable, Sendable {
    case normal = 0x0
    case quicken = 0x1
    case overthrust = 0x2
    case energycoat = 0x4
    case explosionspirits = 0x8
    case steelbody = 0x10
    case bladestop = 0x20
    case aurablade = 0x40
    case berserk = 0x80
    case lightblade = 0x100
    case moonlit = 0x200
    case marionette = 0x400
    case assumptio = 0x800
    case warm = 0x1000
    case kaite = 0x2000
    case bunsin = 0x4000
    case soullink = 0x8000
    case undead = 0x10000
    case contract = 0x20000
}

extension StatusChangeOption3: CodingKey {
    public var stringValue: String {
        switch self {
        case .normal: "NORMAL"
        case .quicken: "QUICKEN"
        case .overthrust: "OVERTHRUST"
        case .energycoat: "ENERGYCOAT"
        case .explosionspirits: "EXPLOSIONSPIRITS"
        case .steelbody: "STEELBODY"
        case .bladestop: "BLADESTOP"
        case .aurablade: "AURABLADE"
        case .berserk: "BERSERK"
        case .lightblade: "LIGHTBLADE"
        case .moonlit: "MOONLIT"
        case .marionette: "MARIONETTE"
        case .assumptio: "ASSUMPTIO"
        case .warm: "WARM"
        case .kaite: "KAITE"
        case .bunsin: "BUNSIN"
        case .soullink: "SOULLINK"
        case .undead: "UNDEAD"
        case .contract: "CONTRACT"
        }
    }

    public init?(stringValue: String) {
        switch stringValue.uppercased() {
        case "NORMAL": self = .normal
        case "QUICKEN": self = .quicken
        case "OVERTHRUST": self = .overthrust
        case "ENERGYCOAT": self = .energycoat
        case "EXPLOSIONSPIRITS": self = .explosionspirits
        case "STEELBODY": self = .steelbody
        case "BLADESTOP": self = .bladestop
        case "AURABLADE": self = .aurablade
        case "BERSERK": self = .berserk
        case "LIGHTBLADE": self = .lightblade
        case "MOONLIT": self = .moonlit
        case "MARIONETTE": self = .marionette
        case "ASSUMPTIO": self = .assumptio
        case "WARM": self = .warm
        case "KAITE": self = .kaite
        case "BUNSIN": self = .bunsin
        case "SOULLINK": self = .soullink
        case "UNDEAD": self = .undead
        case "CONTRACT": self = .contract
        default: return nil
        }
    }

    public var intValue: Int? {
        rawValue
    }

    public init?(intValue: Int) {
        self.init(rawValue: intValue)
    }
}

extension StatusChangeOption3: CodingKeyRepresentable {
    public var codingKey: any CodingKey {
        self
    }

    public init?<T>(codingKey: T) where T: CodingKey {
        self.init(stringValue: codingKey.stringValue)
    }
}

extension StatusChangeOption3: Decodable {
    public init(from decoder: any Decoder) throws {
        let container = try decoder.singleValueContainer()
        let stringValue = try container.decode(String.self)
        if let value = Self.init(stringValue: stringValue) {
            self = value
        } else {
            throw DecodingError.dataCorruptedError(in: container, debugDescription: "Could not initialize \(Self.self) from invalid string value \(stringValue)")
        }
    }
}
