//
//  BattleFlag.swift
//  RagnarokOffline
//
//  Generated by ROGenerator.
//

/// Converted from `e_battle_flag` in `map/battle.hpp`.
public enum BattleFlag: Int, CaseIterable, Sendable {
    case none = 0x0
    case weapon = 0x1
    case magic = 0x2
    case misc = 0x4
    case short = 0x10
    case long = 0x40
    case skill = 0x100
    case normal = 0x200
}

extension BattleFlag: CodingKey {
    public var stringValue: String {
        switch self {
        case .none: "NONE"
        case .weapon: "WEAPON"
        case .magic: "MAGIC"
        case .misc: "MISC"
        case .short: "SHORT"
        case .long: "LONG"
        case .skill: "SKILL"
        case .normal: "NORMAL"
        }
    }

    public init?(stringValue: String) {
        switch stringValue.uppercased() {
        case "NONE": self = .none
        case "WEAPON": self = .weapon
        case "MAGIC": self = .magic
        case "MISC": self = .misc
        case "SHORT": self = .short
        case "LONG": self = .long
        case "SKILL": self = .skill
        case "NORMAL": self = .normal
        default: return nil
        }
    }

    public var intValue: Int? {
        rawValue
    }

    public init?(intValue: Int) {
        self.init(rawValue: intValue)
    }
}

extension BattleFlag: CodingKeyRepresentable {
    public var codingKey: any CodingKey {
        self
    }

    public init?<T>(codingKey: T) where T: CodingKey {
        self.init(stringValue: codingKey.stringValue)
    }
}

extension BattleFlag: Decodable {
    public init(from decoder: any Decoder) throws {
        let container = try decoder.singleValueContainer()
        let stringValue = try container.decode(String.self)
        if let value = Self.init(stringValue: stringValue) {
            self = value
        } else {
            throw DecodingError.dataCorruptedError(in: container, debugDescription: "Could not initialize \(Self.self) from invalid string value \(stringValue)")
        }
    }
}
