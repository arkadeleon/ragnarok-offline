//
//  BattleFlag.swift
//  RagnarokOffline
//
//  Generated by ROGenerator.
//

public enum BattleFlag: CaseIterable, RawRepresentable, Sendable {
    case none
    case weapon
    case magic
    case misc
    case short
    case long
    case skill
    case normal

    public var rawValue: Int {
        switch self {
        case .none: 0x0
        case .weapon: 0x1
        case .magic: 0x2
        case .misc: 0x4
        case .short: 0x10
        case .long: 0x40
        case .skill: 0x100
        case .normal: 0x200
        }
    }

    public init?(rawValue: Int) {
        switch rawValue {
        case 0x0: self = .none
        case 0x1: self = .weapon
        case 0x2: self = .magic
        case 0x4: self = .misc
        case 0x10: self = .short
        case 0x40: self = .long
        case 0x100: self = .skill
        case 0x200: self = .normal
        default: return nil
        }
    }
}

extension BattleFlag: CodingKey, CodingKeyRepresentable, Decodable {
    public init?(stringValue: String) {
        switch stringValue.uppercased() {
        case "NONE": self = .none
        case "WEAPON": self = .weapon
        case "MAGIC": self = .magic
        case "MISC": self = .misc
        case "SHORT": self = .short
        case "LONG": self = .long
        case "SKILL": self = .skill
        case "NORMAL": self = .normal
        default: return nil
        }
    }

    public init?<T>(codingKey: T) where T: CodingKey {
        self.init(stringValue: codingKey.stringValue)
    }

    public init(from decoder: any Decoder) throws {
        let container = try decoder.singleValueContainer()
        let stringValue = try container.decode(String.self)
        if let value = Self.init(stringValue: stringValue) {
            self = value
        } else {
            throw DecodingError.dataCorruptedError(in: container, debugDescription: "Could not initialize \(Self.self) from invalid string value \(stringValue)")
        }
    }
}
