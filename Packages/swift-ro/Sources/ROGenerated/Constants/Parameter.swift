//
//  Parameter.swift
//  RagnarokOffline
//
//  Generated by ROGenerator.
//

/// Converted from `e_params` in `map/pc.hpp`.
public enum Parameter: CaseIterable, RawRepresentable, Sendable {
    case str
    case agi
    case vit
    case int
    case dex
    case luk
    case pow
    case sta
    case wis
    case spl
    case con
    case crt
    case max

    public var rawValue: Int {
        switch self {
        case .str: 0
        case .agi: 1
        case .vit: 2
        case .int: 3
        case .dex: 4
        case .luk: 5
        case .pow: 6
        case .sta: 7
        case .wis: 8
        case .spl: 9
        case .con: 10
        case .crt: 11
        case .max: 12
        }
    }

    public init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .str
        case 1: self = .agi
        case 2: self = .vit
        case 3: self = .int
        case 4: self = .dex
        case 5: self = .luk
        case 6: self = .pow
        case 7: self = .sta
        case 8: self = .wis
        case 9: self = .spl
        case 10: self = .con
        case 11: self = .crt
        case 12: self = .max
        default: return nil
        }
    }
}

extension Parameter: CodingKey, CodingKeyRepresentable, Decodable {
    public init?(stringValue: String) {
        switch stringValue.uppercased() {
        case "STR": self = .str
        case "AGI": self = .agi
        case "VIT": self = .vit
        case "INT": self = .int
        case "DEX": self = .dex
        case "LUK": self = .luk
        case "POW": self = .pow
        case "STA": self = .sta
        case "WIS": self = .wis
        case "SPL": self = .spl
        case "CON": self = .con
        case "CRT": self = .crt
        case "MAX": self = .max
        default: return nil
        }
    }

    public init?<T>(codingKey: T) where T: CodingKey {
        self.init(stringValue: codingKey.stringValue)
    }

    public init(from decoder: any Decoder) throws {
        let container = try decoder.singleValueContainer()
        let stringValue = try container.decode(String.self)
        if let value = Self.init(stringValue: stringValue) {
            self = value
        } else {
            throw DecodingError.dataCorruptedError(in: container, debugDescription: "Could not initialize \(Self.self) from invalid string value \(stringValue)")
        }
    }
}
