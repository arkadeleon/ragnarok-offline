//
//  Race.swift
//  RagnarokOffline
//
//  Generated by ROGenerator.
//

/// Converted from `e_race` in `map/map.hpp`.
public enum Race: CaseIterable, RawRepresentable, Sendable {
    case formless
    case undead
    case brute
    case plant
    case insect
    case fish
    case demon
    case demihuman
    case angel
    case dragon

    public var rawValue: Int {
        switch self {
        case .formless: 0
        case .undead: 1
        case .brute: 2
        case .plant: 3
        case .insect: 4
        case .fish: 5
        case .demon: 6
        case .demihuman: 7
        case .angel: 8
        case .dragon: 9
        }
    }

    public init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .formless
        case 1: self = .undead
        case 2: self = .brute
        case 3: self = .plant
        case 4: self = .insect
        case 5: self = .fish
        case 6: self = .demon
        case 7: self = .demihuman
        case 8: self = .angel
        case 9: self = .dragon
        default: return nil
        }
    }
}

extension Race: CodingKey, CodingKeyRepresentable, Decodable {
    public init?(stringValue: String) {
        switch stringValue.uppercased() {
        case "FORMLESS": self = .formless
        case "UNDEAD": self = .undead
        case "BRUTE": self = .brute
        case "PLANT": self = .plant
        case "INSECT": self = .insect
        case "FISH": self = .fish
        case "DEMON": self = .demon
        case "DEMIHUMAN": self = .demihuman
        case "ANGEL": self = .angel
        case "DRAGON": self = .dragon
        default: return nil
        }
    }

    public init?<T>(codingKey: T) where T: CodingKey {
        self.init(stringValue: codingKey.stringValue)
    }

    public init(from decoder: any Decoder) throws {
        let container = try decoder.singleValueContainer()
        let stringValue = try container.decode(String.self)
        if let value = Self.init(stringValue: stringValue) {
            self = value
        } else {
            throw DecodingError.dataCorruptedError(in: container, debugDescription: "Could not initialize \(Self.self) from invalid string value \(stringValue)")
        }
    }
}
