//
//  SkillRequirement.swift
//  RagnarokOffline
//
//  Generated by ROGenerator.
//

public enum SkillRequirement: CaseIterable, RawRepresentable, Sendable {
    case hpcost
    case spcost
    case hpratecost
    case spratecost
    case maxhptrigger
    case zenycost
    case weapon
    case ammo
    case state
    case status
    case spiritspherecost
    case itemcost
    case equipment
    case apcost
    case apratecost

    public var rawValue: Int {
        switch self {
        case .hpcost: 0x1
        case .spcost: 0x2
        case .hpratecost: 0x4
        case .spratecost: 0x8
        case .maxhptrigger: 0x10
        case .zenycost: 0x20
        case .weapon: 0x40
        case .ammo: 0x80
        case .state: 0x100
        case .status: 0x200
        case .spiritspherecost: 0x400
        case .itemcost: 0x800
        case .equipment: 0x1000
        case .apcost: 0x2000
        case .apratecost: 0x4000
        }
    }

    public init?(rawValue: Int) {
        switch rawValue {
        case 0x1: self = .hpcost
        case 0x2: self = .spcost
        case 0x4: self = .hpratecost
        case 0x8: self = .spratecost
        case 0x10: self = .maxhptrigger
        case 0x20: self = .zenycost
        case 0x40: self = .weapon
        case 0x80: self = .ammo
        case 0x100: self = .state
        case 0x200: self = .status
        case 0x400: self = .spiritspherecost
        case 0x800: self = .itemcost
        case 0x1000: self = .equipment
        case 0x2000: self = .apcost
        case 0x4000: self = .apratecost
        default: return nil
        }
    }
}

extension SkillRequirement: CodingKey, CodingKeyRepresentable, Decodable {
    public init?(stringValue: String) {
        switch stringValue.uppercased() {
        case "HPCOST": self = .hpcost
        case "SPCOST": self = .spcost
        case "HPRATECOST": self = .hpratecost
        case "SPRATECOST": self = .spratecost
        case "MAXHPTRIGGER": self = .maxhptrigger
        case "ZENYCOST": self = .zenycost
        case "WEAPON": self = .weapon
        case "AMMO": self = .ammo
        case "STATE": self = .state
        case "STATUS": self = .status
        case "SPIRITSPHERECOST": self = .spiritspherecost
        case "ITEMCOST": self = .itemcost
        case "EQUIPMENT": self = .equipment
        case "APCOST": self = .apcost
        case "APRATECOST": self = .apratecost
        default: return nil
        }
    }

    public init?<T>(codingKey: T) where T: CodingKey {
        self.init(stringValue: codingKey.stringValue)
    }

    public init(from decoder: any Decoder) throws {
        let container = try decoder.singleValueContainer()
        let stringValue = try container.decode(String.self)
        if let value = Self.init(stringValue: stringValue) {
            self = value
        } else {
            throw DecodingError.dataCorruptedError(in: container, debugDescription: "Could not initialize \(Self.self) from invalid string value \(stringValue)")
        }
    }
}
