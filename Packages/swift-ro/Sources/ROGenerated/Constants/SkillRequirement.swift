//
//  SkillRequirement.swift
//  RagnarokOffline
//
//  Generated by ROGenerator.
//

/// Converted from `e_skill_require` in `map/skill.hpp`.
public enum SkillRequirement: Int, CaseIterable, Sendable {
    case hpcost = 0x1
    case spcost = 0x2
    case hpratecost = 0x4
    case spratecost = 0x8
    case maxhptrigger = 0x10
    case zenycost = 0x20
    case weapon = 0x40
    case ammo = 0x80
    case state = 0x100
    case status = 0x200
    case spiritspherecost = 0x400
    case itemcost = 0x800
    case equipment = 0x1000
    case apcost = 0x2000
    case apratecost = 0x4000
}

extension SkillRequirement: CodingKey {
    public var stringValue: String {
        switch self {
        case .hpcost: "HPCOST"
        case .spcost: "SPCOST"
        case .hpratecost: "HPRATECOST"
        case .spratecost: "SPRATECOST"
        case .maxhptrigger: "MAXHPTRIGGER"
        case .zenycost: "ZENYCOST"
        case .weapon: "WEAPON"
        case .ammo: "AMMO"
        case .state: "STATE"
        case .status: "STATUS"
        case .spiritspherecost: "SPIRITSPHERECOST"
        case .itemcost: "ITEMCOST"
        case .equipment: "EQUIPMENT"
        case .apcost: "APCOST"
        case .apratecost: "APRATECOST"
        }
    }

    public init?(stringValue: String) {
        switch stringValue.uppercased() {
        case "HPCOST": self = .hpcost
        case "SPCOST": self = .spcost
        case "HPRATECOST": self = .hpratecost
        case "SPRATECOST": self = .spratecost
        case "MAXHPTRIGGER": self = .maxhptrigger
        case "ZENYCOST": self = .zenycost
        case "WEAPON": self = .weapon
        case "AMMO": self = .ammo
        case "STATE": self = .state
        case "STATUS": self = .status
        case "SPIRITSPHERECOST": self = .spiritspherecost
        case "ITEMCOST": self = .itemcost
        case "EQUIPMENT": self = .equipment
        case "APCOST": self = .apcost
        case "APRATECOST": self = .apratecost
        default: return nil
        }
    }

    public var intValue: Int? {
        rawValue
    }

    public init?(intValue: Int) {
        self.init(rawValue: intValue)
    }
}

extension SkillRequirement: CodingKeyRepresentable {
    public var codingKey: any CodingKey {
        self
    }

    public init?<T>(codingKey: T) where T: CodingKey {
        self.init(stringValue: codingKey.stringValue)
    }
}

extension SkillRequirement: Decodable {
    public init(from decoder: any Decoder) throws {
        let container = try decoder.singleValueContainer()
        let stringValue = try container.decode(String.self)
        if let value = Self.init(stringValue: stringValue) {
            self = value
        } else {
            throw DecodingError.dataCorruptedError(in: container, debugDescription: "Could not initialize \(Self.self) from invalid string value \(stringValue)")
        }
    }
}
