//
//  Element.swift
//  RagnarokOffline
//
//  Generated by ROGenerator.
//

public enum Element: CaseIterable, RawRepresentable, Sendable {
    case neutral
    case water
    case earth
    case fire
    case wind
    case poison
    case holy
    case dark
    case ghost
    case undead
    case weapon
    case endowed
    case random

    public var rawValue: Int {
        switch self {
        case .neutral: 0
        case .water: 1
        case .earth: 2
        case .fire: 3
        case .wind: 4
        case .poison: 5
        case .holy: 6
        case .dark: 7
        case .ghost: 8
        case .undead: 9
        case .weapon: 12
        case .endowed: 13
        case .random: 14
        }
    }

    public init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .neutral
        case 1: self = .water
        case 2: self = .earth
        case 3: self = .fire
        case 4: self = .wind
        case 5: self = .poison
        case 6: self = .holy
        case 7: self = .dark
        case 8: self = .ghost
        case 9: self = .undead
        case 12: self = .weapon
        case 13: self = .endowed
        case 14: self = .random
        default: return nil
        }
    }
}

extension Element: CodingKey, CodingKeyRepresentable, Decodable {
    public init?(stringValue: String) {
        switch stringValue.uppercased() {
        case "NEUTRAL": self = .neutral
        case "WATER": self = .water
        case "EARTH": self = .earth
        case "FIRE": self = .fire
        case "WIND": self = .wind
        case "POISON": self = .poison
        case "HOLY": self = .holy
        case "DARK": self = .dark
        case "GHOST": self = .ghost
        case "UNDEAD": self = .undead
        case "WEAPON": self = .weapon
        case "ENDOWED": self = .endowed
        case "RANDOM": self = .random
        default: return nil
        }
    }

    public init?<T>(codingKey: T) where T: CodingKey {
        self.init(stringValue: codingKey.stringValue)
    }

    public init(from decoder: any Decoder) throws {
        let container = try decoder.singleValueContainer()
        let stringValue = try container.decode(String.self)
        if let value = Self.init(stringValue: stringValue) {
            self = value
        } else {
            throw DecodingError.dataCorruptedError(in: container, debugDescription: "Could not initialize \(Self.self) from invalid string value \(stringValue)")
        }
    }
}
