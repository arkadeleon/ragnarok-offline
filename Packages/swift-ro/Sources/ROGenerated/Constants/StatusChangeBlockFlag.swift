//
//  StatusChangeBlockFlag.swift
//  RagnarokOffline
//
//  Generated by ROGenerator.
//

/// Converted from `e_scb_flag` in `map/status.hpp`.
public enum StatusChangeBlockFlag: Int, CaseIterable, Sendable {
    case none = 0
    case base = 1
    case maxhp = 2
    case maxsp = 3
    case str = 4
    case agi = 5
    case vit = 6
    case int = 7
    case dex = 8
    case luk = 9
    case batk = 10
    case watk = 11
    case matk = 12
    case hit = 13
    case flee = 14
    case def = 15
    case def2 = 16
    case mdef = 17
    case mdef2 = 18
    case speed = 19
    case aspd = 20
    case dspd = 21
    case cri = 22
    case flee2 = 23
    case atk_ele = 24
    case def_ele = 25
    case mode = 26
    case size = 27
    case race = 28
    case range = 29
    case regen = 30
    case maxap = 31
    case pow = 32
    case sta = 33
    case wis = 34
    case spl = 35
    case con = 36
    case crt = 37
    case patk = 38
    case smatk = 39
    case res = 40
    case mres = 41
    case hplus = 42
    case crate = 43
    case dye = 44
}

extension StatusChangeBlockFlag: CodingKey {
    public var stringValue: String {
        switch self {
        case .none: "NONE"
        case .base: "BASE"
        case .maxhp: "MAXHP"
        case .maxsp: "MAXSP"
        case .str: "STR"
        case .agi: "AGI"
        case .vit: "VIT"
        case .int: "INT"
        case .dex: "DEX"
        case .luk: "LUK"
        case .batk: "BATK"
        case .watk: "WATK"
        case .matk: "MATK"
        case .hit: "HIT"
        case .flee: "FLEE"
        case .def: "DEF"
        case .def2: "DEF2"
        case .mdef: "MDEF"
        case .mdef2: "MDEF2"
        case .speed: "SPEED"
        case .aspd: "ASPD"
        case .dspd: "DSPD"
        case .cri: "CRI"
        case .flee2: "FLEE2"
        case .atk_ele: "ATK_ELE"
        case .def_ele: "DEF_ELE"
        case .mode: "MODE"
        case .size: "SIZE"
        case .race: "RACE"
        case .range: "RANGE"
        case .regen: "REGEN"
        case .maxap: "MAXAP"
        case .pow: "POW"
        case .sta: "STA"
        case .wis: "WIS"
        case .spl: "SPL"
        case .con: "CON"
        case .crt: "CRT"
        case .patk: "PATK"
        case .smatk: "SMATK"
        case .res: "RES"
        case .mres: "MRES"
        case .hplus: "HPLUS"
        case .crate: "CRATE"
        case .dye: "DYE"
        }
    }

    public init?(stringValue: String) {
        switch stringValue.uppercased() {
        case "NONE": self = .none
        case "BASE": self = .base
        case "MAXHP": self = .maxhp
        case "MAXSP": self = .maxsp
        case "STR": self = .str
        case "AGI": self = .agi
        case "VIT": self = .vit
        case "INT": self = .int
        case "DEX": self = .dex
        case "LUK": self = .luk
        case "BATK": self = .batk
        case "WATK": self = .watk
        case "MATK": self = .matk
        case "HIT": self = .hit
        case "FLEE": self = .flee
        case "DEF": self = .def
        case "DEF2": self = .def2
        case "MDEF": self = .mdef
        case "MDEF2": self = .mdef2
        case "SPEED": self = .speed
        case "ASPD": self = .aspd
        case "DSPD": self = .dspd
        case "CRI": self = .cri
        case "FLEE2": self = .flee2
        case "ATK_ELE": self = .atk_ele
        case "DEF_ELE": self = .def_ele
        case "MODE": self = .mode
        case "SIZE": self = .size
        case "RACE": self = .race
        case "RANGE": self = .range
        case "REGEN": self = .regen
        case "MAXAP": self = .maxap
        case "POW": self = .pow
        case "STA": self = .sta
        case "WIS": self = .wis
        case "SPL": self = .spl
        case "CON": self = .con
        case "CRT": self = .crt
        case "PATK": self = .patk
        case "SMATK": self = .smatk
        case "RES": self = .res
        case "MRES": self = .mres
        case "HPLUS": self = .hplus
        case "CRATE": self = .crate
        case "DYE": self = .dye
        default: return nil
        }
    }

    public var intValue: Int? {
        rawValue
    }

    public init?(intValue: Int) {
        self.init(rawValue: intValue)
    }
}

extension StatusChangeBlockFlag: CodingKeyRepresentable {
    public var codingKey: any CodingKey {
        self
    }

    public init?<T>(codingKey: T) where T: CodingKey {
        self.init(stringValue: codingKey.stringValue)
    }
}

extension StatusChangeBlockFlag: Decodable {
    public init(from decoder: any Decoder) throws {
        let container = try decoder.singleValueContainer()
        let stringValue = try container.decode(String.self)
        if let value = Self.init(stringValue: stringValue) {
            self = value
        } else {
            throw DecodingError.dataCorruptedError(in: container, debugDescription: "Could not initialize \(Self.self) from invalid string value \(stringValue)")
        }
    }
}
