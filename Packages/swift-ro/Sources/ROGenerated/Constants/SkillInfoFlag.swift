//
//  SkillInfoFlag.swift
//  RagnarokOffline
//
//  Generated by ROGenerator.
//

public enum SkillInfoFlag: CaseIterable, RawRepresentable, Sendable {
    case passive
    case attack
    case ground
    case _self
    case support
    case trap

    public var rawValue: Int {
        switch self {
        case .passive: 0x0
        case .attack: 0x1
        case .ground: 0x2
        case ._self: 0x4
        case .support: 0x10
        case .trap: 0x20
        }
    }

    public init?(rawValue: Int) {
        switch rawValue {
        case 0x0: self = .passive
        case 0x1: self = .attack
        case 0x2: self = .ground
        case 0x4: self = ._self
        case 0x10: self = .support
        case 0x20: self = .trap
        default: return nil
        }
    }
}

extension SkillInfoFlag: CodingKey, CodingKeyRepresentable, Decodable {
    public init?(stringValue: String) {
        switch stringValue.uppercased() {
        case "PASSIVE": self = .passive
        case "ATTACK": self = .attack
        case "GROUND": self = .ground
        case "SELF": self = ._self
        case "SUPPORT": self = .support
        case "TRAP": self = .trap
        default: return nil
        }
    }

    public init?<T>(codingKey: T) where T: CodingKey {
        self.init(stringValue: codingKey.stringValue)
    }

    public init(from decoder: any Decoder) throws {
        let container = try decoder.singleValueContainer()
        let stringValue = try container.decode(String.self)
        if let value = Self.init(stringValue: stringValue) {
            self = value
        } else {
            throw DecodingError.dataCorruptedError(in: container, debugDescription: "Could not initialize \(Self.self) from invalid string value \(stringValue)")
        }
    }
}
