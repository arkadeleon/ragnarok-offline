//
//  Size.swift
//  RagnarokOffline
//
//  Generated by ROGenerator.
//

public enum Size: CaseIterable, RawRepresentable, Sendable {
    case small
    case medium
    case large

    public var rawValue: Int {
        switch self {
        case .small: 0
        case .medium: 1
        case .large: 2
        }
    }

    public init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .small
        case 1: self = .medium
        case 2: self = .large
        default: return nil
        }
    }
}

extension Size: CodingKey, CodingKeyRepresentable, Decodable {
    public init?(stringValue: String) {
        switch stringValue.uppercased() {
        case "SMALL": self = .small
        case "MEDIUM": self = .medium
        case "LARGE": self = .large
        default: return nil
        }
    }

    public init?<T>(codingKey: T) where T: CodingKey {
        self.init(stringValue: codingKey.stringValue)
    }

    public init(from decoder: any Decoder) throws {
        let container = try decoder.singleValueContainer()
        let stringValue = try container.decode(String.self)
        if let value = Self.init(stringValue: stringValue) {
            self = value
        } else {
            throw DecodingError.dataCorruptedError(in: container, debugDescription: "Could not initialize \(Self.self) from invalid string value \(stringValue)")
        }
    }
}
