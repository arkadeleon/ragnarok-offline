//
//  StatusChangeOption2.swift
//  RagnarokOffline
//
//  Generated by ROGenerator.
//

/// Converted from `e_sc_opt2` in `map/status.hpp`.
public enum StatusChangeOption2: Int, CaseIterable, Sendable {
    case none = 0x0
    case poison = 0x1
    case curse = 0x2
    case silence = 0x4
    case signumcrucis = 0x8
    case blind = 0x10
    case angelus = 0x20
    case bleeding = 0x40
    case dpoison = 0x80
    case fear = 0x100
}

extension StatusChangeOption2: CodingKey {
    public var stringValue: String {
        switch self {
        case .none: "NONE"
        case .poison: "POISON"
        case .curse: "CURSE"
        case .silence: "SILENCE"
        case .signumcrucis: "SIGNUMCRUCIS"
        case .blind: "BLIND"
        case .angelus: "ANGELUS"
        case .bleeding: "BLEEDING"
        case .dpoison: "DPOISON"
        case .fear: "FEAR"
        }
    }

    public init?(stringValue: String) {
        switch stringValue.uppercased() {
        case "NONE": self = .none
        case "POISON": self = .poison
        case "CURSE": self = .curse
        case "SILENCE": self = .silence
        case "SIGNUMCRUCIS": self = .signumcrucis
        case "BLIND": self = .blind
        case "ANGELUS": self = .angelus
        case "BLEEDING": self = .bleeding
        case "DPOISON": self = .dpoison
        case "FEAR": self = .fear
        default: return nil
        }
    }

    public var intValue: Int? {
        rawValue
    }

    public init?(intValue: Int) {
        self.init(rawValue: intValue)
    }
}

extension StatusChangeOption2: CodingKeyRepresentable {
    public var codingKey: any CodingKey {
        self
    }

    public init?<T>(codingKey: T) where T: CodingKey {
        self.init(stringValue: codingKey.stringValue)
    }
}

extension StatusChangeOption2: Decodable {
    public init(from decoder: any Decoder) throws {
        let container = try decoder.singleValueContainer()
        let stringValue = try container.decode(String.self)
        if let value = Self.init(stringValue: stringValue) {
            self = value
        } else {
            throw DecodingError.dataCorruptedError(in: container, debugDescription: "Could not initialize \(Self.self) from invalid string value \(stringValue)")
        }
    }
}
