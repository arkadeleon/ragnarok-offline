//
//  WeaponType.swift
//  RagnarokOffline
//
//  Generated by ROGenerator.
//

public enum WeaponType: Int, CaseIterable, CodingKey, CodingKeyRepresentable, Decodable, Sendable {
    case fist = 0
    case dagger = 1
    case _1hsword = 2
    case _2hsword = 3
    case _1hspear = 4
    case _2hspear = 5
    case _1haxe = 6
    case _2haxe = 7
    case mace = 8
    case _2hmace = 9
    case staff = 10
    case bow = 11
    case knuckle = 12
    case musical = 13
    case whip = 14
    case book = 15
    case katar = 16
    case revolver = 17
    case rifle = 18
    case gatling = 19
    case shotgun = 20
    case grenade = 21
    case huuma = 22
    case _2hstaff = 23
    case shield = 24

    public init?(stringValue: String) {
        switch stringValue.uppercased() {
        case "FIST": self = .fist
        case "DAGGER": self = .dagger
        case "1HSWORD": self = ._1hsword
        case "2HSWORD": self = ._2hsword
        case "1HSPEAR": self = ._1hspear
        case "2HSPEAR": self = ._2hspear
        case "1HAXE": self = ._1haxe
        case "2HAXE": self = ._2haxe
        case "MACE": self = .mace
        case "2HMACE": self = ._2hmace
        case "STAFF": self = .staff
        case "BOW": self = .bow
        case "KNUCKLE": self = .knuckle
        case "MUSICAL": self = .musical
        case "WHIP": self = .whip
        case "BOOK": self = .book
        case "KATAR": self = .katar
        case "REVOLVER": self = .revolver
        case "RIFLE": self = .rifle
        case "GATLING": self = .gatling
        case "SHOTGUN": self = .shotgun
        case "GRENADE": self = .grenade
        case "HUUMA": self = .huuma
        case "2HSTAFF": self = ._2hstaff
        case "SHIELD": self = .shield
        default: return nil
        }
    }

    public init?<T>(codingKey: T) where T: CodingKey {
        self.init(stringValue: codingKey.stringValue)
    }

    public init(from decoder: any Decoder) throws {
        let container = try decoder.singleValueContainer()
        let stringValue = try container.decode(String.self)
        if let value = Self.init(stringValue: stringValue) {
            self = value
        } else {
            throw DecodingError.dataCorruptedError(in: container, debugDescription: "Could not initialize \(Self.self) from invalid string value \(stringValue)")
        }
    }
}