//
//  Sex.swift
//  RagnarokOffline
//
//  Generated by ROGenerator.
//

public enum Sex: CaseIterable, RawRepresentable, Sendable {
    case female
    case male
    case both

    public var rawValue: Int {
        switch self {
        case .female: 0
        case .male: 1
        case .both: 2
        }
    }

    public init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .female
        case 1: self = .male
        case 2: self = .both
        default: return nil
        }
    }
}

extension Sex: CodingKey, CodingKeyRepresentable, Decodable {
    public init?(stringValue: String) {
        switch stringValue.uppercased() {
        case "FEMALE": self = .female
        case "MALE": self = .male
        case "BOTH": self = .both
        default: return nil
        }
    }

    public init?<T>(codingKey: T) where T: CodingKey {
        self.init(stringValue: codingKey.stringValue)
    }

    public init(from decoder: any Decoder) throws {
        let container = try decoder.singleValueContainer()
        let stringValue = try container.decode(String.self)
        if let value = Self.init(stringValue: stringValue) {
            self = value
        } else {
            throw DecodingError.dataCorruptedError(in: container, debugDescription: "Could not initialize \(Self.self) from invalid string value \(stringValue)")
        }
    }
}
