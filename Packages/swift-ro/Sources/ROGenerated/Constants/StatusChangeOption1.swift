//
//  StatusChangeOption1.swift
//  RagnarokOffline
//
//  Generated by ROGenerator.
//

/// Converted from `e_sc_opt1` in `map/status.hpp`.
public enum StatusChangeOption1: CaseIterable, RawRepresentable, Sendable {
    case none
    case stone
    case freeze
    case stun
    case sleep
    case stonewait
    case burning
    case imprison

    public var rawValue: Int {
        switch self {
        case .none: 0
        case .stone: 1
        case .freeze: 2
        case .stun: 3
        case .sleep: 4
        case .stonewait: 6
        case .burning: 7
        case .imprison: 8
        }
    }

    public init?(rawValue: Int) {
        switch rawValue {
        case 0: self = .none
        case 1: self = .stone
        case 2: self = .freeze
        case 3: self = .stun
        case 4: self = .sleep
        case 6: self = .stonewait
        case 7: self = .burning
        case 8: self = .imprison
        default: return nil
        }
    }
}

extension StatusChangeOption1: CodingKey, CodingKeyRepresentable, Decodable {
    public init?(stringValue: String) {
        switch stringValue.uppercased() {
        case "NONE": self = .none
        case "STONE": self = .stone
        case "FREEZE": self = .freeze
        case "STUN": self = .stun
        case "SLEEP": self = .sleep
        case "STONEWAIT": self = .stonewait
        case "BURNING": self = .burning
        case "IMPRISON": self = .imprison
        default: return nil
        }
    }

    public init?<T>(codingKey: T) where T: CodingKey {
        self.init(stringValue: codingKey.stringValue)
    }

    public init(from decoder: any Decoder) throws {
        let container = try decoder.singleValueContainer()
        let stringValue = try container.decode(String.self)
        if let value = Self.init(stringValue: stringValue) {
            self = value
        } else {
            throw DecodingError.dataCorruptedError(in: container, debugDescription: "Could not initialize \(Self.self) from invalid string value \(stringValue)")
        }
    }
}
