//
//  PacketStructures.swift
//  RagnarokOffline
//
//  Generated by ROCodeGenerator.
//

import ROCore

public let HEADER_CA_LOGIN: Int16 = 0x64
public let HEADER_AC_ACCEPT_LOGIN: Int16 = 0xac4
public let HEADER_AC_REFUSE_LOGIN: Int16 = 0x83e
public let HEADER_SC_NOTIFY_BAN: Int16 = 0x81
public let HEADER_CA_REQ_HASH: Int16 = 0x1db
public let HEADER_AC_ACK_HASH: Int16 = 0x1dc
public let HEADER_CA_LOGIN2: Int16 = 0x1dd
public let HEADER_CA_LOGIN3: Int16 = 0x1fa
public let HEADER_CA_CONNECT_INFO_CHANGED: Int16 = 0x200
public let HEADER_CA_EXE_HASHCHECK: Int16 = 0x204
public let HEADER_CA_LOGIN_PCBANG: Int16 = 0x277
public let HEADER_CA_LOGIN4: Int16 = 0x27c
public let HEADER_CA_LOGIN_CHANNEL: Int16 = 0x2b0
public let HEADER_CA_SSO_LOGIN_REQ: Int16 = 0x825
public let HEADER_CT_AUTH: Int16 = 0xacf
public let HEADER_TC_RESULT: Int16 = 0xae3
public let HEADER_HC_ACK_CHANGE_CHARACTER_SLOT: Int16 = 0xb70
public let HEADER_HC_ACK_CHARINFO_PER_PAGE: Int16 = 0xb72
public let HEADER_HC_ACCEPT_MAKECHAR: Int16 = 0xb6f
public let HEADER_HC_NOTIFY_ACCESSIBLE_MAPNAME: Int16 = 0x840
public let HEADER_CH_SELECT_ACCESSIBLE_MAPNAME: Int16 = 0x841
public let HEADER_ZC_PAR_4JOB_CHANGE: Int16 = 0xb25
public let HEADER_ZC_PAR_CHANGE: Int16 = 0xb0
public let HEADER_ZC_LONGPAR_CHANGE: Int16 = 0xb1
public let HEADER_ZC_STATUS_CHANGE: Int16 = 0xbe
public let HEADER_ZC_NOTIFY_CARTITEM_COUNTINFO: Int16 = 0x121
public let HEADER_ZC_ATTACK_RANGE: Int16 = 0x13a
public let HEADER_ZC_COUPLESTATUS: Int16 = 0x141
public let HEADER_ZC_LONGLONGPAR_CHANGE: Int16 = 0xacb
public let HEADER_ZC_ITEM_PICKUP_ACK: Int16 = 0xb41
public let HEADER_ZC_BROADCASTING_SPECIAL_ITEM_OBTAIN_item: Int16 = 0x7fd
public let HEADER_ZC_INVENTORY_START: Int16 = 0xb08
public let HEADER_ZC_INVENTORY_END: Int16 = 0xb0b
public let HEADER_ZC_REQ_WEAR_EQUIP_ACK: Int16 = 0x999
public let HEADER_ZC_EQUIPWIN_MICROSCOPE: Int16 = 0xb37
public let HEADER_CZ_NPC_MARKET_PURCHASE: Int16 = 0x9d6
public let HEADER_ZC_NPC_MARKET_OPEN: Int16 = 0xb7a
public let HEADER_ZC_SHORTCUT_KEY_LIST: Int16 = 0xb20
public let HEADER_CZ_SHORTCUT_KEY_CHANGE1: Int16 = 0x2ba
public let HEADER_CZ_SHORTCUT_KEY_CHANGE2: Int16 = 0xb21
public let HEADER_CZ_SHORTCUTKEYBAR_ROTATE1: Int16 = 0xa01
public let HEADER_CZ_SHORTCUTKEYBAR_ROTATE2: Int16 = 0xb22
public let HEADER_ZC_ACK_ADD_ITEM_RODEX: Int16 = 0xb3f
public let HEADER_CZ_CHECKNAME1: Int16 = 0xa13
public let HEADER_CZ_CHECKNAME2: Int16 = 0xb97
public let HEADER_ZC_CHECKNAME: Int16 = 0xa51
public let HEADER_ZC_ACK_READ_RODEX: Int16 = 0xb63
public let HEADER_ZC_CLANINFO: Int16 = 0x98a
public let HEADER_ZC_UI_OPEN: Int16 = 0xae2
public let HEADER_ZC_UI_OPEN2: Int16 = 0xb9a
public let HEADER_ZC_ADD_ITEM_TO_STORE: Int16 = 0xb44
public let HEADER_ZC_ACK_TOUSESKILL: Int16 = 0x110
public let HEADER_ZC_ADD_ITEM_TO_CART: Int16 = 0xb45
public let HEADER_ZC_ADD_EXCHANGE_ITEM: Int16 = 0xb42
public let HEADER_ZC_ITEM_PICKUP_PARTY: Int16 = 0xb67
public let HEADER_ZC_PROPERTY_HOMUN: Int16 = 0xba4
public let HEADER_CZ_REQ_ITEMREPAIR2: Int16 = 0xb66
public let HEADER_CZ_REQ_ITEMREPAIR1: Int16 = 0x1fd
public let HEADER_ZC_PC_PURCHASE_MYITEMLIST: Int16 = 0xb40
public let HEADER_ZC_PC_PURCHASE_ITEMLIST: Int16 = 0xb77
public let HEADER_ZC_PC_PURCHASE_ITEMLIST_FROMMC: Int16 = 0xb3d
public let HEADER_ZC_MAKINGARROW_LIST: Int16 = 0x1ad
public let HEADER_ZC_SKILL_SELECT_REQUEST: Int16 = 0x442
public let HEADER_ZC_REPAIRITEMLIST: Int16 = 0xb65
public let HEADER_ZC_MAKINGITEM_LIST: Int16 = 0x25a
public let HEADER_ZC_SEARCH_STORE_INFO_FAILED: Int16 = 0x837
public let HEADER_ZC_OPEN_SEARCH_STORE_INFO: Int16 = 0x83a
public let HEADER_ZC_SSILIST_ITEM_CLICK_ACK: Int16 = 0x83d
public let HEADER_ZC_SEARCH_STORE_INFO_ACK: Int16 = 0xb64
public let HEADER_ZC_ACK_REQNAMEALL: Int16 = 0xa30
public let HEADER_ZC_ACK_REQNAMEALL_NPC: Int16 = 0xadf
public let HEADER_ZC_MOVE_ITEM_FAILED: Int16 = 0xaa7
public let HEADER_ZC_VIEW_CAMERAINFO: Int16 = 0xa78
public let HEADER_CZ_VIEW_CAMERAINFO: Int16 = 0xa77
public let HEADER_ZC_AUTOSPELLLIST: Int16 = 0xafb
public let HEADER_ZC_CHANGE_ITEM_OPTION: Int16 = 0xb43
public let HEADER_ZC_UPDATE_CARDSLOT: Int16 = 0xa3f
public let HEADER_ZC_DEBUGMSG: Int16 = 0xadb
public let HEADER_CZ_USE_SKILL_START: Int16 = 0xb10
public let HEADER_CZ_USE_SKILL_END: Int16 = 0xb11
public let HEADER_ZC_EXTEND_BODYITEM_SIZE: Int16 = 0xb18
public let HEADER_ZC_ACK_OPEN_MSGBOX_EXTEND_BODYITEM_SIZE: Int16 = 0xb15
public let HEADER_ZC_ACK_EXTEND_BODYITEM_SIZE: Int16 = 0xb17
public let HEADER_CZ_REQ_OPEN_MSGBOX_EXTEND_BODYITEM_SIZE: Int16 = 0xb14
public let HEADER_CZ_REQ_EXTEND_BODYITEM_SIZE: Int16 = 0xb16
public let HEADER_CZ_CLOSE_MSGBOX_EXTEND_BODYITEM_SIZE: Int16 = 0xb19
public let HEADER_CZ_REQ_REMAINTIME: Int16 = 0x1c0
public let HEADER_CZ_PARTY_CONFIG: Int16 = 0x2c8
public let HEADER_ZC_NPC_BARTER_MARKET_ITEMINFO: Int16 = 0xb78
public let HEADER_CZ_NPC_BARTER_MARKET_CLOSE: Int16 = 0xb12
public let HEADER_CZ_NPC_BARTER_MARKET_PURCHASE: Int16 = 0xb0f
public let HEADER_ZC_USESKILL_ACK: Int16 = 0xb1a
public let HEADER_CZ_CLIENT_VERSION: Int16 = 0x44a
public let HEADER_CZ_PING_LIVE: Int16 = 0xb1c
public let HEADER_ZC_PING_LIVE: Int16 = 0xb1d
public let HEADER_CZ_CMD_RESETCOOLTIME: Int16 = 0xa88
public let HEADER_CZ_CLOSE_UI_STYLINGSHOP: Int16 = 0xa48
public let HEADER_ZC_NOTIFY_ACTORINIT: Int16 = 0xb1b
public let HEADER_ZC_PARTY_CONFIG: Int16 = 0x2c9
public let HEADER_ZC_ROLE_CHANGE: Int16 = 0xe1
public let HEADER_ZC_BAN_LIST: Int16 = 0xb7c
public let HEADER_ZC_ACK_CLOSE_ROULETTE: Int16 = 0xa1e
public let HEADER_ZC_ACK_MERGE_ITEM: Int16 = 0x96f
public let HEADER_ZC_MERGE_ITEM_OPEN: Int16 = 0x96d
public let HEADER_ZC_SE_PC_BUY_CASHITEM_RESULT: Int16 = 0x849
public let HEADER_ZC_OPEN_REFINING_UI: Int16 = 0xaa0
public let HEADER_CZ_REFINING_SELECT_ITEM: Int16 = 0xaa1
public let HEADER_ZC_REFINING_MATERIAL_LIST: Int16 = 0xaa2
public let HEADER_CZ_REQ_REFINING: Int16 = 0xaa3
public let HEADER_CZ_CLOSE_REFINING_UI: Int16 = 0xaa4
public let HEADER_ZC_BROADCAST_ITEMREFINING_RESULT: Int16 = 0xada
public let HEADER_ZC_STATUS_CHANGE_ACK: Int16 = 0xbc
public let HEADER_ZC_EQUIPMENT_EFFECT: Int16 = 0xa3b
public let HEADER_ZC_ADD_SKILL: Int16 = 0xb31
public let HEADER_ZC_SKILLINFO_LIST: Int16 = 0xb32
public let HEADER_ZC_SKILLINFO_UPDATE2: Int16 = 0xb33
public let HEADER_ZC_NPC_MARKET_PURCHASE_RESULT: Int16 = 0xb4e
public let HEADER_ZC_TALKBOX_CHATCONTENTS: Int16 = 0x191
public let HEADER_ZC_GUILD_AGIT_INFO: Int16 = 0xb27
public let HEADER_CZ_REQ_MOVE_GUILD_AGIT: Int16 = 0xb28
public let HEADER_ZC_REQ_ACK_MOVE_GUILD_AGIT: Int16 = 0xb2e
public let HEADER_ZC_REQ_ACK_AGIT_INVESTMENT: Int16 = 0xb2d
public let HEADER_CZ_REQ_AGIT_INVESTMENT: Int16 = 0xb2c
public let HEADER_ZC_RANDOM_COMBINE_ITEM_UI_OPEN: Int16 = 0xa4e
public let HEADER_CZ_RANDOM_COMBINE_ITEM_UI_CLOSE: Int16 = 0xa70
public let HEADER_CZ_REQ_RANDOM_COMBINE_ITEM: Int16 = 0xa4f
public let HEADER_ZC_ACK_RANDOM_COMBINE_ITEM: Int16 = 0xa50
public let HEADER_CZ_UNINSTALLATION: Int16 = 0xb35
public let HEADER_ZC_NOTIFY_EFFECT3: Int16 = 0xb69
public let HEADER_CZ_SE_CASHSHOP_OPEN1: Int16 = 0x844
public let HEADER_CZ_SE_CASHSHOP_OPEN2: Int16 = 0xb6d
public let HEADER_CZ_GET_ACCOUNT_LIMTIED_SALE_LIST: Int16 = 0xb4c
public let HEADER_ZC_SE_CASHSHOP_OPEN: Int16 = 0xb6e
public let HEADER_CZ_NPC_EXPANDED_BARTER_MARKET_CLOSE: Int16 = 0xb58
public let HEADER_ZC_NPC_EXPANDED_BARTER_MARKET_ITEMINFO: Int16 = 0xb79
public let HEADER_CZ_NPC_EXPANDED_BARTER_MARKET_PURCHASE: Int16 = 0xb57
public let HEADER_ZC_STATE_CHANGE: Int16 = 0x229
public let HEADER_ZC_AUTORUN_SKILL: Int16 = 0x147
public let HEADER_ZC_RANDOM_UPGRADE_ITEM_UI_OPEN: Int16 = 0xab4
public let HEADER_ZC_ACK_RANDOM_UPGRADE_ITEM: Int16 = 0xab7
public let HEADER_CZ_RANDOM_UPGRADE_ITEM_UI_CLOSE: Int16 = 0xab5
public let HEADER_CZ_REQ_RANDOM_UPGRADE_ITEM: Int16 = 0xab6
public let HEADER_ZC_PERSONAL_INFOMATION: Int16 = 0x97b
public let HEADER_ZC_NOTIFY_SKILL: Int16 = 0x1de
public let HEADER_ZC_USE_SKILL: Int16 = 0x9cb
public let HEADER_ZC_NOTIFY_GROUNDSKILL: Int16 = 0x117
public let HEADER_ZC_SKILL_POSTDELAY: Int16 = 0x43d
public let HEADER_ZC_NOTIFY_SKILL_POSITION: Int16 = 0x115
public let HEADER_ZC_C_MARKERINFO: Int16 = 0x9c1
public let HEADER_ZC_MEMBERMGR_INFO: Int16 = 0xb7d
public let HEADER_ZC_GUILD_INFO: Int16 = 0xb7b
public let HEADER_ZC_POSITION_ID_NAME_INFO: Int16 = 0x166
public let HEADER_ZC_POSITION_INFO: Int16 = 0x160
public let HEADER_ZC_GUILD_SKILLINFO: Int16 = 0x162
public let HEADER_ZC_MYGUILD_BASIC_INFO: Int16 = 0x14c
public let HEADER_CZ_REQ_UPLOAD_MACRO_DETECTOR: Int16 = 0xa52
public let HEADER_ZC_ACK_UPLOAD_MACRO_DETECTOR: Int16 = 0xa53
public let HEADER_CZ_UPLOAD_MACRO_DETECTOR_CAPTCHA: Int16 = 0xa54
public let HEADER_ZC_COMPLETE_UPLOAD_MACRO_DETECTOR_CAPTCHA: Int16 = 0xa55
public let HEADER_CZ_REQ_APPLY_MACRO_DETECTOR: Int16 = 0xa56
public let HEADER_ZC_ACK_APPLY_MACRO_DETECTOR: Int16 = 0xa57
public let HEADER_ZC_APPLY_MACRO_DETECTOR: Int16 = 0xa58
public let HEADER_ZC_APPLY_MACRO_DETECTOR_CAPTCHA: Int16 = 0xa59
public let HEADER_CZ_COMPLETE_APPLY_MACRO_DETECTOR_CAPTCHA: Int16 = 0xa5a
public let HEADER_ZC_REQ_ANSWER_MACRO_DETECTOR: Int16 = 0xa5b
public let HEADER_CZ_ACK_ANSWER_MACRO_DETECTOR: Int16 = 0xa5c
public let HEADER_ZC_CLOSE_MACRO_DETECTOR: Int16 = 0xa5d
public let HEADER_CZ_REQ_PREVIEW_MACRO_DETECTOR: Int16 = 0xa69
public let HEADER_ZC_ACK_PREVIEW_MACRO_DETECTOR: Int16 = 0xa6a
public let HEADER_ZC_PREVIEW_MACRO_DETECTOR_CAPTCHA: Int16 = 0xa6b
public let HEADER_CZ_REQ_PLAYER_AID_IN_RANGE: Int16 = 0xa6c
public let HEADER_ZC_ACK_PLAYER_AID_IN_RANGE: Int16 = 0xa6d
public let HEADER_ZC_ACK_MAKE_GROUP: Int16 = 0xfa
public let HEADER_ZC_PARTY_JOIN_REQ: Int16 = 0x2c6
public let HEADER_ZC_PARTY_JOIN_REQ_ACK: Int16 = 0x2c5
public let HEADER_ZC_NOTIFY_CHAT_PARTY: Int16 = 0x109
public let HEADER_ZC_NOTIFY_POSITION_TO_GROUPM: Int16 = 0x107
public let HEADER_ZC_NOTIFY_HP_TO_GROUPM: Int16 = 0x80e
public let HEADER_ZC_NOTIFY_MEMBERINFO_TO_GROUPM: Int16 = 0xabd
public let HEADER_ZC_DELETE_MEMBER_FROM_GROUP: Int16 = 0x105
public let HEADER_CZ_REQ_TAKEOFF_EQUIP_ALL: Int16 = 0xbad
public let HEADER_ZC_ACK_TAKEOFF_EQUIP_ALL: Int16 = 0xbae
public let HEADER_ZC_BATTLEFIELD_NOTIFY_HP: Int16 = 0xa0e
public let HEADER_CZ_CHOOSE_MENU_ZERO: Int16 = 0xba8
public let HEADER_ZC_DIALOG_TEXT_ALIGN: Int16 = 0xba1
public let HEADER_CZ_GRADE_ENCHANT_SELECT_EQUIPMENT: Int16 = 0xb59
public let HEADER_ZC_GRADE_ENCHANT_MATERIAL_LIST: Int16 = 0xb5a
public let HEADER_CZ_GRADE_ENCHANT_REQUEST: Int16 = 0xb5b
public let HEADER_CZ_GRADE_ENCHANT_CLOSE_UI: Int16 = 0xb5c
public let HEADER_ZC_GRADE_ENCHANT_ACK: Int16 = 0xb5d
public let HEADER_ZC_GRADE_ENCHANT_BROADCAST_RESULT: Int16 = 0xb5e
public let HEADER_ZC_SHOW_IMAGE: Int16 = 0x1b3
public let HEADER_ZC_WHISPER: Int16 = 0x9de
public let HEADER_ZC_UPDATE_GDID: Int16 = 0x16c
public let HEADER_CZ_CONTACTNPC: Int16 = 0x90
public let HEADER_ZC_ATTACK_FAILURE_FOR_DISTANCE: Int16 = 0x139
public let HEADER_ZC_START_CAPTURE: Int16 = 0x19e
public let HEADER_ZC_TRYCAPTURE_MONSTER: Int16 = 0x1a0
public let HEADER_ZC_PROPERTY_PET: Int16 = 0x1a2
public let HEADER_ZC_CHANGESTATE_PET: Int16 = 0x1a4
public let HEADER_ZC_SPIRITS: Int16 = 0x1d0
public let HEADER_ZC_SPIRITS2: Int16 = 0x1e1
public let HEADER_ZC_SOULENERGY: Int16 = 0xb73
public let HEADER_ZC_SAY_DIALOG: Int16 = 0xb4
public let HEADER_ZC_SAY_DIALOG2: Int16 = 0xb4
public let HEADER_ZC_WAIT_DIALOG: Int16 = 0xb5
public let HEADER_ZC_WAIT_DIALOG2: Int16 = 0xb5
public let HEADER_ZC_PLAY_NPC_BGM: Int16 = 0x7fe
public let HEADER_CZ_MOVE_ITEM_FROM_BODY_TO_CART: Int16 = 0x126
public let HEADER_ZC_SOUND: Int16 = 0x1d3
public let HEADER_ZC_BUYING_STORE_ENTRY: Int16 = 0x814
public let HEADER_ZC_STORE_ENTRY: Int16 = 0x131
public let HEADER_CZ_PC_PURCHASE_ITEMLIST_FROMMC: Int16 = 0x134
public let HEADER_CZ_PC_PURCHASE_ITEMLIST_FROMMC2: Int16 = 0x801
public let HEADER_ZC_DISAPPEAR_BUYING_STORE_ENTRY: Int16 = 0x816
public let HEADER_ZC_OPEN_REFORM_UI: Int16 = 0xb8f
public let HEADER_CZ_CLOSE_REFORM_UI: Int16 = 0xb90
public let HEADER_CZ_ITEM_REFORM: Int16 = 0xb91
public let HEADER_ZC_ITEM_REFORM_ACK: Int16 = 0xb92
public let HEADER_CZ_REQUEST_RANDOM_ENCHANT: Int16 = 0xb9b
public let HEADER_CZ_REQUEST_PERFECT_ENCHANT: Int16 = 0xb9c
public let HEADER_CZ_REQUEST_UPGRADE_ENCHANT: Int16 = 0xb9d
public let HEADER_CZ_REQUEST_RESET_ENCHANT: Int16 = 0xb9e
public let HEADER_ZC_RESPONSE_ENCHANT: Int16 = 0xb9f
public let HEADER_CZ_CLOSE_UI_ENCHANT: Int16 = 0xba0
public let HEADER_ZC_GOLDPCCAFE_POINT: Int16 = 0xa15
public let HEADER_CZ_DYNAMICNPC_CREATE_REQUEST: Int16 = 0xa16
public let HEADER_ZC_DYNAMICNPC_CREATE_RESULT: Int16 = 0xa17
public let HEADER_CZ_REQ_GUILD_EMBLEM_IMG1: Int16 = 0x151
public let HEADER_CZ_REQ_GUILD_EMBLEM_IMG3: Int16 = 0xb46
public let HEADER_CZ_REQ_GUILD_EMBLEM_IMG2: Int16 = 0xb1e
public let HEADER_ZC_CHANGE_GUILD: Int16 = 0xb47
public let HEADER_ZC_GUILD_EMBLEM_IMG: Int16 = 0xb36
public let HEADER_CZ_ADVENTURER_AGENCY_JOIN_REQ: Int16 = 0xae6
public let HEADER_ZC_ADVENTURER_AGENCY_JOIN_RESULT: Int16 = 0xafa
public let HEADER_ZC_ADVENTURER_AGENCY_JOIN_REQ: Int16 = 0xae7
public let HEADER_CZ_ADVENTURER_AGENCY_JOIN_RESULT: Int16 = 0xaf8
public let HEADER_ZC_USER_COUNT: Int16 = 0xc2
public let HEADER_ZC_PC_PURCHASE_RESULT: Int16 = 0xca
public let HEADER_CZ_REQ_MAKINGARROW: Int16 = 0x1ae
public let HEADER_CZ_SE_PC_BUY_CASHITEM_LIST: Int16 = 0x848
public let HEADER_CZ_REQ_CASH_BARGAIN_SALE_ITEM_INFO: Int16 = 0x9ac
public let HEADER_ZC_ACK_CASH_BARGAIN_SALE_ITEM_INFO: Int16 = 0x9ad
public let HEADER_CZ_REQ_APPLY_BARGAIN_SALE_ITEM: Int16 = 0x9ae
public let HEADER_CZ_REQ_REMOVE_BARGAIN_SALE_ITEM: Int16 = 0x9b0
public let HEADER_ZC_NOTIFY_BARGAIN_SALE_SELLING: Int16 = 0x9b2
public let HEADER_ZC_NOTIFY_BARGAIN_SALE_CLOSE: Int16 = 0x9b3
public let HEADER_ZC_ACK_COUNT_BARGAIN_SALE_ITEM: Int16 = 0x9c4
public let HEADER_ZC_ACK_GUILDSTORAGE_LOG: Int16 = 0x9da
public let HEADER_CZ_ADVANCED_STATUS_CHANGE: Int16 = 0xb24
public let HEADER_CZ_REQ_ADD_NEW_EMBLEM: Int16 = 0xb46
public let HEADER_ZC_BROADCAST: Int16 = 0x9a
public let HEADER_ZC_BROADCAST2: Int16 = 0x1c3
public let HEADER_ZC_ENTRY_QUEUE_INIT: Int16 = 0x90e
public let HEADER_CZ_RODEX_RETURN: Int16 = 0xb98
public let HEADER_CZ_REQ_STYLE_CLOSE: Int16 = 0xa48
public let HEADER_ZC_SUMMON_HP_INIT: Int16 = 0xb6b
public let HEADER_ZC_SUMMON_HP_UPDATE: Int16 = 0xb6c
public let HEADER_ZC_REPUTE_INFO: Int16 = 0xb8d
public let HEADER_ZC_UI_OPEN_V3: Int16 = 0xb9a
public let HEADER_ZC_TARGET_SPIRITS: Int16 = 0xb68
public let HEADER_ZC_FRIENDS_LIST: Int16 = 0x201
public let HEADER_CZ_PC_SELL_ITEMLIST: Int16 = 0xc9
public let HEADER_CZ_REQ_CHANGE_MEMBERPOS: Int16 = 0x155
public let HEADER_ZC_CLEAR_DIALOG: Int16 = 0x8d6
public let HEADER_ZC_NOTIFY_BIND_ON_EQUIP: Int16 = 0x2d3
public let HEADER_ZC_BANKING_CHECK: Int16 = 0x9a6
public let HEADER_ZC_ACK_BANKING_WITHDRAW: Int16 = 0x9aa
public let HEADER_ZC_ACK_BANKING_DEPOSIT: Int16 = 0x9a8
public let HEADER_ZC_ACK_CLOSE_BANKING: Int16 = 0x9b9
public let HEADER_ZC_ACK_OPEN_BANKING: Int16 = 0x9b7
public let HEADER_ZC_REQ_EXCHANGE_ITEM: Int16 = 0x1f4
public let HEADER_ZC_ACK_EXCHANGE_ITEM: Int16 = 0x1f5
public let HEADER_ZC_ACK_ADD_EXCHANGE_ITEM: Int16 = 0xea
public let HEADER_ZC_COUPLENAME: Int16 = 0x1e6
public let HEADER_CZ_PARTY_REQ_MASTER_TO_JOIN: Int16 = 0xae6
public let HEADER_ZC_PARTY_REQ_MASTER_TO_JOIN: Int16 = 0xae7
public let HEADER_CZ_PARTY_REQ_ACK_MASTER_TO_JOIN: Int16 = 0xaf8
public let HEADER_ZC_PARTY_JOIN_REQ_ACK_FROM_MASTER: Int16 = 0xafa
public let HEADER_CZ_REQ_SE_CASH_TAB_CODE: Int16 = 0x846
public let HEADER_ZC_ACK_SE_CASH_ITEM_LIST2: Int16 = 0x8c0
public let HEADER_CZ_REQ_MERGE_ITEM: Int16 = 0x96e
public let HEADER_CZ_RESET_SKILL: Int16 = 0xbb1
public let HEADER_ZC_SKILLINFO_UPDATE: Int16 = 0x10e
public let HEADER_ZC_BOSS_INFO: Int16 = 0x293
public let HEADER_CZ_INVENTORY_TAB: Int16 = 0x907
public let HEADER_ZC_INVENTORY_TAB: Int16 = 0x908
public let HEADER_ZC_ACCEPT_ENTER: Int16 = 0x2eb
public let HEADER_ZC_REFUSE_ENTER: Int16 = 0x74
public let HEADER_ZC_RESTART_ACK: Int16 = 0xb3
public let HEADER_ZC_NOTIFY_VANISH: Int16 = 0x80
public let HEADER_ZC_ITEM_DISAPPEAR: Int16 = 0xa1
public let HEADER_ZC_MILLENNIUMSHIELD: Int16 = 0x440
public let HEADER_ZC_SPIRITS_ATTRIBUTE: Int16 = 0x8cf
public let HEADER_ZC_CHANGESTATE_MER: Int16 = 0x230
public let HEADER_ZC_HOSKILLINFO_LIST: Int16 = 0x235
public let HEADER_ZC_HOSKILLINFO_UPDATE: Int16 = 0x239
public let HEADER_ZC_NOTIFY_PLAYERMOVE: Int16 = 0x87
public let HEADER_ZC_CHANGE_DIRECTION: Int16 = 0x9c
public let HEADER_ZC_NPCACK_MAPMOVE: Int16 = 0x91
public let HEADER_ZC_NPCACK_SERVERMOVE: Int16 = 0xac7
public let HEADER_ZC_STOPMOVE: Int16 = 0x88
public let HEADER_ZC_SELECT_DEALTYPE: Int16 = 0xc4
public let HEADER_ZC_PC_SELL_ITEMLIST: Int16 = 0xc7
public let HEADER_ZC_CLOSE_DIALOG: Int16 = 0xb6
public let HEADER_ZC_MENU_LIST: Int16 = 0xb7
public let HEADER_ZC_OPEN_EDITDLG: Int16 = 0x142
public let HEADER_ZC_OPEN_EDITDLGSTR: Int16 = 0x1d4
public let HEADER_ZC_ACK_REQ_ALLY_GUILD: Int16 = 0x173
public let HEADER_ZC_DELETE_RELATED_GUILD: Int16 = 0x184
public let HEADER_ZC_REQ_ALLY_GUILD: Int16 = 0x171
public let HEADER_ZC_ACK_REQ_HOSTILE_GUILD: Int16 = 0x181
public let HEADER_ZC_COMPASS: Int16 = 0x144
public let HEADER_ZC_ITEM_THROW_ACK: Int16 = 0xaf
public let HEADER_ZC_DELETE_ITEM_FROM_BODY: Int16 = 0x7fa
public let HEADER_ZC_CARTOFF: Int16 = 0x12b
public let HEADER_ZC_ACK_GUILD_MENUINTERFACE: Int16 = 0x14e
public let HEADER_ZC_NOTIFY_POSITION_TO_GUILDM: Int16 = 0x1eb
public let HEADER_ZC_GUILD_CHAT: Int16 = 0x17f
public let HEADER_ZC_STATUS: Int16 = 0xbd
public let HEADER_ZC_NOTIFY_MAPINFO: Int16 = 0x189
public let HEADER_ZC_ACK_REMEMBER_WARPPOINT: Int16 = 0x11e
public let HEADER_ZC_DISPEL: Int16 = 0x1b9
public let HEADER_ZC_RESURRECTION: Int16 = 0x148
public let HEADER_ZC_NOTIFY_MAPPROPERTY2: Int16 = 0x1d6
public let HEADER_ZC_ACK_ITEMREFINING: Int16 = 0x188
public let HEADER_ZC_PAR_CHANGE_USER: Int16 = 0x1ab
public let HEADER_ZC_CHANGE_CHATROOM: Int16 = 0xdf
public let HEADER_ZC_EQUIP_ARROW: Int16 = 0x13c
public let HEADER_ZC_REQ_TAKEOFF_EQUIP_ACK: Int16 = 0x99a
public let HEADER_ZC_CLOSE_STORE: Int16 = 0xf8
public let HEADER_ZC_DELETE_ITEM_FROM_STORE: Int16 = 0xf6
public let HEADER_ZC_NOTIFY_STOREITEM_COUNTINFO: Int16 = 0xf2
public let HEADER_ZC_EXCHANGEITEM_UNDO: Int16 = 0xf1
public let HEADER_ZC_EXEC_EXCHANGE_ITEM: Int16 = 0xf0
public let HEADER_ZC_CANCEL_EXCHANGE_ITEM: Int16 = 0xee
public let HEADER_ZC_ACK_CREATE_CHATROOM: Int16 = 0xd6
public let HEADER_ZC_CONCLUDE_EXCHANGE_ITEM: Int16 = 0xec
public let HEADER_ZC_REFUSE_ENTER_ROOM: Int16 = 0xda
public let HEADER_ZC_DESTROY_ROOM: Int16 = 0xd8
public let HEADER_ZC_ENTER_ROOM: Int16 = 0xdb
public let HEADER_ZC_NPC_SHOWEFST_UPDATE: Int16 = 0x28a
public let HEADER_ZC_ACTION_FAILURE: Int16 = 0x13b
public let HEADER_ZC_NOTIFY_EFFECT: Int16 = 0x19b
public let HEADER_ZC_ACK_ITEMCOMPOSITION: Int16 = 0x17d
public let HEADER_ZC_ACK_ITEMIDENTIFY: Int16 = 0x179
public let HEADER_ZC_ACK_ITEMREPAIR: Int16 = 0x1fe
public let HEADER_ZC_EQUIPITEM_DAMAGED: Int16 = 0x2bb
public let HEADER_ZC_DELETE_ITEM_FROM_CART: Int16 = 0x125
public let HEADER_ZC_OPENSTORE: Int16 = 0x12d
public let HEADER_ZC_PC_PURCHASE_RESULT_FROMMC: Int16 = 0x135
public let HEADER_ZC_ACK_OPENSTORE2: Int16 = 0xa28
public let HEADER_ZC_SKILL_DISAPPEAR: Int16 = 0x120
public let HEADER_ZC_SKILLINFO_DELETE: Int16 = 0x441
public let HEADER_ZC_SKILL_UPDATE: Int16 = 0x1ac
public let HEADER_ZC_HIGHJUMP: Int16 = 0x1ff
public let HEADER_ZC_RECOVERY: Int16 = 0xa27
public let HEADER_ZC_ACK_WHISPER: Int16 = 0x9df
public let HEADER_ZC_ACK_ADDITEM_TO_CART: Int16 = 0x12c
public let HEADER_ZC_DELETEITEM_FROM_MCSTORE: Int16 = 0x9e5
public let HEADER_CZ_REQ_BAN_GUILD: Int16 = 0x15b
public let HEADER_CZ_REQ_LEAVE_GUILD: Int16 = 0x159
public let HEADER_CZ_REQ_DISORGANIZE_GUILD: Int16 = 0x15d
public let HEADER_ZC_ACK_DISORGANIZE_GUILD_RESULT: Int16 = 0x15e
public let HEADER_ZC_RESULT_MAKE_GUILD: Int16 = 0x167
public let HEADER_CZ_REQ_JOIN_GUILD: Int16 = 0x168
public let HEADER_ZC_ACK_REQ_JOIN_GUILD: Int16 = 0x169
public let HEADER_ZC_REQ_JOIN_GUILD: Int16 = 0x16a
public let HEADER_CZ_JOIN_GUILD: Int16 = 0x16b
public let HEADER_ZC_GUILD_NOTICE: Int16 = 0x16f
public let HEADER_CZ_REQ_JOIN_GUILD2: Int16 = 0x916
public let HEADER_CZ_REQ_JOIN_GROUP: Int16 = 0xfc
public let HEADER_CZ_JOIN_GROUP: Int16 = 0xff
public let HEADER_CZ_REQ_LEAVE_GROUP: Int16 = 0x100
public let HEADER_CZ_REQ_EXPEL_GROUP_MEMBER: Int16 = 0x103
public let HEADER_CZ_PARTY_JOIN_REQ: Int16 = 0x2c4
public let HEADER_CZ_PARTY_JOIN_REQ_ACK: Int16 = 0x2c7
public let HEADER_ZC_HO_PAR_CHANGE: Int16 = 0xba5
public let HEADER_ZC_EL_PAR_CHANGE: Int16 = 0x81e
public let HEADER_ZC_NOTIFY_ACT: Int16 = 0x8c8
public let HEADER_CZ_REQUEST_MOVENPC: Int16 = 0x232
public let HEADER_ZC_NPCSPRITE_CHANGE: Int16 = 0x1b0
public let HEADER_ZC_MEMBER_NEWENTRY: Int16 = 0xdc
public let HEADER_ZC_MEMBER_EXIT: Int16 = 0xdd
public let HEADER_CZ_MOVETO_MAP: Int16 = 0x140
public let HEADER_CZ_BROADCAST: Int16 = 0x99
public let HEADER_CZ_REQ_WEAR_EQUIP: Int16 = 0x998
public let HEADER_CZ_ACK_SELECT_DEALTYPE: Int16 = 0xc5
public let HEADER_CZ_CREATE_CHATROOM: Int16 = 0xd5
public let HEADER_CZ_BLACKSMITH_RANK: Int16 = 0x217
public let HEADER_CZ_ALCHEMIST_RANK: Int16 = 0x218
public let HEADER_ZC_BLACKSMITH_RANK: Int16 = 0x219
public let HEADER_ZC_ALCHEMIST_RANK: Int16 = 0x21a
public let HEADER_ZC_BLACKSMITH_POINT: Int16 = 0x21b
public let HEADER_ZC_ALCHEMIST_POINT: Int16 = 0x21c
public let HEADER_ZC_TAEKWON_POINT: Int16 = 0x224
public let HEADER_CZ_TAEKWON_RANK: Int16 = 0x225
public let HEADER_ZC_TAEKWON_RANK: Int16 = 0x226
public let HEADER_ZC_KILLER_POINT: Int16 = 0x236
public let HEADER_CZ_KILLER_RANK: Int16 = 0x237
public let HEADER_ZC_KILLER_RANK: Int16 = 0x238
public let HEADER_CZ_REQ_RANKING: Int16 = 0x97c
public let HEADER_ZC_ACK_RANKING: Int16 = 0x97d
public let HEADER_ZC_UPDATE_RANKING_POINT: Int16 = 0x97e
public let HEADER_ZC_ACK_RANKING2: Int16 = 0xaf6
public let HEADER_CZ_LESSEFFECT: Int16 = 0x21d
public let HEADER_CZ_ACTIVE_QUEST: Int16 = 0x2b6
public let HEADER_CZ_JOIN_BABY: Int16 = 0x1f7
public let HEADER_CZ_AUCTION_ITEM_SEARCH: Int16 = 0x251
public let HEADER_CZ_AUCTION_BUY: Int16 = 0x24f
public let HEADER_CZ_AUCTION_ADD: Int16 = 0x24d
public let HEADER_ZC_DRESSROOM_OPEN: Int16 = 0xa02
public let HEADER_ZC_ROOM_NEWENTRY: Int16 = 0xd7
public let HEADER_ZC_MONSTER_INFO: Int16 = 0x18c
public let HEADER_ZC_ACK_REQNAME_BYGID: Int16 = 0xaf7
public let HEADER_ZC_PET_ACT: Int16 = 0x1aa
public let HEADER_ZC_COMBODELAY: Int16 = 0x1d2
public let HEADER_ZC_BLADESTOP: Int16 = 0x1d1
public let HEADER_ZC_MVP: Int16 = 0x10c
public let HEADER_ZC_MVP_GETTING_SPECIAL_EXP: Int16 = 0x10b
public let HEADER_ZC_THROW_MVPITEM: Int16 = 0x10d
public let HEADER_ZC_UPDATE_MAPINFO: Int16 = 0x192
public let HEADER_CZ_REQ_ENTER_ROOM: Int16 = 0xd9
public let HEADER_CZ_CHANGE_CHATROOM: Int16 = 0xde
public let HEADER_CZ_ADD_EXCHANGE_ITEM: Int16 = 0xe8
public let HEADER_CZ_MOVE_ITEM_FROM_CART_TO_BODY: Int16 = 0x127
public let HEADER_CZ_SELECT_WARPPOINT: Int16 = 0x11b
public let HEADER_CZ_INPUT_EDITDLG: Int16 = 0x143
public let HEADER_CZ_INPUT_EDITDLGSTR: Int16 = 0x1d5
public let HEADER_CZ_CLOSE_DIALOG: Int16 = 0x146
public let HEADER_CZ_RESET: Int16 = 0x197
public let HEADER_CZ_MOVE_ITEM_FROM_STORE_TO_CART: Int16 = 0x128
public let HEADER_CZ_REQ_ITEMIDENTIFY: Int16 = 0x178
public let HEADER_CZ_SELECTAUTOSPELL: Int16 = 0x1ce
public let HEADER_CZ_REQ_ITEMCOMPOSITION_LIST: Int16 = 0x17a
public let HEADER_CZ_REQ_ITEMCOMPOSITION: Int16 = 0x17c
public let HEADER_CZ_LOCALBROADCAST: Int16 = 0x19c
public let HEADER_CZ_MOVE_ITEM_FROM_CART_TO_STORE: Int16 = 0x129
public let HEADER_ZC_FRIENDS_STATE: Int16 = 0x206
public let HEADER_CZ_MAKE_GROUP: Int16 = 0xf9
public let HEADER_CZ_MAKE_GROUP2: Int16 = 0x1e8
public let HEADER_CZ_GM_CHECKER: Int16 = 0xc0b
public let HEADER_ZC_GM_CHECKER: Int16 = 0xc0c
public let HEADER_ZC_CONFIG_NOTIFY: Int16 = 0x2da
public let HEADER_ZC_CONGRATULATION: Int16 = 0x1ea
public let HEADER_ZC_DIVORCE: Int16 = 0x205
public let HEADER_ZC_EMOTION: Int16 = 0xc0
public let HEADER_ZC_MSG: Int16 = 0x291
public let HEADER_ZC_MSG_SKILL: Int16 = 0x7e6
public let HEADER_ZC_MSG_VALUE: Int16 = 0x7e2
public let HEADER_ZC_NOTIFY_MANNER_POINT_GIVEN: Int16 = 0x14b
public let HEADER_ZC_NOTIFY_TIME: Int16 = 0x7f
public let HEADER_ZC_SETTING_WHISPER_PC: Int16 = 0xd1
public let HEADER_ZC_SETTING_WHISPER_STATE: Int16 = 0xd2
public let HEADER_ZC_SKILLMSG: Int16 = 0x215
public let HEADER_ZC_NOTIFY_CHAT: Int16 = 0x8d
public let HEADER_ZC_ITEM_ENTRY: Int16 = 0x9d
public let HEADER_ZC_MVP_GETTING_ITEM: Int16 = 0x10a
public let HEADER_ZC_MAKABLEITEMLIST: Int16 = 0x18d
public let HEADER_CZ_REQMAKINGITEM: Int16 = 0x18e
public let HEADER_ZC_ACK_REQMAKINGITEM: Int16 = 0x18f
public let HEADER_CZ_REQ_ITEMREPAIR: Int16 = 0xb66
public let HEADER_ZC_NOTIFY_WEAPONITEMLIST: Int16 = 0x221
public let HEADER_ZC_ACK_WEAPONREFINE: Int16 = 0x223
public let HEADER_CZ_REQ_MAKINGITEM: Int16 = 0x25b
public let HEADER_ZC_PC_CASH_POINT_ITEMLIST: Int16 = 0x287
public let HEADER_ZC_CASH_TIME_COUNTER: Int16 = 0x298
public let HEADER_ZC_CASH_ITEM_DELETE: Int16 = 0x299
public let HEADER_CZ_SKILL_SELECT_RESPONSE: Int16 = 0x443
public let HEADER_ZC_MYITEMLIST_BUYING_STORE: Int16 = 0x813
public let HEADER_ZC_ACK_ITEMLIST_BUYING_STORE: Int16 = 0x818
public let HEADER_ZC_FAILED_TRADE_BUYING_STORE_TO_SELLER: Int16 = 0x824
public let HEADER_CZ_SSILIST_ITEM_CLICK: Int16 = 0x83c
public let HEADER_ZC_ACK_SCHEDULER_CASHITEM: Int16 = 0x8ca
public let HEADER_ZC_NOTIFY_CLAN_CONNECTINFO: Int16 = 0x988
public let HEADER_ZC_ACK_CLAN_LEAVE: Int16 = 0x989
public let HEADER_ZC_NOTIFY_CLAN_CHAT: Int16 = 0x98e
public let HEADER_CZ_REQ_BANKING_DEPOSIT: Int16 = 0x9a7
public let HEADER_CZ_REQ_BANKING_WITHDRAW: Int16 = 0x9a9
public let HEADER_CZ_REQ_BANKING_CHECK: Int16 = 0x9ab
public let HEADER_CZ_REQ_OPEN_BANKING: Int16 = 0x9b6
public let HEADER_CZ_REQ_CLOSE_BANKING: Int16 = 0x9b8
public let HEADER_CZ_REQ_APPLY_BARGAIN_SALE_ITEM2: Int16 = 0xa3d
public let HEADER_CZ_REQ_STYLE_CHANGE: Int16 = 0xa46
public let HEADER_ZC_STYLE_CHANGE_RES: Int16 = 0xa47
public let HEADER_ZC_GROUP_ISALIVE: Int16 = 0xab2
public let HEADER_CZ_REQ_STYLE_CHANGE2: Int16 = 0xafc
public let HEADER_ZC_GUILD_POSITION: Int16 = 0xafd
public let HEADER_ZC_REMOVE_EFFECT: Int16 = 0xb0d
public let HEADER_ZC_FEED_MER: Int16 = 0x22f
public let HEADER_ZC_FEED_PET: Int16 = 0x1a3
public let HEADER_ZC_WARPLIST: Int16 = 0xabe
public let HEADER_ZC_MSG_COLOR: Int16 = 0x9cd

public let packet_header_banking_withdraw_ackType: Int16 = 0x9aa
public let packet_header_banking_deposit_ackType: Int16 = 0x9a8
public let packet_header_banking_checkType: Int16 = 0x9a6
public let packet_header_cart_additem_ackType: Int16 = 0x12c
public let packet_header_sc_notickType: Int16 = 0x196
public let packet_header_idle_unitType: Int16 = 0x9ff
public let packet_header_status_changeType: Int16 = 0x983
public let packet_header_status_change2Type: Int16 = 0x43f
public let packet_header_status_change_endType: Int16 = 0x196
public let packet_header_damageType: Int16 = 0x8c8
public let packet_header_spawn_unitType: Int16 = 0x9fe
public let packet_header_authokType: Int16 = 0x2eb
public let packet_header_script_clearType: Int16 = 0x8d6
public let packet_header_package_item_announceType: Int16 = 0x7fd
public let packet_header_item_drop_announceType: Int16 = 0x7fd
public let packet_header_unit_walkingType: Int16 = 0x9fd
public let packet_header_bgqueue_ackType: Int16 = 0x8d8
public let packet_header_bgqueue_notice_deleteType: Int16 = 0x8db
public let packet_header_bgqueue_registerType: Int16 = 0x8d7
public let packet_header_bgqueue_updateinfoType: Int16 = 0x8d9
public let packet_header_bgqueue_checkstateType: Int16 = 0x90a
public let packet_header_bgqueue_revokereqType: Int16 = 0x8da
public let packet_header_bgqueue_battlebeginackType: Int16 = 0x8e0
public let packet_header_bgqueue_notify_entryType: Int16 = 0x8d9
public let packet_header_bgqueue_battlebeginsType: Int16 = 0x8df
public let packet_header_notify_bounditemType: Int16 = 0x2d3
public let packet_header_skill_entryType: Int16 = 0x9ca
public let packet_header_graffiti_entryType: Int16 = 0x1c9
public let packet_header_dropflooritemType: Int16 = 0xadd
public let packet_header_inventorylistnormalType: Int16 = 0xb09
public let packet_header_inventorylistequipType: Int16 = 0xb39
public let packet_header_storageListNormalType: Int16 = 0xb09
public let packet_header_storageListEquipType: Int16 = 0xb39
public let packet_header_cartlistnormalType: Int16 = 0xb09
public let packet_header_cartlistequipType: Int16 = 0xb39
public let packet_header_openvendingType: Int16 = 0x136
public let packet_header_equipitemType: Int16 = 0x998
public let packet_header_unequipitemackType: Int16 = 0x99a
public let packet_header_notifybindonequip: Int16 = 0x2d3
public let packet_header_monsterhpType: Int16 = 0x977
public let packet_header_maptypeproperty2Type: Int16 = 0x99b
public let packet_header_wisendType: Int16 = 0x9df
public let packet_header_partyleaderchangedType: Int16 = 0x7fc
public let packet_header_rouletteinfoackType: Int16 = 0xa1c
public let packet_header_roulettgenerateackType: Int16 = 0xa20
public let packet_header_roulettercvitemackType: Int16 = 0xa22
public let packet_header_achievementListType: Int16 = 0xa23
public let packet_header_achievementUpdateType: Int16 = 0xa24
public let packet_header_achievementRewardAckType: Int16 = 0xa26
public let packet_header_questListType: Int16 = 0xaff
public let packet_header_rodexicon: Int16 = 0x9e7
public let packet_header_rodexwriteresult: Int16 = 0x9ed
public let packet_header_rodexnextpage: Int16 = 0x9f0
public let packet_header_rodexgetzeny: Int16 = 0x9f2
public let packet_header_rodexgetitem: Int16 = 0x9f4
public let packet_header_rodexdelete: Int16 = 0x9f6
public let packet_header_rodexremoveitem: Int16 = 0xa07
public let packet_header_rodexopenwrite: Int16 = 0xa12
public let packet_header_rodexmailList: Int16 = 0xac2
public let packet_header_skillscale: Int16 = 0xa41
public let packet_header_progressbarunit: Int16 = 0x9d1
public let packet_header_partymemberinfo: Int16 = 0xae4
public let packet_header_partyinfo: Int16 = 0xae5
public let packet_header_clanOnlineCount: Int16 = 0x988
public let packet_header_clanLeave: Int16 = 0x989
public let packet_header_clanMessage: Int16 = 0x98e
public let packet_header_questAddType: Int16 = 0xb0c
public let packet_header_questUpdateType: Int16 = 0xafe
public let packet_header_questUpdateType2: Int16 = 0x8fe
public let packet_header_authError: Int16 = 0xb02
public let packet_header_useItemAckType: Int16 = 0x1c8
public let packet_header_sendLookType: Int16 = 0x1d7
public let packet_header_buyingStoreUpdateItemType: Int16 = 0x9e6
public let packet_header_reqName: Int16 = 0x95
public let packet_header_skilWarpPointType: Int16 = 0xabe
public let packet_header_guildExpulsion: Int16 = 0xa82
public let packet_header_guildLeave: Int16 = 0xa83

public struct PACKET_CA_LOGIN: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 24 + 24 + 1)
    }
    public var packetType: Int16 = 0
    public var version: UInt32 = 0
    @FixedLengthString(lengthOfBytes: 24)
    public var username: String
    @FixedLengthString(lengthOfBytes: 24)
    public var password: String
    public var clienttype: UInt8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        version = try decoder.decode(UInt32.self)
        username = try decoder.decode(String.self, lengthOfBytes: 24)
        password = try decoder.decode(String.self, lengthOfBytes: 24)
        clienttype = try decoder.decode(UInt8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(version)
        try encoder.encode(username, lengthOfBytes: 24)
        try encoder.encode(password, lengthOfBytes: 24)
        try encoder.encode(clienttype)
    }
}

public struct PACKET_AC_ACCEPT_LOGIN_sub: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (4 + 2 + 20 + 2 + 2 + 2 + (1 * 128))
    }
    public var ip: UInt32 = 0
    public var port: UInt16 = 0
    @FixedLengthString(lengthOfBytes: 20)
    public var name: String
    public var users: UInt16 = 0
    public var type: UInt16 = 0
    public var new_: UInt16 = 0
    @FixedSizeArray(size: 128, initialValue: 0)
    public var unknown: [UInt8]
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        ip = try decoder.decode(UInt32.self)
        port = try decoder.decode(UInt16.self)
        name = try decoder.decode(String.self, lengthOfBytes: 20)
        users = try decoder.decode(UInt16.self)
        type = try decoder.decode(UInt16.self)
        new_ = try decoder.decode(UInt16.self)
        unknown = try decoder.decode([UInt8].self, count: 128)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(ip)
        try encoder.encode(port)
        try encoder.encode(name, lengthOfBytes: 20)
        try encoder.encode(users)
        try encoder.encode(type)
        try encoder.encode(new_)
        try encoder.encode(unknown)
    }
}

public struct PACKET_AC_ACCEPT_LOGIN: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        -1
    }
    public var packetType: Int16 = 0
    public var packetLength: Int16 = 0
    public var login_id1: UInt32 = 0
    public var AID: UInt32 = 0
    public var login_id2: UInt32 = 0
    public var last_ip: UInt32 = 0
    @FixedLengthString(lengthOfBytes: 26)
    public var last_login: String
    public var sex: UInt8 = 0
    @FixedLengthString(lengthOfBytes: 17)
    public var token: String
    public var char_servers: [PACKET_AC_ACCEPT_LOGIN_sub] = []
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        packetLength = try decoder.decode(Int16.self)
        login_id1 = try decoder.decode(UInt32.self)
        AID = try decoder.decode(UInt32.self)
        login_id2 = try decoder.decode(UInt32.self)
        last_ip = try decoder.decode(UInt32.self)
        last_login = try decoder.decode(String.self, lengthOfBytes: 26)
        sex = try decoder.decode(UInt8.self)
        token = try decoder.decode(String.self, lengthOfBytes: 17)
        char_servers = try decoder.decode([PACKET_AC_ACCEPT_LOGIN_sub].self, count: (Int(packetLength) - (2 + 2 + 4 + 4 + 4 + 4 + 26 + 1 + 17)) / (4 + 2 + 20 + 2 + 2 + 2 + (1 * 128)))
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(packetLength)
        try encoder.encode(login_id1)
        try encoder.encode(AID)
        try encoder.encode(login_id2)
        try encoder.encode(last_ip)
        try encoder.encode(last_login, lengthOfBytes: 26)
        try encoder.encode(sex)
        try encoder.encode(token, lengthOfBytes: 17)
        try encoder.encode(char_servers)
    }
}

public struct PACKET_AC_REFUSE_LOGIN: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 20)
    }
    public var packetType: Int16 = 0
    public var error: UInt32 = 0
    @FixedLengthString(lengthOfBytes: 20)
    public var unblock_time: String
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        error = try decoder.decode(UInt32.self)
        unblock_time = try decoder.decode(String.self, lengthOfBytes: 20)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(error)
        try encoder.encode(unblock_time, lengthOfBytes: 20)
    }
}

public struct PACKET_SC_NOTIFY_BAN: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 1)
    }
    public var packetType: Int16 = 0
    public var result: UInt8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        result = try decoder.decode(UInt8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(result)
    }
}

public struct PACKET_CA_REQ_HASH: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2)
    }
    public var packetType: Int16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
    }
}

public struct PACKET_AC_ACK_HASH: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        -1
    }
    public var packetType: Int16 = 0
    public var packetLength: Int16 = 0
    public var salt: String = ""
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        packetLength = try decoder.decode(Int16.self)
        salt = try decoder.decode(String.self, lengthOfBytes: (Int(packetLength) - (2 + 2)))
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(packetLength)
        try encoder.encode(salt)
    }
}

public struct PACKET_CA_LOGIN2: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 24 + (1 * 16) + 1)
    }
    public var packetType: Int16 = 0
    public var version: UInt32 = 0
    @FixedLengthString(lengthOfBytes: 24)
    public var username: String
    @FixedSizeArray(size: 16, initialValue: 0)
    public var passwordMD5: [UInt8]
    public var clienttype: UInt8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        version = try decoder.decode(UInt32.self)
        username = try decoder.decode(String.self, lengthOfBytes: 24)
        passwordMD5 = try decoder.decode([UInt8].self, count: 16)
        clienttype = try decoder.decode(UInt8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(version)
        try encoder.encode(username, lengthOfBytes: 24)
        try encoder.encode(passwordMD5)
        try encoder.encode(clienttype)
    }
}

public struct PACKET_CA_LOGIN3: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 24 + (1 * 16) + 1 + 1)
    }
    public var packetType: Int16 = 0
    public var version: UInt32 = 0
    @FixedLengthString(lengthOfBytes: 24)
    public var username: String
    @FixedSizeArray(size: 16, initialValue: 0)
    public var passwordMD5: [UInt8]
    public var clienttype: UInt8 = 0
    public var clientinfo: UInt8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        version = try decoder.decode(UInt32.self)
        username = try decoder.decode(String.self, lengthOfBytes: 24)
        passwordMD5 = try decoder.decode([UInt8].self, count: 16)
        clienttype = try decoder.decode(UInt8.self)
        clientinfo = try decoder.decode(UInt8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(version)
        try encoder.encode(username, lengthOfBytes: 24)
        try encoder.encode(passwordMD5)
        try encoder.encode(clienttype)
        try encoder.encode(clientinfo)
    }
}

public struct PACKET_CA_CONNECT_INFO_CHANGED: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 24)
    }
    public var packetType: Int16 = 0
    @FixedLengthString(lengthOfBytes: 24)
    public var name: String
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        name = try decoder.decode(String.self, lengthOfBytes: 24)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(name, lengthOfBytes: 24)
    }
}

public struct PACKET_CA_EXE_HASHCHECK: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 16)
    }
    public var packetType: Int16 = 0
    @FixedLengthString(lengthOfBytes: 16)
    public var hash: String
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        hash = try decoder.decode(String.self, lengthOfBytes: 16)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(hash, lengthOfBytes: 16)
    }
}

public struct PACKET_CA_LOGIN_PCBANG: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 24 + 24 + 1 + 16 + 13)
    }
    public var packetType: Int16 = 0
    public var version: UInt32 = 0
    @FixedLengthString(lengthOfBytes: 24)
    public var username: String
    @FixedLengthString(lengthOfBytes: 24)
    public var password: String
    public var clienttype: UInt8 = 0
    @FixedLengthString(lengthOfBytes: 16)
    public var ip: String
    @FixedLengthString(lengthOfBytes: 13)
    public var mac: String
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        version = try decoder.decode(UInt32.self)
        username = try decoder.decode(String.self, lengthOfBytes: 24)
        password = try decoder.decode(String.self, lengthOfBytes: 24)
        clienttype = try decoder.decode(UInt8.self)
        ip = try decoder.decode(String.self, lengthOfBytes: 16)
        mac = try decoder.decode(String.self, lengthOfBytes: 13)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(version)
        try encoder.encode(username, lengthOfBytes: 24)
        try encoder.encode(password, lengthOfBytes: 24)
        try encoder.encode(clienttype)
        try encoder.encode(ip, lengthOfBytes: 16)
        try encoder.encode(mac, lengthOfBytes: 13)
    }
}

public struct PACKET_CA_LOGIN4: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 24 + (1 * 16) + 1 + 13)
    }
    public var packetType: Int16 = 0
    public var version: UInt32 = 0
    @FixedLengthString(lengthOfBytes: 24)
    public var username: String
    @FixedSizeArray(size: 16, initialValue: 0)
    public var passwordMD5: [UInt8]
    public var clienttype: UInt8 = 0
    @FixedLengthString(lengthOfBytes: 13)
    public var mac: String
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        version = try decoder.decode(UInt32.self)
        username = try decoder.decode(String.self, lengthOfBytes: 24)
        passwordMD5 = try decoder.decode([UInt8].self, count: 16)
        clienttype = try decoder.decode(UInt8.self)
        mac = try decoder.decode(String.self, lengthOfBytes: 13)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(version)
        try encoder.encode(username, lengthOfBytes: 24)
        try encoder.encode(passwordMD5)
        try encoder.encode(clienttype)
        try encoder.encode(mac, lengthOfBytes: 13)
    }
}

public struct PACKET_CA_LOGIN_CHANNEL: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 24 + 24 + 1 + 16 + 13 + 1)
    }
    public var packetType: Int16 = 0
    public var version: UInt32 = 0
    @FixedLengthString(lengthOfBytes: 24)
    public var username: String
    @FixedLengthString(lengthOfBytes: 24)
    public var password: String
    public var clienttype: UInt8 = 0
    @FixedLengthString(lengthOfBytes: 16)
    public var ip: String
    @FixedLengthString(lengthOfBytes: 13)
    public var mac: String
    public var is_gravity: UInt8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        version = try decoder.decode(UInt32.self)
        username = try decoder.decode(String.self, lengthOfBytes: 24)
        password = try decoder.decode(String.self, lengthOfBytes: 24)
        clienttype = try decoder.decode(UInt8.self)
        ip = try decoder.decode(String.self, lengthOfBytes: 16)
        mac = try decoder.decode(String.self, lengthOfBytes: 13)
        is_gravity = try decoder.decode(UInt8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(version)
        try encoder.encode(username, lengthOfBytes: 24)
        try encoder.encode(password, lengthOfBytes: 24)
        try encoder.encode(clienttype)
        try encoder.encode(ip, lengthOfBytes: 16)
        try encoder.encode(mac, lengthOfBytes: 13)
        try encoder.encode(is_gravity)
    }
}

public struct PACKET_CA_SSO_LOGIN_REQ: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        -1
    }
    public var packetType: Int16 = 0
    public var packetLength: Int16 = 0
    public var version: UInt32 = 0
    public var clienttype: UInt8 = 0
    @FixedLengthString(lengthOfBytes: 24)
    public var username: String
    @FixedLengthString(lengthOfBytes: 27)
    public var password: String
    @FixedLengthString(lengthOfBytes: 17)
    public var mac: String
    @FixedLengthString(lengthOfBytes: 15)
    public var ip: String
    public var token: String = ""
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        packetLength = try decoder.decode(Int16.self)
        version = try decoder.decode(UInt32.self)
        clienttype = try decoder.decode(UInt8.self)
        username = try decoder.decode(String.self, lengthOfBytes: 24)
        password = try decoder.decode(String.self, lengthOfBytes: 27)
        mac = try decoder.decode(String.self, lengthOfBytes: 17)
        ip = try decoder.decode(String.self, lengthOfBytes: 15)
        token = try decoder.decode(String.self, lengthOfBytes: (Int(packetLength) - (2 + 2 + 4 + 1 + 24 + 27 + 17 + 15)))
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(packetLength)
        try encoder.encode(version)
        try encoder.encode(clienttype)
        try encoder.encode(username, lengthOfBytes: 24)
        try encoder.encode(password, lengthOfBytes: 27)
        try encoder.encode(mac, lengthOfBytes: 17)
        try encoder.encode(ip, lengthOfBytes: 15)
        try encoder.encode(token)
    }
}

public struct PACKET_CT_AUTH: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + (1 * 66))
    }
    public var packetType: Int16 = 0
    @FixedSizeArray(size: 66, initialValue: 0)
    public var unknown: [UInt8]
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        unknown = try decoder.decode([UInt8].self, count: 66)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(unknown)
    }
}

public struct PACKET_TC_RESULT: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2 + 4 + 20 + 6)
    }
    public var packetType: Int16 = 0
    public var packetLength: Int16 = 0
    public var type: UInt32 = 0
    @FixedLengthString(lengthOfBytes: 20)
    public var unknown1: String
    @FixedLengthString(lengthOfBytes: 6)
    public var unknown2: String
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        packetLength = try decoder.decode(Int16.self)
        type = try decoder.decode(UInt32.self)
        unknown1 = try decoder.decode(String.self, lengthOfBytes: 20)
        unknown2 = try decoder.decode(String.self, lengthOfBytes: 6)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(packetLength)
        try encoder.encode(type)
        try encoder.encode(unknown1, lengthOfBytes: 20)
        try encoder.encode(unknown2, lengthOfBytes: 6)
    }
}

public struct PACKET_HC_NOTIFY_ACCESSIBLE_MAPNAME_sub: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (4 + 16)
    }
    public var status: Int32 = 0
    @FixedLengthString(lengthOfBytes: 16)
    public var map: String
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        status = try decoder.decode(Int32.self)
        map = try decoder.decode(String.self, lengthOfBytes: 16)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(status)
        try encoder.encode(map, lengthOfBytes: 16)
    }
}

public struct PACKET_HC_NOTIFY_ACCESSIBLE_MAPNAME: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        -1
    }
    public var packetType: Int16 = 0
    public var packetLength: Int16 = 0
    public var maps: [PACKET_HC_NOTIFY_ACCESSIBLE_MAPNAME_sub] = []
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        packetLength = try decoder.decode(Int16.self)
        maps = try decoder.decode([PACKET_HC_NOTIFY_ACCESSIBLE_MAPNAME_sub].self, count: (Int(packetLength) - (2 + 2)) / (4 + 16))
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(packetLength)
        try encoder.encode(maps)
    }
}

public struct PACKET_CH_SELECT_ACCESSIBLE_MAPNAME: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 1 + 1)
    }
    public var packetType: Int16 = 0
    public var slot: Int8 = 0
    public var mapnumber: Int8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        slot = try decoder.decode(Int8.self)
        mapnumber = try decoder.decode(Int8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(slot)
        try encoder.encode(mapnumber)
    }
}

public struct PACKET_ZC_PAR_CHANGE: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2 + 4)
    }
    public var packetType: Int16 = 0
    public var varID: UInt16 = 0
    public var count: Int32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        varID = try decoder.decode(UInt16.self)
        count = try decoder.decode(Int32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(varID)
        try encoder.encode(count)
    }
}

public struct PACKET_ZC_LONGPAR_CHANGE: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2 + 4)
    }
    public var packetType: Int16 = 0
    public var varID: UInt16 = 0
    public var amount: Int32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        varID = try decoder.decode(UInt16.self)
        amount = try decoder.decode(Int32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(varID)
        try encoder.encode(amount)
    }
}

public struct PACKET_ZC_STATUS_CHANGE: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2 + 1)
    }
    public var packetType: Int16 = 0
    public var statusID: UInt16 = 0
    public var value: UInt8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        statusID = try decoder.decode(UInt16.self)
        value = try decoder.decode(UInt8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(statusID)
        try encoder.encode(value)
    }
}

public struct PACKET_ZC_NOTIFY_CARTITEM_COUNTINFO: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2 + 2 + 4 + 4)
    }
    public var packetType: Int16 = 0
    public var curCount: Int16 = 0
    public var maxCount: Int16 = 0
    public var curWeight: Int32 = 0
    public var maxWeight: Int32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        curCount = try decoder.decode(Int16.self)
        maxCount = try decoder.decode(Int16.self)
        curWeight = try decoder.decode(Int32.self)
        maxWeight = try decoder.decode(Int32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(curCount)
        try encoder.encode(maxCount)
        try encoder.encode(curWeight)
        try encoder.encode(maxWeight)
    }
}

public struct PACKET_ZC_ATTACK_RANGE: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2)
    }
    public var packetType: Int16 = 0
    public var currentAttRange: Int16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        currentAttRange = try decoder.decode(Int16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(currentAttRange)
    }
}

public struct PACKET_ZC_COUPLESTATUS: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 4 + 4)
    }
    public var packetType: Int16 = 0
    public var statusType: UInt32 = 0
    public var defaultStatus: Int32 = 0
    public var plusStatus: Int32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        statusType = try decoder.decode(UInt32.self)
        defaultStatus = try decoder.decode(Int32.self)
        plusStatus = try decoder.decode(Int32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(statusType)
        try encoder.encode(defaultStatus)
        try encoder.encode(plusStatus)
    }
}

public struct PACKET_ZC_LONGLONGPAR_CHANGE: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2 + 8)
    }
    public var packetType: Int16 = 0
    public var varID: UInt16 = 0
    public var amount: Int64 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        varID = try decoder.decode(UInt16.self)
        amount = try decoder.decode(Int64.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(varID)
        try encoder.encode(amount)
    }
}

public struct packet_authok: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + (1 * 3) + 1 + 1 + 2)
    }
    public var packetType: Int16 = 0
    public var startTime: UInt32 = 0
    @FixedSizeArray(size: 3, initialValue: 0)
    public var PosDir: [UInt8]
    public var xSize: UInt8 = 0
    public var ySize: UInt8 = 0
    public var font: Int16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        startTime = try decoder.decode(UInt32.self)
        PosDir = try decoder.decode([UInt8].self, count: 3)
        xSize = try decoder.decode(UInt8.self)
        ySize = try decoder.decode(UInt8.self)
        font = try decoder.decode(Int16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(startTime)
        try encoder.encode(PosDir)
        try encoder.encode(xSize)
        try encoder.encode(ySize)
        try encoder.encode(font)
    }
}

public struct packet_monster_hp: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 4 + 4)
    }
    public var packetType: Int16 = 0
    public var GID: UInt32 = 0
    public var HP: Int32 = 0
    public var MaxHP: Int32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        GID = try decoder.decode(UInt32.self)
        HP = try decoder.decode(Int32.self)
        MaxHP = try decoder.decode(Int32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(GID)
        try encoder.encode(HP)
        try encoder.encode(MaxHP)
    }
}

public struct packet_sc_notick: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2 + 4 + 1)
    }
    public var packetType: Int16 = 0
    public var index: Int16 = 0
    public var AID: UInt32 = 0
    public var state: UInt8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        index = try decoder.decode(Int16.self)
        AID = try decoder.decode(UInt32.self)
        state = try decoder.decode(UInt8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(index)
        try encoder.encode(AID)
        try encoder.encode(state)
    }
}

public struct PACKET_ZC_ITEM_PICKUP_ACK: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2 + 2 + 4 + 1 + 1 + ((4 * 4)) + 4 + 1 + 1 + 4 + 2 + ((2 + 2 + 1) * 5) + 1 + 2 + 1 + 1)
    }
    public var packetType: Int16 = 0
    public var Index: UInt16 = 0
    public var count: UInt16 = 0
    public var nameid: UInt32 = 0
    public var IsIdentified: UInt8 = 0
    public var IsDamaged: UInt8 = 0
    public var slot: EQUIPSLOTINFO = EQUIPSLOTINFO()
    public var location: UInt32 = 0
    public var type: UInt8 = 0
    public var result: UInt8 = 0
    public var HireExpireDate: Int32 = 0
    public var bindOnEquipType: UInt16 = 0
    @FixedSizeArray(size: 5, initialValue: ItemOptions())
    public var option_data: [ItemOptions]
    public var favorite: UInt8 = 0
    public var look: UInt16 = 0
    public var refiningLevel: UInt8 = 0
    public var grade: UInt8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        Index = try decoder.decode(UInt16.self)
        count = try decoder.decode(UInt16.self)
        nameid = try decoder.decode(UInt32.self)
        IsIdentified = try decoder.decode(UInt8.self)
        IsDamaged = try decoder.decode(UInt8.self)
        slot = try decoder.decode(EQUIPSLOTINFO.self)
        location = try decoder.decode(UInt32.self)
        type = try decoder.decode(UInt8.self)
        result = try decoder.decode(UInt8.self)
        HireExpireDate = try decoder.decode(Int32.self)
        bindOnEquipType = try decoder.decode(UInt16.self)
        option_data = try decoder.decode([ItemOptions].self, count: 5)
        favorite = try decoder.decode(UInt8.self)
        look = try decoder.decode(UInt16.self)
        refiningLevel = try decoder.decode(UInt8.self)
        grade = try decoder.decode(UInt8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(Index)
        try encoder.encode(count)
        try encoder.encode(nameid)
        try encoder.encode(IsIdentified)
        try encoder.encode(IsDamaged)
        try encoder.encode(slot)
        try encoder.encode(location)
        try encoder.encode(type)
        try encoder.encode(result)
        try encoder.encode(HireExpireDate)
        try encoder.encode(bindOnEquipType)
        try encoder.encode(option_data)
        try encoder.encode(favorite)
        try encoder.encode(look)
        try encoder.encode(refiningLevel)
        try encoder.encode(grade)
    }
}

public struct packet_dropflooritem: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 4 + 2 + 1 + 2 + 2 + 1 + 1 + 2 + 1 + 2)
    }
    public var packetType: Int16 = 0
    public var ITAID: UInt32 = 0
    public var ITID: UInt32 = 0
    public var type: UInt16 = 0
    public var IsIdentified: UInt8 = 0
    public var xPos: Int16 = 0
    public var yPos: Int16 = 0
    public var subX: UInt8 = 0
    public var subY: UInt8 = 0
    public var count: Int16 = 0
    public var showdropeffect: Int8 = 0
    public var dropeffectmode: Int16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        ITAID = try decoder.decode(UInt32.self)
        ITID = try decoder.decode(UInt32.self)
        type = try decoder.decode(UInt16.self)
        IsIdentified = try decoder.decode(UInt8.self)
        xPos = try decoder.decode(Int16.self)
        yPos = try decoder.decode(Int16.self)
        subX = try decoder.decode(UInt8.self)
        subY = try decoder.decode(UInt8.self)
        count = try decoder.decode(Int16.self)
        showdropeffect = try decoder.decode(Int8.self)
        dropeffectmode = try decoder.decode(Int16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(ITAID)
        try encoder.encode(ITID)
        try encoder.encode(type)
        try encoder.encode(IsIdentified)
        try encoder.encode(xPos)
        try encoder.encode(yPos)
        try encoder.encode(subX)
        try encoder.encode(subY)
        try encoder.encode(count)
        try encoder.encode(showdropeffect)
        try encoder.encode(dropeffectmode)
    }
}

public struct packet_idle_unit2: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (1)
    }
    public var _____unavailable: Int8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        _____unavailable = try decoder.decode(Int8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(_____unavailable)
    }
}

public struct packet_spawn_unit2: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (1)
    }
    public var _____unavailable: Int8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        _____unavailable = try decoder.decode(Int8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(_____unavailable)
    }
}

public struct packet_spawn_unit: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2 + 1 + 4 + 4 + 2 + 2 + 2 + 4 + 2 + 2 + 4 + 4 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 4 + 2 + 2 + 4 + 1 + 1 + (1 * 3) + 1 + 1 + 2 + 2 + 4 + 4 + 1 + 2 + 24)
    }
    public var packetType: Int16 = 0
    public var packetLength: Int16 = 0
    public var objecttype: UInt8 = 0
    public var AID: UInt32 = 0
    public var GID: UInt32 = 0
    public var speed: Int16 = 0
    public var bodyState: Int16 = 0
    public var healthState: Int16 = 0
    public var effectState: Int32 = 0
    public var job: Int16 = 0
    public var head: UInt16 = 0
    public var weapon: UInt32 = 0
    public var shield: UInt32 = 0
    public var accessory: UInt16 = 0
    public var accessory2: UInt16 = 0
    public var accessory3: UInt16 = 0
    public var headpalette: Int16 = 0
    public var bodypalette: Int16 = 0
    public var headDir: Int16 = 0
    public var robe: UInt16 = 0
    public var GUID: UInt32 = 0
    public var GEmblemVer: Int16 = 0
    public var honor: Int16 = 0
    public var virtue: Int32 = 0
    public var isPKModeON: UInt8 = 0
    public var sex: UInt8 = 0
    @FixedSizeArray(size: 3, initialValue: 0)
    public var PosDir: [UInt8]
    public var xSize: UInt8 = 0
    public var ySize: UInt8 = 0
    public var clevel: Int16 = 0
    public var font: Int16 = 0
    public var maxHP: Int32 = 0
    public var HP: Int32 = 0
    public var isBoss: UInt8 = 0
    public var body: Int16 = 0
    @FixedLengthString(lengthOfBytes: 24)
    public var name: String
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        packetLength = try decoder.decode(Int16.self)
        objecttype = try decoder.decode(UInt8.self)
        AID = try decoder.decode(UInt32.self)
        GID = try decoder.decode(UInt32.self)
        speed = try decoder.decode(Int16.self)
        bodyState = try decoder.decode(Int16.self)
        healthState = try decoder.decode(Int16.self)
        effectState = try decoder.decode(Int32.self)
        job = try decoder.decode(Int16.self)
        head = try decoder.decode(UInt16.self)
        weapon = try decoder.decode(UInt32.self)
        shield = try decoder.decode(UInt32.self)
        accessory = try decoder.decode(UInt16.self)
        accessory2 = try decoder.decode(UInt16.self)
        accessory3 = try decoder.decode(UInt16.self)
        headpalette = try decoder.decode(Int16.self)
        bodypalette = try decoder.decode(Int16.self)
        headDir = try decoder.decode(Int16.self)
        robe = try decoder.decode(UInt16.self)
        GUID = try decoder.decode(UInt32.self)
        GEmblemVer = try decoder.decode(Int16.self)
        honor = try decoder.decode(Int16.self)
        virtue = try decoder.decode(Int32.self)
        isPKModeON = try decoder.decode(UInt8.self)
        sex = try decoder.decode(UInt8.self)
        PosDir = try decoder.decode([UInt8].self, count: 3)
        xSize = try decoder.decode(UInt8.self)
        ySize = try decoder.decode(UInt8.self)
        clevel = try decoder.decode(Int16.self)
        font = try decoder.decode(Int16.self)
        maxHP = try decoder.decode(Int32.self)
        HP = try decoder.decode(Int32.self)
        isBoss = try decoder.decode(UInt8.self)
        body = try decoder.decode(Int16.self)
        name = try decoder.decode(String.self, lengthOfBytes: 24)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(packetLength)
        try encoder.encode(objecttype)
        try encoder.encode(AID)
        try encoder.encode(GID)
        try encoder.encode(speed)
        try encoder.encode(bodyState)
        try encoder.encode(healthState)
        try encoder.encode(effectState)
        try encoder.encode(job)
        try encoder.encode(head)
        try encoder.encode(weapon)
        try encoder.encode(shield)
        try encoder.encode(accessory)
        try encoder.encode(accessory2)
        try encoder.encode(accessory3)
        try encoder.encode(headpalette)
        try encoder.encode(bodypalette)
        try encoder.encode(headDir)
        try encoder.encode(robe)
        try encoder.encode(GUID)
        try encoder.encode(GEmblemVer)
        try encoder.encode(honor)
        try encoder.encode(virtue)
        try encoder.encode(isPKModeON)
        try encoder.encode(sex)
        try encoder.encode(PosDir)
        try encoder.encode(xSize)
        try encoder.encode(ySize)
        try encoder.encode(clevel)
        try encoder.encode(font)
        try encoder.encode(maxHP)
        try encoder.encode(HP)
        try encoder.encode(isBoss)
        try encoder.encode(body)
        try encoder.encode(name, lengthOfBytes: 24)
    }
}

public struct packet_unit_walking: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2 + 1 + 4 + 4 + 2 + 2 + 2 + 4 + 2 + 2 + 4 + 4 + 2 + 4 + 2 + 2 + 2 + 2 + 2 + 2 + 4 + 2 + 2 + 4 + 1 + 1 + (1 * 6) + 1 + 1 + 2 + 2 + 4 + 4 + 1 + 2 + 24)
    }
    public var packetType: Int16 = 0
    public var packetLength: Int16 = 0
    public var objecttype: UInt8 = 0
    public var AID: UInt32 = 0
    public var GID: UInt32 = 0
    public var speed: Int16 = 0
    public var bodyState: Int16 = 0
    public var healthState: Int16 = 0
    public var effectState: Int32 = 0
    public var job: Int16 = 0
    public var head: UInt16 = 0
    public var weapon: UInt32 = 0
    public var shield: UInt32 = 0
    public var accessory: UInt16 = 0
    public var moveStartTime: UInt32 = 0
    public var accessory2: UInt16 = 0
    public var accessory3: UInt16 = 0
    public var headpalette: Int16 = 0
    public var bodypalette: Int16 = 0
    public var headDir: Int16 = 0
    public var robe: UInt16 = 0
    public var GUID: UInt32 = 0
    public var GEmblemVer: Int16 = 0
    public var honor: Int16 = 0
    public var virtue: Int32 = 0
    public var isPKModeON: UInt8 = 0
    public var sex: UInt8 = 0
    @FixedSizeArray(size: 6, initialValue: 0)
    public var MoveData: [UInt8]
    public var xSize: UInt8 = 0
    public var ySize: UInt8 = 0
    public var clevel: Int16 = 0
    public var font: Int16 = 0
    public var maxHP: Int32 = 0
    public var HP: Int32 = 0
    public var isBoss: UInt8 = 0
    public var body: UInt16 = 0
    @FixedLengthString(lengthOfBytes: 24)
    public var name: String
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        packetLength = try decoder.decode(Int16.self)
        objecttype = try decoder.decode(UInt8.self)
        AID = try decoder.decode(UInt32.self)
        GID = try decoder.decode(UInt32.self)
        speed = try decoder.decode(Int16.self)
        bodyState = try decoder.decode(Int16.self)
        healthState = try decoder.decode(Int16.self)
        effectState = try decoder.decode(Int32.self)
        job = try decoder.decode(Int16.self)
        head = try decoder.decode(UInt16.self)
        weapon = try decoder.decode(UInt32.self)
        shield = try decoder.decode(UInt32.self)
        accessory = try decoder.decode(UInt16.self)
        moveStartTime = try decoder.decode(UInt32.self)
        accessory2 = try decoder.decode(UInt16.self)
        accessory3 = try decoder.decode(UInt16.self)
        headpalette = try decoder.decode(Int16.self)
        bodypalette = try decoder.decode(Int16.self)
        headDir = try decoder.decode(Int16.self)
        robe = try decoder.decode(UInt16.self)
        GUID = try decoder.decode(UInt32.self)
        GEmblemVer = try decoder.decode(Int16.self)
        honor = try decoder.decode(Int16.self)
        virtue = try decoder.decode(Int32.self)
        isPKModeON = try decoder.decode(UInt8.self)
        sex = try decoder.decode(UInt8.self)
        MoveData = try decoder.decode([UInt8].self, count: 6)
        xSize = try decoder.decode(UInt8.self)
        ySize = try decoder.decode(UInt8.self)
        clevel = try decoder.decode(Int16.self)
        font = try decoder.decode(Int16.self)
        maxHP = try decoder.decode(Int32.self)
        HP = try decoder.decode(Int32.self)
        isBoss = try decoder.decode(UInt8.self)
        body = try decoder.decode(UInt16.self)
        name = try decoder.decode(String.self, lengthOfBytes: 24)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(packetLength)
        try encoder.encode(objecttype)
        try encoder.encode(AID)
        try encoder.encode(GID)
        try encoder.encode(speed)
        try encoder.encode(bodyState)
        try encoder.encode(healthState)
        try encoder.encode(effectState)
        try encoder.encode(job)
        try encoder.encode(head)
        try encoder.encode(weapon)
        try encoder.encode(shield)
        try encoder.encode(accessory)
        try encoder.encode(moveStartTime)
        try encoder.encode(accessory2)
        try encoder.encode(accessory3)
        try encoder.encode(headpalette)
        try encoder.encode(bodypalette)
        try encoder.encode(headDir)
        try encoder.encode(robe)
        try encoder.encode(GUID)
        try encoder.encode(GEmblemVer)
        try encoder.encode(honor)
        try encoder.encode(virtue)
        try encoder.encode(isPKModeON)
        try encoder.encode(sex)
        try encoder.encode(MoveData)
        try encoder.encode(xSize)
        try encoder.encode(ySize)
        try encoder.encode(clevel)
        try encoder.encode(font)
        try encoder.encode(maxHP)
        try encoder.encode(HP)
        try encoder.encode(isBoss)
        try encoder.encode(body)
        try encoder.encode(name, lengthOfBytes: 24)
    }
}

public struct packet_idle_unit: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2 + 1 + 4 + 4 + 2 + 2 + 2 + 4 + 2 + 2 + 4 + 4 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 4 + 2 + 2 + 4 + 1 + 1 + (1 * 3) + 1 + 1 + 1 + 2 + 2 + 4 + 4 + 1 + 2 + 24)
    }
    public var packetType: Int16 = 0
    public var packetLength: Int16 = 0
    public var objecttype: UInt8 = 0
    public var AID: UInt32 = 0
    public var GID: UInt32 = 0
    public var speed: Int16 = 0
    public var bodyState: Int16 = 0
    public var healthState: Int16 = 0
    public var effectState: Int32 = 0
    public var job: Int16 = 0
    public var head: UInt16 = 0
    public var weapon: UInt32 = 0
    public var shield: UInt32 = 0
    public var accessory: UInt16 = 0
    public var accessory2: UInt16 = 0
    public var accessory3: UInt16 = 0
    public var headpalette: Int16 = 0
    public var bodypalette: Int16 = 0
    public var headDir: Int16 = 0
    public var robe: UInt16 = 0
    public var GUID: UInt32 = 0
    public var GEmblemVer: Int16 = 0
    public var honor: Int16 = 0
    public var virtue: Int32 = 0
    public var isPKModeON: UInt8 = 0
    public var sex: UInt8 = 0
    @FixedSizeArray(size: 3, initialValue: 0)
    public var PosDir: [UInt8]
    public var xSize: UInt8 = 0
    public var ySize: UInt8 = 0
    public var state: UInt8 = 0
    public var clevel: Int16 = 0
    public var font: Int16 = 0
    public var maxHP: Int32 = 0
    public var HP: Int32 = 0
    public var isBoss: UInt8 = 0
    public var body: UInt16 = 0
    @FixedLengthString(lengthOfBytes: 24)
    public var name: String
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        packetLength = try decoder.decode(Int16.self)
        objecttype = try decoder.decode(UInt8.self)
        AID = try decoder.decode(UInt32.self)
        GID = try decoder.decode(UInt32.self)
        speed = try decoder.decode(Int16.self)
        bodyState = try decoder.decode(Int16.self)
        healthState = try decoder.decode(Int16.self)
        effectState = try decoder.decode(Int32.self)
        job = try decoder.decode(Int16.self)
        head = try decoder.decode(UInt16.self)
        weapon = try decoder.decode(UInt32.self)
        shield = try decoder.decode(UInt32.self)
        accessory = try decoder.decode(UInt16.self)
        accessory2 = try decoder.decode(UInt16.self)
        accessory3 = try decoder.decode(UInt16.self)
        headpalette = try decoder.decode(Int16.self)
        bodypalette = try decoder.decode(Int16.self)
        headDir = try decoder.decode(Int16.self)
        robe = try decoder.decode(UInt16.self)
        GUID = try decoder.decode(UInt32.self)
        GEmblemVer = try decoder.decode(Int16.self)
        honor = try decoder.decode(Int16.self)
        virtue = try decoder.decode(Int32.self)
        isPKModeON = try decoder.decode(UInt8.self)
        sex = try decoder.decode(UInt8.self)
        PosDir = try decoder.decode([UInt8].self, count: 3)
        xSize = try decoder.decode(UInt8.self)
        ySize = try decoder.decode(UInt8.self)
        state = try decoder.decode(UInt8.self)
        clevel = try decoder.decode(Int16.self)
        font = try decoder.decode(Int16.self)
        maxHP = try decoder.decode(Int32.self)
        HP = try decoder.decode(Int32.self)
        isBoss = try decoder.decode(UInt8.self)
        body = try decoder.decode(UInt16.self)
        name = try decoder.decode(String.self, lengthOfBytes: 24)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(packetLength)
        try encoder.encode(objecttype)
        try encoder.encode(AID)
        try encoder.encode(GID)
        try encoder.encode(speed)
        try encoder.encode(bodyState)
        try encoder.encode(healthState)
        try encoder.encode(effectState)
        try encoder.encode(job)
        try encoder.encode(head)
        try encoder.encode(weapon)
        try encoder.encode(shield)
        try encoder.encode(accessory)
        try encoder.encode(accessory2)
        try encoder.encode(accessory3)
        try encoder.encode(headpalette)
        try encoder.encode(bodypalette)
        try encoder.encode(headDir)
        try encoder.encode(robe)
        try encoder.encode(GUID)
        try encoder.encode(GEmblemVer)
        try encoder.encode(honor)
        try encoder.encode(virtue)
        try encoder.encode(isPKModeON)
        try encoder.encode(sex)
        try encoder.encode(PosDir)
        try encoder.encode(xSize)
        try encoder.encode(ySize)
        try encoder.encode(state)
        try encoder.encode(clevel)
        try encoder.encode(font)
        try encoder.encode(maxHP)
        try encoder.encode(HP)
        try encoder.encode(isBoss)
        try encoder.encode(body)
        try encoder.encode(name, lengthOfBytes: 24)
    }
}

public struct packet_status_change: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2 + 4 + 1 + 4 + 4 + 4 + 4 + 4)
    }
    public var packetType: Int16 = 0
    public var index: Int16 = 0
    public var AID: UInt32 = 0
    public var state: UInt8 = 0
    public var Total: UInt32 = 0
    public var Left: UInt32 = 0
    public var val1: Int32 = 0
    public var val2: Int32 = 0
    public var val3: Int32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        index = try decoder.decode(Int16.self)
        AID = try decoder.decode(UInt32.self)
        state = try decoder.decode(UInt8.self)
        Total = try decoder.decode(UInt32.self)
        Left = try decoder.decode(UInt32.self)
        val1 = try decoder.decode(Int32.self)
        val2 = try decoder.decode(Int32.self)
        val3 = try decoder.decode(Int32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(index)
        try encoder.encode(AID)
        try encoder.encode(state)
        try encoder.encode(Total)
        try encoder.encode(Left)
        try encoder.encode(val1)
        try encoder.encode(val2)
        try encoder.encode(val3)
    }
}

public struct packet_status_change_end: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2 + 4 + 1)
    }
    public var packetType: Int16 = 0
    public var index: Int16 = 0
    public var AID: UInt32 = 0
    public var state: UInt8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        index = try decoder.decode(Int16.self)
        AID = try decoder.decode(UInt32.self)
        state = try decoder.decode(UInt8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(index)
        try encoder.encode(AID)
        try encoder.encode(state)
    }
}

public struct packet_status_change2: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2 + 4 + 1 + 4 + 4 + 4 + 4)
    }
    public var packetType: Int16 = 0
    public var index: Int16 = 0
    public var AID: UInt32 = 0
    public var state: UInt8 = 0
    public var Left: UInt32 = 0
    public var val1: Int32 = 0
    public var val2: Int32 = 0
    public var val3: Int32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        index = try decoder.decode(Int16.self)
        AID = try decoder.decode(UInt32.self)
        state = try decoder.decode(UInt8.self)
        Left = try decoder.decode(UInt32.self)
        val1 = try decoder.decode(Int32.self)
        val2 = try decoder.decode(Int32.self)
        val3 = try decoder.decode(Int32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(index)
        try encoder.encode(AID)
        try encoder.encode(state)
        try encoder.encode(Left)
        try encoder.encode(val1)
        try encoder.encode(val2)
        try encoder.encode(val3)
    }
}

public struct packet_maptypeproperty2: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2 + 4)
    }
    public var packetType: Int16 = 0
    public var type: Int16 = 0
    public var flag: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        type = try decoder.decode(Int16.self)
        flag = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(type)
        try encoder.encode(flag)
    }
}

public struct packet_bgqueue_ack: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 1 + 24)
    }
    public var packetType: Int16 = 0
    public var type: UInt8 = 0
    @FixedLengthString(lengthOfBytes: 24)
    public var bg_name: String
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        type = try decoder.decode(UInt8.self)
        bg_name = try decoder.decode(String.self, lengthOfBytes: 24)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(type)
        try encoder.encode(bg_name, lengthOfBytes: 24)
    }
}

public struct packet_bgqueue_notice_delete: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 1 + 24)
    }
    public var packetType: Int16 = 0
    public var type: UInt8 = 0
    @FixedLengthString(lengthOfBytes: 24)
    public var bg_name: String
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        type = try decoder.decode(UInt8.self)
        bg_name = try decoder.decode(String.self, lengthOfBytes: 24)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(type)
        try encoder.encode(bg_name, lengthOfBytes: 24)
    }
}

public struct packet_bgqueue_register: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2 + 24)
    }
    public var packetType: Int16 = 0
    public var type: Int16 = 0
    @FixedLengthString(lengthOfBytes: 24)
    public var bg_name: String
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        type = try decoder.decode(Int16.self)
        bg_name = try decoder.decode(String.self, lengthOfBytes: 24)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(type)
        try encoder.encode(bg_name, lengthOfBytes: 24)
    }
}

public struct packet_bgqueue_update_info: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 24 + 4)
    }
    public var packetType: Int16 = 0
    @FixedLengthString(lengthOfBytes: 24)
    public var bg_name: String
    public var position: Int32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        bg_name = try decoder.decode(String.self, lengthOfBytes: 24)
        position = try decoder.decode(Int32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(bg_name, lengthOfBytes: 24)
        try encoder.encode(position)
    }
}

public struct packet_bgqueue_checkstate: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 24)
    }
    public var packetType: Int16 = 0
    @FixedLengthString(lengthOfBytes: 24)
    public var bg_name: String
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        bg_name = try decoder.decode(String.self, lengthOfBytes: 24)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(bg_name, lengthOfBytes: 24)
    }
}

public struct packet_bgqueue_revoke_req: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 24)
    }
    public var packetType: Int16 = 0
    @FixedLengthString(lengthOfBytes: 24)
    public var bg_name: String
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        bg_name = try decoder.decode(String.self, lengthOfBytes: 24)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(bg_name, lengthOfBytes: 24)
    }
}

public struct packet_bgqueue_battlebegin_ack: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 1 + 24 + 24)
    }
    public var packetType: Int16 = 0
    public var result: UInt8 = 0
    @FixedLengthString(lengthOfBytes: 24)
    public var bg_name: String
    @FixedLengthString(lengthOfBytes: 24)
    public var game_name: String
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        result = try decoder.decode(UInt8.self)
        bg_name = try decoder.decode(String.self, lengthOfBytes: 24)
        game_name = try decoder.decode(String.self, lengthOfBytes: 24)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(result)
        try encoder.encode(bg_name, lengthOfBytes: 24)
        try encoder.encode(game_name, lengthOfBytes: 24)
    }
}

public struct packet_bgqueue_notify_entry: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 24 + 4)
    }
    public var packetType: Int16 = 0
    @FixedLengthString(lengthOfBytes: 24)
    public var name: String
    public var position: Int32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        name = try decoder.decode(String.self, lengthOfBytes: 24)
        position = try decoder.decode(Int32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(name, lengthOfBytes: 24)
        try encoder.encode(position)
    }
}

public struct packet_bgqueue_battlebegins: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 24 + 24)
    }
    public var packetType: Int16 = 0
    @FixedLengthString(lengthOfBytes: 24)
    public var bg_name: String
    @FixedLengthString(lengthOfBytes: 24)
    public var game_name: String
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        bg_name = try decoder.decode(String.self, lengthOfBytes: 24)
        game_name = try decoder.decode(String.self, lengthOfBytes: 24)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(bg_name, lengthOfBytes: 24)
        try encoder.encode(game_name, lengthOfBytes: 24)
    }
}

public struct packet_script_clear: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4)
    }
    public var packetType: Int16 = 0
    public var NpcID: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        NpcID = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(NpcID)
    }
}

public struct PACKET_ZC_BROADCASTING_SPECIAL_ITEM_OBTAIN_item: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2 + 1 + 4 + 1 + 24 + 1 + 4)
    }
    public var packetType: Int16 = 0
    public var packetLength: Int16 = 0
    public var type: UInt8 = 0
    public var ItemID: UInt32 = 0
    public var len: Int8 = 0
    @FixedLengthString(lengthOfBytes: 24)
    public var Name: String
    public var boxItemID_len: Int8 = 0
    public var BoxItemID: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        packetLength = try decoder.decode(Int16.self)
        type = try decoder.decode(UInt8.self)
        ItemID = try decoder.decode(UInt32.self)
        len = try decoder.decode(Int8.self)
        Name = try decoder.decode(String.self, lengthOfBytes: 24)
        boxItemID_len = try decoder.decode(Int8.self)
        BoxItemID = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(packetLength)
        try encoder.encode(type)
        try encoder.encode(ItemID)
        try encoder.encode(len)
        try encoder.encode(Name, lengthOfBytes: 24)
        try encoder.encode(boxItemID_len)
        try encoder.encode(BoxItemID)
    }
}

public struct packet_item_drop_announce: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2 + 1 + 4 + 1 + 24 + 1 + 24)
    }
    public var packetType: Int16 = 0
    public var packetLength: Int16 = 0
    public var type: UInt8 = 0
    public var ItemID: UInt32 = 0
    public var len: Int8 = 0
    @FixedLengthString(lengthOfBytes: 24)
    public var Name: String
    public var monsterNameLen: Int8 = 0
    @FixedLengthString(lengthOfBytes: 24)
    public var monsterName: String
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        packetLength = try decoder.decode(Int16.self)
        type = try decoder.decode(UInt8.self)
        ItemID = try decoder.decode(UInt32.self)
        len = try decoder.decode(Int8.self)
        Name = try decoder.decode(String.self, lengthOfBytes: 24)
        monsterNameLen = try decoder.decode(Int8.self)
        monsterName = try decoder.decode(String.self, lengthOfBytes: 24)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(packetLength)
        try encoder.encode(type)
        try encoder.encode(ItemID)
        try encoder.encode(len)
        try encoder.encode(Name, lengthOfBytes: 24)
        try encoder.encode(monsterNameLen)
        try encoder.encode(monsterName, lengthOfBytes: 24)
    }
}

public struct packet_cart_additem_ack: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 1)
    }
    public var packetType: Int16 = 0
    public var result: Int8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        result = try decoder.decode(Int8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(result)
    }
}

public struct packet_banking_check: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 8 + 2)
    }
    public var packetType: Int16 = 0
    public var Money: Int64 = 0
    public var Reason: Int16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        Money = try decoder.decode(Int64.self)
        Reason = try decoder.decode(Int16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(Money)
        try encoder.encode(Reason)
    }
}

public struct packet_banking_deposit_req: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 4)
    }
    public var packetType: Int16 = 0
    public var AID: UInt32 = 0
    public var Money: Int32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        AID = try decoder.decode(UInt32.self)
        Money = try decoder.decode(Int32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(AID)
        try encoder.encode(Money)
    }
}

public struct packet_banking_withdraw_req: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 4)
    }
    public var packetType: Int16 = 0
    public var AID: UInt32 = 0
    public var Money: Int32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        AID = try decoder.decode(UInt32.self)
        Money = try decoder.decode(Int32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(AID)
        try encoder.encode(Money)
    }
}

public struct packet_banking_deposit_ack: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2 + 8 + 4)
    }
    public var packetType: Int16 = 0
    public var Reason: Int16 = 0
    public var Money: Int64 = 0
    public var Balance: Int32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        Reason = try decoder.decode(Int16.self)
        Money = try decoder.decode(Int64.self)
        Balance = try decoder.decode(Int32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(Reason)
        try encoder.encode(Money)
        try encoder.encode(Balance)
    }
}

public struct packet_banking_withdraw_ack: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2 + 8 + 4)
    }
    public var packetType: Int16 = 0
    public var Reason: Int16 = 0
    public var Money: Int64 = 0
    public var Balance: Int32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        Reason = try decoder.decode(Int16.self)
        Money = try decoder.decode(Int64.self)
        Balance = try decoder.decode(Int32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(Reason)
        try encoder.encode(Money)
        try encoder.encode(Balance)
    }
}

public struct packet_roulette_open_ack: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 1 + 4 + 1 + 1 + 4 + 4 + 4 + 4)
    }
    public var packetType: Int16 = 0
    public var Result: Int8 = 0
    public var Serial: Int32 = 0
    public var Step: Int8 = 0
    public var Idx: Int8 = 0
    public var AdditionItemID: UInt32 = 0
    public var GoldPoint: Int32 = 0
    public var SilverPoint: Int32 = 0
    public var BronzePoint: Int32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        Result = try decoder.decode(Int8.self)
        Serial = try decoder.decode(Int32.self)
        Step = try decoder.decode(Int8.self)
        Idx = try decoder.decode(Int8.self)
        AdditionItemID = try decoder.decode(UInt32.self)
        GoldPoint = try decoder.decode(Int32.self)
        SilverPoint = try decoder.decode(Int32.self)
        BronzePoint = try decoder.decode(Int32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(Result)
        try encoder.encode(Serial)
        try encoder.encode(Step)
        try encoder.encode(Idx)
        try encoder.encode(AdditionItemID)
        try encoder.encode(GoldPoint)
        try encoder.encode(SilverPoint)
        try encoder.encode(BronzePoint)
    }
}

public struct packet_roulette_info_ack: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2 + 4 + ((2 + 2 + 4 + 2 + 2) * 42))
    }
    public var packetType: Int16 = 0
    public var packetLength: Int16 = 0
    public var RouletteSerial: UInt32 = 0
    @FixedSizeArray(size: 42, initialValue: packet_roulette_info_ack_sub())
    public var ItemInfo: [packet_roulette_info_ack_sub]
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        packetLength = try decoder.decode(Int16.self)
        RouletteSerial = try decoder.decode(UInt32.self)
        ItemInfo = try decoder.decode([packet_roulette_info_ack_sub].self, count: 42)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(packetLength)
        try encoder.encode(RouletteSerial)
        try encoder.encode(ItemInfo)
    }
}

public struct packet_roulette_close_ack: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 1)
    }
    public var packetType: Int16 = 0
    public var Result: UInt8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        Result = try decoder.decode(UInt8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(Result)
    }
}

public struct packet_roulette_generate_ack: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 1 + 2 + 2 + 4 + 4 + 4 + 4)
    }
    public var packetType: Int16 = 0
    public var Result: UInt8 = 0
    public var Step: UInt16 = 0
    public var Idx: UInt16 = 0
    public var AdditionItemID: UInt32 = 0
    public var RemainGold: Int32 = 0
    public var RemainSilver: Int32 = 0
    public var RemainBronze: Int32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        Result = try decoder.decode(UInt8.self)
        Step = try decoder.decode(UInt16.self)
        Idx = try decoder.decode(UInt16.self)
        AdditionItemID = try decoder.decode(UInt32.self)
        RemainGold = try decoder.decode(Int32.self)
        RemainSilver = try decoder.decode(Int32.self)
        RemainBronze = try decoder.decode(Int32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(Result)
        try encoder.encode(Step)
        try encoder.encode(Idx)
        try encoder.encode(AdditionItemID)
        try encoder.encode(RemainGold)
        try encoder.encode(RemainSilver)
        try encoder.encode(RemainBronze)
    }
}

public struct packet_roulette_itemrecv_req: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 1)
    }
    public var packetType: Int16 = 0
    public var Condition: UInt8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        Condition = try decoder.decode(UInt8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(Condition)
    }
}

public struct packet_roulette_itemrecv_ack: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 1 + 4)
    }
    public var packetType: Int16 = 0
    public var Result: UInt8 = 0
    public var AdditionItemID: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        Result = try decoder.decode(UInt8.self)
        AdditionItemID = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(Result)
        try encoder.encode(AdditionItemID)
    }
}

public struct packet_itemlist_normal: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        -1
    }
    public var packetType: Int16 = 0
    public var packetLength: Int16 = 0
    public var invType: UInt8 = 0
    public var list: [NORMALITEM_INFO] = []
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        packetLength = try decoder.decode(Int16.self)
        invType = try decoder.decode(UInt8.self)
        list = try decoder.decode([NORMALITEM_INFO].self, count: (Int(packetLength) - (2 + 2 + 1)) / (2 + 4 + 1 + 2 + 4 + ((4 * 4)) + 4 + 1))
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(packetLength)
        try encoder.encode(invType)
        try encoder.encode(list)
    }
}

public struct packet_itemlist_equip: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        -1
    }
    public var packetType: Int16 = 0
    public var packetLength: Int16 = 0
    public var invType: UInt8 = 0
    public var list: [EQUIPITEM_INFO] = []
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        packetLength = try decoder.decode(Int16.self)
        invType = try decoder.decode(UInt8.self)
        list = try decoder.decode([EQUIPITEM_INFO].self, count: (Int(packetLength) - (2 + 2 + 1)) / (2 + 4 + 1 + 4 + 4 + ((4 * 4)) + 4 + 2 + 2 + 1 + ((2 + 2 + 1) * 5) + 1 + 1 + 1))
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(packetLength)
        try encoder.encode(invType)
        try encoder.encode(list)
    }
}

public struct PACKET_ZC_INVENTORY_START: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        -1
    }
    public var packetType: Int16 = 0
    public var packetLength: Int16 = 0
    public var invType: UInt8 = 0
    public var name: String = ""
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        packetLength = try decoder.decode(Int16.self)
        invType = try decoder.decode(UInt8.self)
        name = try decoder.decode(String.self, lengthOfBytes: (Int(packetLength) - (2 + 2 + 1)))
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(packetLength)
        try encoder.encode(invType)
        try encoder.encode(name)
    }
}

public struct PACKET_ZC_INVENTORY_END: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 1 + 1)
    }
    public var packetType: Int16 = 0
    public var invType: UInt8 = 0
    public var flag: Int8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        invType = try decoder.decode(UInt8.self)
        flag = try decoder.decode(Int8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(invType)
        try encoder.encode(flag)
    }
}

public struct packet_equip_item: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2 + 4)
    }
    public var packetType: Int16 = 0
    public var index: UInt16 = 0
    public var wearLocation: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        index = try decoder.decode(UInt16.self)
        wearLocation = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(index)
        try encoder.encode(wearLocation)
    }
}

public struct PACKET_ZC_REQ_WEAR_EQUIP_ACK: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2 + 4 + 2 + 1)
    }
    public var packetType: Int16 = 0
    public var index: UInt16 = 0
    public var wearLocation: UInt32 = 0
    public var wItemSpriteNumber: UInt16 = 0
    public var result: UInt8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        index = try decoder.decode(UInt16.self)
        wearLocation = try decoder.decode(UInt32.self)
        wItemSpriteNumber = try decoder.decode(UInt16.self)
        result = try decoder.decode(UInt8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(index)
        try encoder.encode(wearLocation)
        try encoder.encode(wItemSpriteNumber)
        try encoder.encode(result)
    }
}

public struct packet_unequipitem_ack: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2 + 4 + 1)
    }
    public var packetType: Int16 = 0
    public var index: UInt16 = 0
    public var wearLocation: UInt32 = 0
    public var result: UInt8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        index = try decoder.decode(UInt16.self)
        wearLocation = try decoder.decode(UInt32.self)
        result = try decoder.decode(UInt8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(index)
        try encoder.encode(wearLocation)
        try encoder.encode(result)
    }
}

public struct PACKET_ZC_EQUIPWIN_MICROSCOPE: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        -1
    }
    public var packetType: Int16 = 0
    public var packetLength: Int16 = 0
    @FixedLengthString(lengthOfBytes: 24)
    public var characterName: String
    public var job: Int16 = 0
    public var head: Int16 = 0
    public var accessory: Int16 = 0
    public var accessory2: Int16 = 0
    public var accessory3: Int16 = 0
    public var robe: Int16 = 0
    public var headpalette: Int16 = 0
    public var bodypalette: Int16 = 0
    public var body2: Int16 = 0
    public var sex: UInt8 = 0
    public var list: [EQUIPITEM_INFO] = []
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        packetLength = try decoder.decode(Int16.self)
        characterName = try decoder.decode(String.self, lengthOfBytes: 24)
        job = try decoder.decode(Int16.self)
        head = try decoder.decode(Int16.self)
        accessory = try decoder.decode(Int16.self)
        accessory2 = try decoder.decode(Int16.self)
        accessory3 = try decoder.decode(Int16.self)
        robe = try decoder.decode(Int16.self)
        headpalette = try decoder.decode(Int16.self)
        bodypalette = try decoder.decode(Int16.self)
        body2 = try decoder.decode(Int16.self)
        sex = try decoder.decode(UInt8.self)
        list = try decoder.decode([EQUIPITEM_INFO].self, count: (Int(packetLength) - (2 + 2 + 24 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 1)) / (2 + 4 + 1 + 4 + 4 + ((4 * 4)) + 4 + 2 + 2 + 1 + ((2 + 2 + 1) * 5) + 1 + 1 + 1))
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(packetLength)
        try encoder.encode(characterName, lengthOfBytes: 24)
        try encoder.encode(job)
        try encoder.encode(head)
        try encoder.encode(accessory)
        try encoder.encode(accessory2)
        try encoder.encode(accessory3)
        try encoder.encode(robe)
        try encoder.encode(headpalette)
        try encoder.encode(bodypalette)
        try encoder.encode(body2)
        try encoder.encode(sex)
        try encoder.encode(list)
    }
}

public struct packet_notify_bounditem: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2)
    }
    public var packetType: Int16 = 0
    public var index: UInt16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        index = try decoder.decode(UInt16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(index)
    }
}

public struct packet_skill_entry: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2 + 4 + 4 + 2 + 2 + 4 + 1 + 1 + 1)
    }
    public var packetType: Int16 = 0
    public var packetLength: Int16 = 0
    public var AID: UInt32 = 0
    public var creatorAID: UInt32 = 0
    public var xPos: Int16 = 0
    public var yPos: Int16 = 0
    public var job: Int32 = 0
    public var RadiusRange: Int8 = 0
    public var isVisible: UInt8 = 0
    public var level: UInt8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        packetLength = try decoder.decode(Int16.self)
        AID = try decoder.decode(UInt32.self)
        creatorAID = try decoder.decode(UInt32.self)
        xPos = try decoder.decode(Int16.self)
        yPos = try decoder.decode(Int16.self)
        job = try decoder.decode(Int32.self)
        RadiusRange = try decoder.decode(Int8.self)
        isVisible = try decoder.decode(UInt8.self)
        level = try decoder.decode(UInt8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(packetLength)
        try encoder.encode(AID)
        try encoder.encode(creatorAID)
        try encoder.encode(xPos)
        try encoder.encode(yPos)
        try encoder.encode(job)
        try encoder.encode(RadiusRange)
        try encoder.encode(isVisible)
        try encoder.encode(level)
    }
}

public struct packet_graffiti_entry: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 4 + 2 + 2 + 1 + 1 + 1 + 80)
    }
    public var packetType: Int16 = 0
    public var AID: UInt32 = 0
    public var creatorAID: UInt32 = 0
    public var xPos: Int16 = 0
    public var yPos: Int16 = 0
    public var job: UInt8 = 0
    public var isVisible: UInt8 = 0
    public var isContens: UInt8 = 0
    @FixedLengthString(lengthOfBytes: 80)
    public var msg: String
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        AID = try decoder.decode(UInt32.self)
        creatorAID = try decoder.decode(UInt32.self)
        xPos = try decoder.decode(Int16.self)
        yPos = try decoder.decode(Int16.self)
        job = try decoder.decode(UInt8.self)
        isVisible = try decoder.decode(UInt8.self)
        isContens = try decoder.decode(UInt8.self)
        msg = try decoder.decode(String.self, lengthOfBytes: 80)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(AID)
        try encoder.encode(creatorAID)
        try encoder.encode(xPos)
        try encoder.encode(yPos)
        try encoder.encode(job)
        try encoder.encode(isVisible)
        try encoder.encode(isContens)
        try encoder.encode(msg, lengthOfBytes: 80)
    }
}

public struct packet_damage: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 4 + 4 + 4 + 4 + 4 + 1 + 2 + 1 + 4)
    }
    public var packetType: Int16 = 0
    public var GID: UInt32 = 0
    public var targetGID: UInt32 = 0
    public var startTime: UInt32 = 0
    public var attackMT: Int32 = 0
    public var attackedMT: Int32 = 0
    public var damage: Int32 = 0
    public var is_sp_damaged: UInt8 = 0
    public var count: Int16 = 0
    public var action: UInt8 = 0
    public var leftDamage: Int32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        GID = try decoder.decode(UInt32.self)
        targetGID = try decoder.decode(UInt32.self)
        startTime = try decoder.decode(UInt32.self)
        attackMT = try decoder.decode(Int32.self)
        attackedMT = try decoder.decode(Int32.self)
        damage = try decoder.decode(Int32.self)
        is_sp_damaged = try decoder.decode(UInt8.self)
        count = try decoder.decode(Int16.self)
        action = try decoder.decode(UInt8.self)
        leftDamage = try decoder.decode(Int32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(GID)
        try encoder.encode(targetGID)
        try encoder.encode(startTime)
        try encoder.encode(attackMT)
        try encoder.encode(attackedMT)
        try encoder.encode(damage)
        try encoder.encode(is_sp_damaged)
        try encoder.encode(count)
        try encoder.encode(action)
        try encoder.encode(leftDamage)
    }
}

public struct packet_gm_monster_item: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 100)
    }
    public var packetType: Int16 = 0
    @FixedLengthString(lengthOfBytes: 100)
    public var str: String
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        str = try decoder.decode(String.self, lengthOfBytes: 100)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(str, lengthOfBytes: 100)
    }
}

public struct PACKET_CZ_NPC_MARKET_PURCHASE_sub: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (4 + 4)
    }
    public var ITID: UInt32 = 0
    public var qty: Int32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        ITID = try decoder.decode(UInt32.self)
        qty = try decoder.decode(Int32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(ITID)
        try encoder.encode(qty)
    }
}

public struct PACKET_CZ_NPC_MARKET_PURCHASE: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        -1
    }
    public var packetType: Int16 = 0
    public var packetLength: Int16 = 0
    public var list: [PACKET_CZ_NPC_MARKET_PURCHASE_sub] = []
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        packetLength = try decoder.decode(Int16.self)
        list = try decoder.decode([PACKET_CZ_NPC_MARKET_PURCHASE_sub].self, count: (Int(packetLength) - (2 + 2)) / (4 + 4))
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(packetLength)
        try encoder.encode(list)
    }
}

public struct PACKET_ZC_NPC_MARKET_OPEN_sub: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (4 + 1 + 4 + 4 + 2 + 4)
    }
    public var nameid: UInt32 = 0
    public var type: UInt8 = 0
    public var price: UInt32 = 0
    public var qty: UInt32 = 0
    public var weight: UInt16 = 0
    public var location: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        nameid = try decoder.decode(UInt32.self)
        type = try decoder.decode(UInt8.self)
        price = try decoder.decode(UInt32.self)
        qty = try decoder.decode(UInt32.self)
        weight = try decoder.decode(UInt16.self)
        location = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(nameid)
        try encoder.encode(type)
        try encoder.encode(price)
        try encoder.encode(qty)
        try encoder.encode(weight)
        try encoder.encode(location)
    }
}

public struct PACKET_ZC_NPC_MARKET_OPEN: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        -1
    }
    public var packetType: Int16 = 0
    public var packetLength: Int16 = 0
    public var list: [PACKET_ZC_NPC_MARKET_OPEN_sub] = []
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        packetLength = try decoder.decode(Int16.self)
        list = try decoder.decode([PACKET_ZC_NPC_MARKET_OPEN_sub].self, count: (Int(packetLength) - (2 + 2)) / (4 + 1 + 4 + 4 + 2 + 4))
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(packetLength)
        try encoder.encode(list)
    }
}

public struct packet_wis_end: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 1 + 4)
    }
    public var packetType: Int16 = 0
    public var result: Int8 = 0
    public var AID: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        result = try decoder.decode(Int8.self)
        AID = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(result)
        try encoder.encode(AID)
    }
}

public struct packet_party_leader_changed: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 4)
    }
    public var packetType: Int16 = 0
    public var prev_leader_aid: UInt32 = 0
    public var new_leader_aid: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        prev_leader_aid = try decoder.decode(UInt32.self)
        new_leader_aid = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(prev_leader_aid)
        try encoder.encode(new_leader_aid)
    }
}

public struct PACKET_ZC_SHORTCUT_KEY_LIST: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 1 + 2 + ((1 + 4 + 2) * 38))
    }
    public var packetType: Int16 = 0
    public var rotate: Int8 = 0
    public var tab: Int16 = 0
    @FixedSizeArray(size: 38, initialValue: hotkey_data())
    public var hotkey: [hotkey_data]
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        rotate = try decoder.decode(Int8.self)
        tab = try decoder.decode(Int16.self)
        hotkey = try decoder.decode([hotkey_data].self, count: 38)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(rotate)
        try encoder.encode(tab)
        try encoder.encode(hotkey)
    }
}

public struct PACKET_CZ_SHORTCUT_KEY_CHANGE1: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2 + (1 + 4 + 2))
    }
    public var packetType: Int16 = 0
    public var index: UInt16 = 0
    public var hotkey: hotkey_data = hotkey_data()
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        index = try decoder.decode(UInt16.self)
        hotkey = try decoder.decode(hotkey_data.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(index)
        try encoder.encode(hotkey)
    }
}

public struct PACKET_CZ_SHORTCUT_KEY_CHANGE2: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2 + 2 + (1 + 4 + 2))
    }
    public var packetType: Int16 = 0
    public var tab: UInt16 = 0
    public var index: UInt16 = 0
    public var hotkey: hotkey_data = hotkey_data()
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        tab = try decoder.decode(UInt16.self)
        index = try decoder.decode(UInt16.self)
        hotkey = try decoder.decode(hotkey_data.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(tab)
        try encoder.encode(index)
        try encoder.encode(hotkey)
    }
}

public struct PACKET_CZ_SHORTCUTKEYBAR_ROTATE1: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 1)
    }
    public var packetType: Int16 = 0
    public var rowshift: UInt8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        rowshift = try decoder.decode(UInt8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(rowshift)
    }
}

public struct PACKET_CZ_SHORTCUTKEYBAR_ROTATE2: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2 + 1)
    }
    public var packetType: Int16 = 0
    public var tab: UInt16 = 0
    public var rowshift: UInt8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        tab = try decoder.decode(UInt16.self)
        rowshift = try decoder.decode(UInt8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(tab)
        try encoder.encode(rowshift)
    }
}

public struct packet_mission_info_sub: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (4 + 4 + 4 + 4 + 2 + 2 + 2 + 2 + 24)
    }
    public var huntIdent: UInt32 = 0
    public var huntIdent2: UInt32 = 0
    public var mobType: UInt32 = 0
    public var mob_id: UInt32 = 0
    public var levelMin: Int16 = 0
    public var levelMax: Int16 = 0
    public var huntCount: Int16 = 0
    public var maxCount: Int16 = 0
    @FixedLengthString(lengthOfBytes: 24)
    public var mobName: String
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        huntIdent = try decoder.decode(UInt32.self)
        huntIdent2 = try decoder.decode(UInt32.self)
        mobType = try decoder.decode(UInt32.self)
        mob_id = try decoder.decode(UInt32.self)
        levelMin = try decoder.decode(Int16.self)
        levelMax = try decoder.decode(Int16.self)
        huntCount = try decoder.decode(Int16.self)
        maxCount = try decoder.decode(Int16.self)
        mobName = try decoder.decode(String.self, lengthOfBytes: 24)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(huntIdent)
        try encoder.encode(huntIdent2)
        try encoder.encode(mobType)
        try encoder.encode(mob_id)
        try encoder.encode(levelMin)
        try encoder.encode(levelMax)
        try encoder.encode(huntCount)
        try encoder.encode(maxCount)
        try encoder.encode(mobName, lengthOfBytes: 24)
    }
}

public struct packet_quest_list_header: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2 + 4)
    }
    public var packetType: Int16 = 0
    public var packetLength: Int16 = 0
    public var questCount: Int32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        packetLength = try decoder.decode(Int16.self)
        questCount = try decoder.decode(Int32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(packetLength)
        try encoder.encode(questCount)
    }
}

public struct packet_chat_message: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        -1
    }
    public var packetType: Int16 = 0
    public var packetLength: Int16 = 0
    public var message: String = ""
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        packetLength = try decoder.decode(Int16.self)
        message = try decoder.decode(String.self, lengthOfBytes: (Int(packetLength) - (2 + 2)))
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(packetLength)
        try encoder.encode(message)
    }
}

public struct packet_whisper_message: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        -1
    }
    public var packetType: Int16 = 0
    public var packetLength: Int16 = 0
    @FixedLengthString(lengthOfBytes: 24)
    public var name: String
    public var message: String = ""
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        packetLength = try decoder.decode(Int16.self)
        name = try decoder.decode(String.self, lengthOfBytes: 24)
        message = try decoder.decode(String.self, lengthOfBytes: (Int(packetLength) - (2 + 2 + 24)))
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(packetLength)
        try encoder.encode(name, lengthOfBytes: 24)
        try encoder.encode(message)
    }
}

public struct PACKET_CZ_ADD_ITEM_TO_MAIL: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2 + 2)
    }
    public var packetType: Int16 = 0
    public var index: Int16 = 0
    public var count: Int16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        index = try decoder.decode(Int16.self)
        count = try decoder.decode(Int16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(index)
        try encoder.encode(count)
    }
}

public struct PACKET_ZC_ACK_ADD_ITEM_RODEX: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 1 + 2 + 2 + 4 + 1 + 1 + 1 + ((4 * 4)) + ((2 + 2 + 1) * 5) + 2 + 1 + 4 + 1 + 1)
    }
    public var packetType: Int16 = 0
    public var result: Int8 = 0
    public var index: Int16 = 0
    public var count: Int16 = 0
    public var itemId: UInt32 = 0
    public var type: Int8 = 0
    public var IsIdentified: Int8 = 0
    public var IsDamaged: Int8 = 0
    public var slot: EQUIPSLOTINFO = EQUIPSLOTINFO()
    @FixedSizeArray(size: 5, initialValue: ItemOptions())
    public var optionData: [ItemOptions]
    public var weight: Int16 = 0
    public var favorite: UInt8 = 0
    public var location: UInt32 = 0
    public var refiningLevel: Int8 = 0
    public var grade: Int8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        result = try decoder.decode(Int8.self)
        index = try decoder.decode(Int16.self)
        count = try decoder.decode(Int16.self)
        itemId = try decoder.decode(UInt32.self)
        type = try decoder.decode(Int8.self)
        IsIdentified = try decoder.decode(Int8.self)
        IsDamaged = try decoder.decode(Int8.self)
        slot = try decoder.decode(EQUIPSLOTINFO.self)
        optionData = try decoder.decode([ItemOptions].self, count: 5)
        weight = try decoder.decode(Int16.self)
        favorite = try decoder.decode(UInt8.self)
        location = try decoder.decode(UInt32.self)
        refiningLevel = try decoder.decode(Int8.self)
        grade = try decoder.decode(Int8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(result)
        try encoder.encode(index)
        try encoder.encode(count)
        try encoder.encode(itemId)
        try encoder.encode(type)
        try encoder.encode(IsIdentified)
        try encoder.encode(IsDamaged)
        try encoder.encode(slot)
        try encoder.encode(optionData)
        try encoder.encode(weight)
        try encoder.encode(favorite)
        try encoder.encode(location)
        try encoder.encode(refiningLevel)
        try encoder.encode(grade)
    }
}

public struct PACKET_CZ_REQ_OPEN_WRITE_MAIL: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 24)
    }
    public var packetType: Int16 = 0
    @FixedLengthString(lengthOfBytes: 24)
    public var receiveName: String
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        receiveName = try decoder.decode(String.self, lengthOfBytes: 24)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(receiveName, lengthOfBytes: 24)
    }
}

public struct PACKET_ZC_ACK_OPEN_WRITE_MAIL: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 24 + 1)
    }
    public var packetType: Int16 = 0
    @FixedLengthString(lengthOfBytes: 24)
    public var receiveName: String
    public var result: Int8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        receiveName = try decoder.decode(String.self, lengthOfBytes: 24)
        result = try decoder.decode(Int8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(receiveName, lengthOfBytes: 24)
        try encoder.encode(result)
    }
}

public struct PACKET_CZ_REQ_REMOVE_ITEM_MAIL: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2 + 2)
    }
    public var packetType: Int16 = 0
    public var index: Int16 = 0
    public var cnt: UInt16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        index = try decoder.decode(Int16.self)
        cnt = try decoder.decode(UInt16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(index)
        try encoder.encode(cnt)
    }
}

public struct PACKET_ZC_ACK_REMOVE_ITEM_MAIL: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 1 + 2 + 2 + 2)
    }
    public var packetType: Int16 = 0
    public var result: Int8 = 0
    public var index: Int16 = 0
    public var cnt: UInt16 = 0
    public var weight: Int16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        result = try decoder.decode(Int8.self)
        index = try decoder.decode(Int16.self)
        cnt = try decoder.decode(UInt16.self)
        weight = try decoder.decode(Int16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(result)
        try encoder.encode(index)
        try encoder.encode(cnt)
        try encoder.encode(weight)
    }
}

public struct PACKET_CZ_SEND_MAIL: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        -1
    }
    public var packetType: Int16 = 0
    public var packetLength: Int16 = 0
    @FixedLengthString(lengthOfBytes: 24)
    public var receiveName: String
    @FixedLengthString(lengthOfBytes: 24)
    public var senderName: String
    public var zeny: Int64 = 0
    public var Titlelength: Int16 = 0
    public var TextcontentsLength: Int16 = 0
    public var receiver_char_id: Int32 = 0
    public var string: String = ""
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        packetLength = try decoder.decode(Int16.self)
        receiveName = try decoder.decode(String.self, lengthOfBytes: 24)
        senderName = try decoder.decode(String.self, lengthOfBytes: 24)
        zeny = try decoder.decode(Int64.self)
        Titlelength = try decoder.decode(Int16.self)
        TextcontentsLength = try decoder.decode(Int16.self)
        receiver_char_id = try decoder.decode(Int32.self)
        string = try decoder.decode(String.self, lengthOfBytes: (Int(packetLength) - (2 + 2 + 24 + 24 + 8 + 2 + 2 + 4)))
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(packetLength)
        try encoder.encode(receiveName, lengthOfBytes: 24)
        try encoder.encode(senderName, lengthOfBytes: 24)
        try encoder.encode(zeny)
        try encoder.encode(Titlelength)
        try encoder.encode(TextcontentsLength)
        try encoder.encode(receiver_char_id)
        try encoder.encode(string)
    }
}

public struct PACKET_ZC_WRITE_MAIL_RESULT: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 1)
    }
    public var packetType: Int16 = 0
    public var result: Int8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        result = try decoder.decode(Int8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(result)
    }
}

public struct PACKET_CZ_CHECKNAME1: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 24)
    }
    public var packetType: Int16 = 0
    @FixedLengthString(lengthOfBytes: 24)
    public var Name: String
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        Name = try decoder.decode(String.self, lengthOfBytes: 24)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(Name, lengthOfBytes: 24)
    }
}

public struct PACKET_CZ_CHECKNAME2: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 24 + 1)
    }
    public var packetType: Int16 = 0
    @FixedLengthString(lengthOfBytes: 24)
    public var Name: String
    public var own_char: Int8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        Name = try decoder.decode(String.self, lengthOfBytes: 24)
        own_char = try decoder.decode(Int8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(Name, lengthOfBytes: 24)
        try encoder.encode(own_char)
    }
}

public struct PACKET_ZC_CHECKNAME: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 2 + 2 + 24)
    }
    public var packetType: Int16 = 0
    public var CharId: Int32 = 0
    public var Class: Int16 = 0
    public var BaseLevel: Int16 = 0
    @FixedLengthString(lengthOfBytes: 24)
    public var Name: String
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        CharId = try decoder.decode(Int32.self)
        Class = try decoder.decode(Int16.self)
        BaseLevel = try decoder.decode(Int16.self)
        Name = try decoder.decode(String.self, lengthOfBytes: 24)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(CharId)
        try encoder.encode(Class)
        try encoder.encode(BaseLevel)
        try encoder.encode(Name, lengthOfBytes: 24)
    }
}

public struct PACKET_ZC_NOTIFY_UNREADMAIL: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 1)
    }
    public var packetType: Int16 = 0
    public var result: Int8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        result = try decoder.decode(Int8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(result)
    }
}

public struct PACKET_ZC_MAIL_LIST: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2 + 1)
    }
    public var packetType: Int16 = 0
    public var packetLength: Int16 = 0
    public var IsEnd: Int8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        packetLength = try decoder.decode(Int16.self)
        IsEnd = try decoder.decode(Int8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(packetLength)
        try encoder.encode(IsEnd)
    }
}

public struct PACKET_CZ_REQ_NEXT_MAIL_LIST: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 1 + 8)
    }
    public var packetType: Int16 = 0
    public var opentype: Int8 = 0
    public var Lower_MailID: Int64 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        opentype = try decoder.decode(Int8.self)
        Lower_MailID = try decoder.decode(Int64.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(opentype)
        try encoder.encode(Lower_MailID)
    }
}

public struct PACKET_CZ_REQ_OPEN_MAIL: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 8 + 8 + 8)
    }
    public var packetType: Int16 = 0
    public var char_Upper_MailID: Int64 = 0
    public var return_Upper_MailID: Int64 = 0
    public var account_Upper_MailID: Int64 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        char_Upper_MailID = try decoder.decode(Int64.self)
        return_Upper_MailID = try decoder.decode(Int64.self)
        account_Upper_MailID = try decoder.decode(Int64.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(char_Upper_MailID)
        try encoder.encode(return_Upper_MailID)
        try encoder.encode(account_Upper_MailID)
    }
}

public struct PACKET_CZ_REQ_READ_MAIL: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 1 + 8)
    }
    public var packetType: Int16 = 0
    public var opentype: Int8 = 0
    public var MailID: Int64 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        opentype = try decoder.decode(Int8.self)
        MailID = try decoder.decode(Int64.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(opentype)
        try encoder.encode(MailID)
    }
}

public struct PACKET_ZC_ACK_READ_RODEX_SUB: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 1 + 1 + ((4 * 4)) + 4 + 1 + 2 + 2 + ((2 + 2 + 1) * 5) + 1 + 1)
    }
    public var count: Int16 = 0
    public var ITID: UInt32 = 0
    public var IsIdentified: Int8 = 0
    public var IsDamaged: Int8 = 0
    public var slot: EQUIPSLOTINFO = EQUIPSLOTINFO()
    public var location: UInt32 = 0
    public var type: UInt8 = 0
    public var viewSprite: UInt16 = 0
    public var bindOnEquip: UInt16 = 0
    @FixedSizeArray(size: 5, initialValue: ItemOptions())
    public var option_data: [ItemOptions]
    public var refiningLevel: Int8 = 0
    public var grade: Int8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        count = try decoder.decode(Int16.self)
        ITID = try decoder.decode(UInt32.self)
        IsIdentified = try decoder.decode(Int8.self)
        IsDamaged = try decoder.decode(Int8.self)
        slot = try decoder.decode(EQUIPSLOTINFO.self)
        location = try decoder.decode(UInt32.self)
        type = try decoder.decode(UInt8.self)
        viewSprite = try decoder.decode(UInt16.self)
        bindOnEquip = try decoder.decode(UInt16.self)
        option_data = try decoder.decode([ItemOptions].self, count: 5)
        refiningLevel = try decoder.decode(Int8.self)
        grade = try decoder.decode(Int8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(count)
        try encoder.encode(ITID)
        try encoder.encode(IsIdentified)
        try encoder.encode(IsDamaged)
        try encoder.encode(slot)
        try encoder.encode(location)
        try encoder.encode(type)
        try encoder.encode(viewSprite)
        try encoder.encode(bindOnEquip)
        try encoder.encode(option_data)
        try encoder.encode(refiningLevel)
        try encoder.encode(grade)
    }
}

public struct PACKET_ZC_ACK_READ_RODEX: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        -1
    }
    public var packetType: Int16 = 0
    public var packetLength: Int16 = 0
    public var opentype: Int8 = 0
    public var MailID: Int64 = 0
    public var TextcontentsLength: Int16 = 0
    public var zeny: Int64 = 0
    public var ItemCnt: Int8 = 0
    public var Textcontent: String = ""
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        packetLength = try decoder.decode(Int16.self)
        opentype = try decoder.decode(Int8.self)
        MailID = try decoder.decode(Int64.self)
        TextcontentsLength = try decoder.decode(Int16.self)
        zeny = try decoder.decode(Int64.self)
        ItemCnt = try decoder.decode(Int8.self)
        Textcontent = try decoder.decode(String.self, lengthOfBytes: (Int(packetLength) - (2 + 2 + 1 + 8 + 2 + 8 + 1)))
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(packetLength)
        try encoder.encode(opentype)
        try encoder.encode(MailID)
        try encoder.encode(TextcontentsLength)
        try encoder.encode(zeny)
        try encoder.encode(ItemCnt)
        try encoder.encode(Textcontent)
    }
}

public struct PACKET_CZ_REQ_DELETE_MAIL: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 1 + 8)
    }
    public var packetType: Int16 = 0
    public var opentype: Int8 = 0
    public var MailID: Int64 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        opentype = try decoder.decode(Int8.self)
        MailID = try decoder.decode(Int64.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(opentype)
        try encoder.encode(MailID)
    }
}

public struct PACKET_ZC_ACK_DELETE_MAIL: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 1 + 8)
    }
    public var packetType: Int16 = 0
    public var opentype: Int8 = 0
    public var MailID: Int64 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        opentype = try decoder.decode(Int8.self)
        MailID = try decoder.decode(Int64.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(opentype)
        try encoder.encode(MailID)
    }
}

public struct PACKET_CZ_REQ_REFRESH_MAIL_LIST: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 8 + (1 * 16))
    }
    public var packetType: Int16 = 0
    public var Upper_MailID: Int64 = 0
    @FixedSizeArray(size: 16, initialValue: 0)
    public var unknown: [Int8]
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        Upper_MailID = try decoder.decode(Int64.self)
        unknown = try decoder.decode([Int8].self, count: 16)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(Upper_MailID)
        try encoder.encode(unknown)
    }
}

public struct PACKET_CZ_REQ_ZENY_FROM_MAIL: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 8 + 1)
    }
    public var packetType: Int16 = 0
    public var MailID: Int64 = 0
    public var opentype: Int8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        MailID = try decoder.decode(Int64.self)
        opentype = try decoder.decode(Int8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(MailID)
        try encoder.encode(opentype)
    }
}

public struct PACKET_ZC_ACK_ZENY_FROM_MAIL: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 8 + 1 + 1)
    }
    public var packetType: Int16 = 0
    public var MailID: Int64 = 0
    public var opentype: Int8 = 0
    public var result: Int8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        MailID = try decoder.decode(Int64.self)
        opentype = try decoder.decode(Int8.self)
        result = try decoder.decode(Int8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(MailID)
        try encoder.encode(opentype)
        try encoder.encode(result)
    }
}

public struct PACKET_CZ_REQ_ITEM_FROM_MAIL: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 8 + 1)
    }
    public var packetType: Int16 = 0
    public var MailID: Int64 = 0
    public var opentype: Int8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        MailID = try decoder.decode(Int64.self)
        opentype = try decoder.decode(Int8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(MailID)
        try encoder.encode(opentype)
    }
}

public struct PACKET_ZC_ACK_ITEM_FROM_MAIL: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 8 + 1 + 1)
    }
    public var packetType: Int16 = 0
    public var MailID: Int64 = 0
    public var opentype: Int8 = 0
    public var result: Int8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        MailID = try decoder.decode(Int64.self)
        opentype = try decoder.decode(Int8.self)
        result = try decoder.decode(Int8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(MailID)
        try encoder.encode(opentype)
        try encoder.encode(result)
    }
}

public struct PACKET_ZC_SKILL_SCALE: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 2 + 2 + 2 + 2 + 4)
    }
    public var packetType: Int16 = 0
    public var AID: UInt32 = 0
    public var skill_id: Int16 = 0
    public var skill_lv: Int16 = 0
    public var x: Int16 = 0
    public var y: Int16 = 0
    public var casttime: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        AID = try decoder.decode(UInt32.self)
        skill_id = try decoder.decode(Int16.self)
        skill_lv = try decoder.decode(Int16.self)
        x = try decoder.decode(Int16.self)
        y = try decoder.decode(Int16.self)
        casttime = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(AID)
        try encoder.encode(skill_id)
        try encoder.encode(skill_lv)
        try encoder.encode(x)
        try encoder.encode(y)
        try encoder.encode(casttime)
    }
}

public struct PACKET_ZC_ADD_MEMBER_TO_GROUP: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 4 + 4 + 2 + 2 + 2 + 2 + 1 + 24 + 24 + 16 + 1 + 1)
    }
    public var packetType: Int16 = 0
    public var AID: UInt32 = 0
    public var GID: UInt32 = 0
    public var leader: UInt32 = 0
    public var class_: Int16 = 0
    public var baseLevel: Int16 = 0
    public var x: Int16 = 0
    public var y: Int16 = 0
    public var offline: UInt8 = 0
    @FixedLengthString(lengthOfBytes: 24)
    public var partyName: String
    @FixedLengthString(lengthOfBytes: 24)
    public var playerName: String
    @FixedLengthString(lengthOfBytes: 16)
    public var mapName: String
    public var sharePickup: Int8 = 0
    public var shareLoot: Int8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        AID = try decoder.decode(UInt32.self)
        GID = try decoder.decode(UInt32.self)
        leader = try decoder.decode(UInt32.self)
        class_ = try decoder.decode(Int16.self)
        baseLevel = try decoder.decode(Int16.self)
        x = try decoder.decode(Int16.self)
        y = try decoder.decode(Int16.self)
        offline = try decoder.decode(UInt8.self)
        partyName = try decoder.decode(String.self, lengthOfBytes: 24)
        playerName = try decoder.decode(String.self, lengthOfBytes: 24)
        mapName = try decoder.decode(String.self, lengthOfBytes: 16)
        sharePickup = try decoder.decode(Int8.self)
        shareLoot = try decoder.decode(Int8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(AID)
        try encoder.encode(GID)
        try encoder.encode(leader)
        try encoder.encode(class_)
        try encoder.encode(baseLevel)
        try encoder.encode(x)
        try encoder.encode(y)
        try encoder.encode(offline)
        try encoder.encode(partyName, lengthOfBytes: 24)
        try encoder.encode(playerName, lengthOfBytes: 24)
        try encoder.encode(mapName, lengthOfBytes: 16)
        try encoder.encode(sharePickup)
        try encoder.encode(shareLoot)
    }
}

public struct PACKET_ZC_GROUP_LIST_SUB: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (4 + 4 + 24 + 16 + 1 + 1 + 2 + 2)
    }
    public var AID: UInt32 = 0
    public var GID: UInt32 = 0
    @FixedLengthString(lengthOfBytes: 24)
    public var playerName: String
    @FixedLengthString(lengthOfBytes: 16)
    public var mapName: String
    public var leader: UInt8 = 0
    public var offline: UInt8 = 0
    public var class_: Int16 = 0
    public var baseLevel: Int16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        AID = try decoder.decode(UInt32.self)
        GID = try decoder.decode(UInt32.self)
        playerName = try decoder.decode(String.self, lengthOfBytes: 24)
        mapName = try decoder.decode(String.self, lengthOfBytes: 16)
        leader = try decoder.decode(UInt8.self)
        offline = try decoder.decode(UInt8.self)
        class_ = try decoder.decode(Int16.self)
        baseLevel = try decoder.decode(Int16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(AID)
        try encoder.encode(GID)
        try encoder.encode(playerName, lengthOfBytes: 24)
        try encoder.encode(mapName, lengthOfBytes: 16)
        try encoder.encode(leader)
        try encoder.encode(offline)
        try encoder.encode(class_)
        try encoder.encode(baseLevel)
    }
}

public struct PACKET_ZC_GROUP_LIST: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        -1
    }
    public var packetType: Int16 = 0
    public var packetLength: Int16 = 0
    @FixedLengthString(lengthOfBytes: 24)
    public var partyName: String
    public var members: [PACKET_ZC_GROUP_LIST_SUB] = []
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        packetLength = try decoder.decode(Int16.self)
        partyName = try decoder.decode(String.self, lengthOfBytes: 24)
        members = try decoder.decode([PACKET_ZC_GROUP_LIST_SUB].self, count: (Int(packetLength) - (2 + 2 + 24)) / (4 + 4 + 24 + 16 + 1 + 1 + 2 + 2))
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(packetLength)
        try encoder.encode(partyName, lengthOfBytes: 24)
        try encoder.encode(members)
    }
}

public struct PACKET_ZC_CLANINFO: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2 + 4 + 24 + 24 + 16 + 1 + 1)
    }
    public var packetType: Int16 = 0
    public var packetLength: Int16 = 0
    public var ClanID: UInt32 = 0
    @FixedLengthString(lengthOfBytes: 24)
    public var ClanName: String
    @FixedLengthString(lengthOfBytes: 24)
    public var MasterName: String
    @FixedLengthString(lengthOfBytes: 16)
    public var Map: String
    public var AllyCount: UInt8 = 0
    public var AntagonistCount: UInt8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        packetLength = try decoder.decode(Int16.self)
        ClanID = try decoder.decode(UInt32.self)
        ClanName = try decoder.decode(String.self, lengthOfBytes: 24)
        MasterName = try decoder.decode(String.self, lengthOfBytes: 24)
        Map = try decoder.decode(String.self, lengthOfBytes: 16)
        AllyCount = try decoder.decode(UInt8.self)
        AntagonistCount = try decoder.decode(UInt8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(packetLength)
        try encoder.encode(ClanID)
        try encoder.encode(ClanName, lengthOfBytes: 24)
        try encoder.encode(MasterName, lengthOfBytes: 24)
        try encoder.encode(Map, lengthOfBytes: 16)
        try encoder.encode(AllyCount)
        try encoder.encode(AntagonistCount)
    }
}

public struct PACKET_ZC_NOTIFY_CLAN_CONNECTINFO: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2 + 2)
    }
    public var packetType: Int16 = 0
    public var NumConnect: Int16 = 0
    public var NumTotal: Int16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        NumConnect = try decoder.decode(Int16.self)
        NumTotal = try decoder.decode(Int16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(NumConnect)
        try encoder.encode(NumTotal)
    }
}

public struct PACKET_ZC_ACK_CLAN_LEAVE: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2)
    }
    public var packetType: Int16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
    }
}

public struct PACKET_ZC_NOTIFY_CLAN_CHAT: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        -1
    }
    public var packetType: Int16 = 0
    public var packetLength: Int16 = 0
    @FixedLengthString(lengthOfBytes: 24)
    public var MemberName: String
    public var Message: String = ""
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        packetLength = try decoder.decode(Int16.self)
        MemberName = try decoder.decode(String.self, lengthOfBytes: 24)
        Message = try decoder.decode(String.self, lengthOfBytes: (Int(packetLength) - (2 + 2 + 24)))
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(packetLength)
        try encoder.encode(MemberName, lengthOfBytes: 24)
        try encoder.encode(Message)
    }
}

public struct packet_quest_hunt_sub: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (4 + 4 + 4 + 4 + 2 + 2 + 2 + 24)
    }
    public var huntIdent: UInt32 = 0
    public var huntIdent2: UInt32 = 0
    public var mobType: UInt32 = 0
    public var mob_id: UInt32 = 0
    public var levelMin: Int16 = 0
    public var levelMax: Int16 = 0
    public var huntCount: Int16 = 0
    @FixedLengthString(lengthOfBytes: 24)
    public var mobName: String
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        huntIdent = try decoder.decode(UInt32.self)
        huntIdent2 = try decoder.decode(UInt32.self)
        mobType = try decoder.decode(UInt32.self)
        mob_id = try decoder.decode(UInt32.self)
        levelMin = try decoder.decode(Int16.self)
        levelMax = try decoder.decode(Int16.self)
        huntCount = try decoder.decode(Int16.self)
        mobName = try decoder.decode(String.self, lengthOfBytes: 24)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(huntIdent)
        try encoder.encode(huntIdent2)
        try encoder.encode(mobType)
        try encoder.encode(mob_id)
        try encoder.encode(levelMin)
        try encoder.encode(levelMax)
        try encoder.encode(huntCount)
        try encoder.encode(mobName, lengthOfBytes: 24)
    }
}

public struct packet_quest_add_header: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        -1
    }
    public var packetType: Int16 = 0
    public var questID: UInt32 = 0
    public var active: UInt8 = 0
    public var quest_svrTime: Int32 = 0
    public var quest_endTime: Int32 = 0
    public var count: Int16 = 0
    public var objectives: [packet_quest_hunt_sub] = []
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        questID = try decoder.decode(UInt32.self)
        active = try decoder.decode(UInt8.self)
        quest_svrTime = try decoder.decode(Int32.self)
        quest_endTime = try decoder.decode(Int32.self)
        count = try decoder.decode(Int16.self)
        objectives = try decoder.decode([packet_quest_hunt_sub].self, count: Int(count))
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(questID)
        try encoder.encode(active)
        try encoder.encode(quest_svrTime)
        try encoder.encode(quest_endTime)
        try encoder.encode(count)
        try encoder.encode(objectives)
    }
}

public struct packet_quest_update_hunt: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (4 + 4 + 4 + 2 + 2)
    }
    public var questID: UInt32 = 0
    public var huntIdent: UInt32 = 0
    public var huntIdent2: UInt32 = 0
    public var maxCount: Int16 = 0
    public var count: Int16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        questID = try decoder.decode(UInt32.self)
        huntIdent = try decoder.decode(UInt32.self)
        huntIdent2 = try decoder.decode(UInt32.self)
        maxCount = try decoder.decode(Int16.self)
        count = try decoder.decode(Int16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(questID)
        try encoder.encode(huntIdent)
        try encoder.encode(huntIdent2)
        try encoder.encode(maxCount)
        try encoder.encode(count)
    }
}

public struct packet_quest_update_header: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        -1
    }
    public var packetType: Int16 = 0
    public var packetLength: Int16 = 0
    public var count: Int16 = 0
    public var objectives: [packet_quest_update_hunt] = []
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        packetLength = try decoder.decode(Int16.self)
        count = try decoder.decode(Int16.self)
        objectives = try decoder.decode([packet_quest_update_hunt].self, count: (Int(packetLength) - (2 + 2 + 2)) / (4 + 4 + 4 + 2 + 2))
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(packetLength)
        try encoder.encode(count)
        try encoder.encode(objectives)
    }
}

public struct packet_quest_hunt_info_sub: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (4 + 4 + 2 + 2)
    }
    public var questID: UInt32 = 0
    public var mob_id: UInt32 = 0
    public var maxCount: Int16 = 0
    public var count: Int16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        questID = try decoder.decode(UInt32.self)
        mob_id = try decoder.decode(UInt32.self)
        maxCount = try decoder.decode(Int16.self)
        count = try decoder.decode(Int16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(questID)
        try encoder.encode(mob_id)
        try encoder.encode(maxCount)
        try encoder.encode(count)
    }
}

public struct packet_quest_hunt_info: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        -1
    }
    public var packetType: Int16 = 0
    public var packetLength: Int16 = 0
    public var info: [packet_quest_hunt_info_sub] = []
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        packetLength = try decoder.decode(Int16.self)
        info = try decoder.decode([packet_quest_hunt_info_sub].self, count: (Int(packetLength) - (2 + 2)) / (4 + 4 + 2 + 2))
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(packetLength)
        try encoder.encode(info)
    }
}

public struct PACKET_ZC_FORMATSTRING_MSG: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        -1
    }
    public var packetType: Int16 = 0
    public var packetLength: Int16 = 0
    public var MessageId: UInt16 = 0
    public var MessageString: String = ""
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        packetLength = try decoder.decode(Int16.self)
        MessageId = try decoder.decode(UInt16.self)
        MessageString = try decoder.decode(String.self, lengthOfBytes: (Int(packetLength) - (2 + 2 + 2)))
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(packetLength)
        try encoder.encode(MessageId)
        try encoder.encode(MessageString)
    }
}

public struct PACKET_ZC_FORMATSTRING_MSG_COLOR: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        -1
    }
    public var packetType: Int16 = 0
    public var packetLength: Int16 = 0
    public var messageId: UInt16 = 0
    public var color: UInt32 = 0
    public var messageString: String = ""
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        packetLength = try decoder.decode(Int16.self)
        messageId = try decoder.decode(UInt16.self)
        color = try decoder.decode(UInt32.self)
        messageString = try decoder.decode(String.self, lengthOfBytes: (Int(packetLength) - (2 + 2 + 2 + 4)))
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(packetLength)
        try encoder.encode(messageId)
        try encoder.encode(color)
        try encoder.encode(messageString)
    }
}

public struct PACKET_ZC_MSG_COLOR: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2 + 4)
    }
    public var packetType: Int16 = 0
    public var MessageId: UInt16 = 0
    public var MessageColor: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        MessageId = try decoder.decode(UInt16.self)
        MessageColor = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(MessageId)
        try encoder.encode(MessageColor)
    }
}

public struct PACKET_CZ_OPEN_UI: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 1)
    }
    public var packetType: Int16 = 0
    public var UIType: Int8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        UIType = try decoder.decode(Int8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(UIType)
    }
}

public struct PACKET_ZC_UI_OPEN: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 1 + 4)
    }
    public var packetType: Int16 = 0
    public var UIType: Int8 = 0
    public var data: Int32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        UIType = try decoder.decode(Int8.self)
        data = try decoder.decode(Int32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(UIType)
        try encoder.encode(data)
    }
}

public struct PACKET_ZC_UI_OPEN2: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 1 + 8)
    }
    public var packetType: Int16 = 0
    public var UIType: Int8 = 0
    public var data: Int64 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        UIType = try decoder.decode(Int8.self)
        data = try decoder.decode(Int64.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(UIType)
        try encoder.encode(data)
    }
}

public struct PACKET_ZC_UI_ACTION: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 4)
    }
    public var packetType: Int16 = 0
    public var UIType: Int32 = 0
    public var data: Int32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        UIType = try decoder.decode(Int32.self)
        data = try decoder.decode(Int32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(UIType)
        try encoder.encode(data)
    }
}

public struct PACKET_CZ_PRIVATE_AIRSHIP_REQUEST: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 16 + 4)
    }
    public var packetType: Int16 = 0
    @FixedLengthString(lengthOfBytes: 16)
    public var mapName: String
    public var ItemID: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        mapName = try decoder.decode(String.self, lengthOfBytes: 16)
        ItemID = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(mapName, lengthOfBytes: 16)
        try encoder.encode(ItemID)
    }
}

public struct PACKET_ZC_PRIVATE_AIRSHIP_RESPONSE: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4)
    }
    public var packetType: Int16 = 0
    public var flag: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        flag = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(flag)
    }
}

public struct PACKET_CZ_REQ_STYLE_CHANGE: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2 + 2 + 2 + 2 + 2 + 2)
    }
    public var packetType: Int16 = 0
    public var HeadPalette: Int16 = 0
    public var HeadStyle: Int16 = 0
    public var BodyPalette: Int16 = 0
    public var TopAccessory: Int16 = 0
    public var MidAccessory: Int16 = 0
    public var BottomAccessory: Int16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        HeadPalette = try decoder.decode(Int16.self)
        HeadStyle = try decoder.decode(Int16.self)
        BodyPalette = try decoder.decode(Int16.self)
        TopAccessory = try decoder.decode(Int16.self)
        MidAccessory = try decoder.decode(Int16.self)
        BottomAccessory = try decoder.decode(Int16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(HeadPalette)
        try encoder.encode(HeadStyle)
        try encoder.encode(BodyPalette)
        try encoder.encode(TopAccessory)
        try encoder.encode(MidAccessory)
        try encoder.encode(BottomAccessory)
    }
}

public struct PACKET_CZ_REQ_STYLE_CHANGE2: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2 + 2 + 2 + 2 + 2 + 2 + 2)
    }
    public var packetType: Int16 = 0
    public var HeadPalette: Int16 = 0
    public var HeadStyle: Int16 = 0
    public var BodyPalette: Int16 = 0
    public var TopAccessory: Int16 = 0
    public var MidAccessory: Int16 = 0
    public var BottomAccessory: Int16 = 0
    public var BodyStyle: Int16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        HeadPalette = try decoder.decode(Int16.self)
        HeadStyle = try decoder.decode(Int16.self)
        BodyPalette = try decoder.decode(Int16.self)
        TopAccessory = try decoder.decode(Int16.self)
        MidAccessory = try decoder.decode(Int16.self)
        BottomAccessory = try decoder.decode(Int16.self)
        BodyStyle = try decoder.decode(Int16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(HeadPalette)
        try encoder.encode(HeadStyle)
        try encoder.encode(BodyPalette)
        try encoder.encode(TopAccessory)
        try encoder.encode(MidAccessory)
        try encoder.encode(BottomAccessory)
        try encoder.encode(BodyStyle)
    }
}

public struct PACKET_ZC_STYLE_CHANGE_RES: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 1)
    }
    public var packetType: Int16 = 0
    public var flag: Int8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        flag = try decoder.decode(Int8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(flag)
    }
}

public struct PACKET_CZ_PET_EVOLUTION: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2 + 4)
    }
    public var packetType: Int16 = 0
    public var packetLength: Int16 = 0
    public var EvolvedPetEggID: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        packetLength = try decoder.decode(Int16.self)
        EvolvedPetEggID = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(packetLength)
        try encoder.encode(EvolvedPetEggID)
    }
}

public struct packet_ZC_REFUSE_LOGIN: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 20)
    }
    public var packetType: Int16 = 0
    public var error_code: UInt32 = 0
    @FixedLengthString(lengthOfBytes: 20)
    public var block_date: String
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        error_code = try decoder.decode(UInt32.self)
        block_date = try decoder.decode(String.self, lengthOfBytes: 20)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(error_code)
        try encoder.encode(block_date, lengthOfBytes: 20)
    }
}

public struct PACKET_ZC_NOTIFY_CHAT: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        -1
    }
    public var packetType: Int16 = 0
    public var packetLength: Int16 = 0
    public var GID: UInt32 = 0
    public var Message: String = ""
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        packetLength = try decoder.decode(Int16.self)
        GID = try decoder.decode(UInt32.self)
        Message = try decoder.decode(String.self, lengthOfBytes: (Int(packetLength) - (2 + 2 + 4)))
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(packetLength)
        try encoder.encode(GID)
        try encoder.encode(Message)
    }
}

public struct PACKET_ZC_NOTIFY_PLAYERCHAT: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        -1
    }
    public var packetType: Int16 = 0
    public var packetLength: Int16 = 0
    public var Message: String = ""
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        packetLength = try decoder.decode(Int16.self)
        Message = try decoder.decode(String.self, lengthOfBytes: (Int(packetLength) - (2 + 2)))
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(packetLength)
        try encoder.encode(Message)
    }
}

public struct PACKET_ZC_ITEM_ENTRY: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 4 + 1 + 2 + 2 + 2 + 1 + 1)
    }
    public var packetType: Int16 = 0
    public var AID: UInt32 = 0
    public var itemId: UInt32 = 0
    public var identify: UInt8 = 0
    public var x: UInt16 = 0
    public var y: UInt16 = 0
    public var amount: UInt16 = 0
    public var subX: UInt8 = 0
    public var subY: UInt8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        AID = try decoder.decode(UInt32.self)
        itemId = try decoder.decode(UInt32.self)
        identify = try decoder.decode(UInt8.self)
        x = try decoder.decode(UInt16.self)
        y = try decoder.decode(UInt16.self)
        amount = try decoder.decode(UInt16.self)
        subX = try decoder.decode(UInt8.self)
        subY = try decoder.decode(UInt8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(AID)
        try encoder.encode(itemId)
        try encoder.encode(identify)
        try encoder.encode(x)
        try encoder.encode(y)
        try encoder.encode(amount)
        try encoder.encode(subX)
        try encoder.encode(subY)
    }
}

public struct PACKET_ZC_ADD_ITEM_TO_STORE: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2 + 4 + 4 + 1 + 1 + 1 + ((4 * 4)) + ((2 + 2 + 1) * 5) + 1 + 1)
    }
    public var packetType: Int16 = 0
    public var index: Int16 = 0
    public var amount: Int32 = 0
    public var itemId: UInt32 = 0
    public var itemType: UInt8 = 0
    public var identified: UInt8 = 0
    public var damaged: UInt8 = 0
    public var slot: EQUIPSLOTINFO = EQUIPSLOTINFO()
    @FixedSizeArray(size: 5, initialValue: ItemOptions())
    public var option_data: [ItemOptions]
    public var refine: UInt8 = 0
    public var grade: UInt8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        index = try decoder.decode(Int16.self)
        amount = try decoder.decode(Int32.self)
        itemId = try decoder.decode(UInt32.self)
        itemType = try decoder.decode(UInt8.self)
        identified = try decoder.decode(UInt8.self)
        damaged = try decoder.decode(UInt8.self)
        slot = try decoder.decode(EQUIPSLOTINFO.self)
        option_data = try decoder.decode([ItemOptions].self, count: 5)
        refine = try decoder.decode(UInt8.self)
        grade = try decoder.decode(UInt8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(index)
        try encoder.encode(amount)
        try encoder.encode(itemId)
        try encoder.encode(itemType)
        try encoder.encode(identified)
        try encoder.encode(damaged)
        try encoder.encode(slot)
        try encoder.encode(option_data)
        try encoder.encode(refine)
        try encoder.encode(grade)
    }
}

public struct PACKET_ZC_MVP_GETTING_ITEM: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4)
    }
    public var packetType: Int16 = 0
    public var itemId: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        itemId = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(itemId)
    }
}

public struct PACKET_ZC_ACK_TOUSESKILL: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2 + 4 + 4 + 1 + 1)
    }
    public var packetType: Int16 = 0
    public var skillId: UInt16 = 0
    public var btype: Int32 = 0
    public var itemId: UInt32 = 0
    public var flag: UInt8 = 0
    public var cause: UInt8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        skillId = try decoder.decode(UInt16.self)
        btype = try decoder.decode(Int32.self)
        itemId = try decoder.decode(UInt32.self)
        flag = try decoder.decode(UInt8.self)
        cause = try decoder.decode(UInt8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(skillId)
        try encoder.encode(btype)
        try encoder.encode(itemId)
        try encoder.encode(flag)
        try encoder.encode(cause)
    }
}

public struct PACKET_ZC_ADD_ITEM_TO_CART: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2 + 4 + 4 + 1 + 1 + 1 + ((4 * 4)) + ((2 + 2 + 1) * 5) + 1 + 1)
    }
    public var packetType: Int16 = 0
    public var index: Int16 = 0
    public var amount: Int32 = 0
    public var itemId: UInt32 = 0
    public var itemType: UInt8 = 0
    public var identified: UInt8 = 0
    public var damaged: UInt8 = 0
    public var slot: EQUIPSLOTINFO = EQUIPSLOTINFO()
    @FixedSizeArray(size: 5, initialValue: ItemOptions())
    public var option_data: [ItemOptions]
    public var refine: UInt8 = 0
    public var grade: UInt8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        index = try decoder.decode(Int16.self)
        amount = try decoder.decode(Int32.self)
        itemId = try decoder.decode(UInt32.self)
        itemType = try decoder.decode(UInt8.self)
        identified = try decoder.decode(UInt8.self)
        damaged = try decoder.decode(UInt8.self)
        slot = try decoder.decode(EQUIPSLOTINFO.self)
        option_data = try decoder.decode([ItemOptions].self, count: 5)
        refine = try decoder.decode(UInt8.self)
        grade = try decoder.decode(UInt8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(index)
        try encoder.encode(amount)
        try encoder.encode(itemId)
        try encoder.encode(itemType)
        try encoder.encode(identified)
        try encoder.encode(damaged)
        try encoder.encode(slot)
        try encoder.encode(option_data)
        try encoder.encode(refine)
        try encoder.encode(grade)
    }
}

public struct PACKET_CZ_REQMAKINGITEM: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + (4 * 3))
    }
    public var packetType: Int16 = 0
    public var itemId: UInt32 = 0
    @FixedSizeArray(size: 3, initialValue: 0)
    public var material: [UInt32]
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        itemId = try decoder.decode(UInt32.self)
        material = try decoder.decode([UInt32].self, count: 3)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(itemId)
        try encoder.encode(material)
    }
}

public struct PACKET_ZC_ACK_REQMAKINGITEM: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2 + 4)
    }
    public var packetType: Int16 = 0
    public var result: Int16 = 0
    public var itemId: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        result = try decoder.decode(Int16.self)
        itemId = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(result)
        try encoder.encode(itemId)
    }
}

public struct PACKET_ZC_FEED_PET: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 1 + 4)
    }
    public var packetType: Int16 = 0
    public var result: UInt8 = 0
    public var itemId: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        result = try decoder.decode(UInt8.self)
        itemId = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(result)
        try encoder.encode(itemId)
    }
}

public struct PACKET_ZC_FEED_MER: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 1 + 4)
    }
    public var packetType: Int16 = 0
    public var result: UInt8 = 0
    public var itemId: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        result = try decoder.decode(UInt8.self)
        itemId = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(result)
        try encoder.encode(itemId)
    }
}

public struct PACKET_ZC_USE_ITEM_ACK: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2 + 4 + 4 + 2 + 1)
    }
    public var packetType: Int16 = 0
    public var index: Int16 = 0
    public var itemId: UInt32 = 0
    public var AID: UInt32 = 0
    public var amount: Int16 = 0
    public var result: UInt8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        index = try decoder.decode(Int16.self)
        itemId = try decoder.decode(UInt32.self)
        AID = try decoder.decode(UInt32.self)
        amount = try decoder.decode(Int16.self)
        result = try decoder.decode(UInt8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(index)
        try encoder.encode(itemId)
        try encoder.encode(AID)
        try encoder.encode(amount)
        try encoder.encode(result)
    }
}

public struct PACKET_ZC_SPRITE_CHANGE: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 1 + 4 + 4)
    }
    public var packetType: Int16 = 0
    public var AID: UInt32 = 0
    public var type: UInt8 = 0
    public var val: UInt32 = 0
    public var val2: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        AID = try decoder.decode(UInt32.self)
        type = try decoder.decode(UInt8.self)
        val = try decoder.decode(UInt32.self)
        val2 = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(AID)
        try encoder.encode(type)
        try encoder.encode(val)
        try encoder.encode(val2)
    }
}

public struct PACKET_ZC_ADD_EXCHANGE_ITEM: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 1 + 4 + 1 + 1 + ((4 * 4)) + ((2 + 2 + 1) * 5) + 4 + 2 + 1 + 1)
    }
    public var packetType: Int16 = 0
    public var itemId: UInt32 = 0
    public var itemType: UInt8 = 0
    public var amount: Int32 = 0
    public var identified: UInt8 = 0
    public var damaged: UInt8 = 0
    public var slot: EQUIPSLOTINFO = EQUIPSLOTINFO()
    @FixedSizeArray(size: 5, initialValue: ItemOptions())
    public var option_data: [ItemOptions]
    public var location: UInt32 = 0
    public var look: UInt16 = 0
    public var refine: UInt8 = 0
    public var grade: UInt8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        itemId = try decoder.decode(UInt32.self)
        itemType = try decoder.decode(UInt8.self)
        amount = try decoder.decode(Int32.self)
        identified = try decoder.decode(UInt8.self)
        damaged = try decoder.decode(UInt8.self)
        slot = try decoder.decode(EQUIPSLOTINFO.self)
        option_data = try decoder.decode([ItemOptions].self, count: 5)
        location = try decoder.decode(UInt32.self)
        look = try decoder.decode(UInt16.self)
        refine = try decoder.decode(UInt8.self)
        grade = try decoder.decode(UInt8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(itemId)
        try encoder.encode(itemType)
        try encoder.encode(amount)
        try encoder.encode(identified)
        try encoder.encode(damaged)
        try encoder.encode(slot)
        try encoder.encode(option_data)
        try encoder.encode(location)
        try encoder.encode(look)
        try encoder.encode(refine)
        try encoder.encode(grade)
    }
}

public struct PACKET_ZC_CASH_TIME_COUNTER: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 4)
    }
    public var packetType: Int16 = 0
    public var itemId: UInt32 = 0
    public var seconds: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        itemId = try decoder.decode(UInt32.self)
        seconds = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(itemId)
        try encoder.encode(seconds)
    }
}

public struct PACKET_ZC_CASH_ITEM_DELETE: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2 + 4)
    }
    public var packetType: Int16 = 0
    public var index: UInt16 = 0
    public var itemId: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        index = try decoder.decode(UInt16.self)
        itemId = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(index)
        try encoder.encode(itemId)
    }
}

public struct PACKET_ZC_ITEM_PICKUP_PARTY: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 4 + 1 + 1 + ((4 * 4)) + 2 + 1 + 1 + 1)
    }
    public var packetType: Int16 = 0
    public var AID: UInt32 = 0
    public var itemId: UInt32 = 0
    public var identified: UInt8 = 0
    public var damaged: UInt8 = 0
    public var slot: EQUIPSLOTINFO = EQUIPSLOTINFO()
    public var location: UInt16 = 0
    public var itemType: UInt8 = 0
    public var refine: UInt8 = 0
    public var grade: UInt8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        AID = try decoder.decode(UInt32.self)
        itemId = try decoder.decode(UInt32.self)
        identified = try decoder.decode(UInt8.self)
        damaged = try decoder.decode(UInt8.self)
        slot = try decoder.decode(EQUIPSLOTINFO.self)
        location = try decoder.decode(UInt16.self)
        itemType = try decoder.decode(UInt8.self)
        refine = try decoder.decode(UInt8.self)
        grade = try decoder.decode(UInt8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(AID)
        try encoder.encode(itemId)
        try encoder.encode(identified)
        try encoder.encode(damaged)
        try encoder.encode(slot)
        try encoder.encode(location)
        try encoder.encode(itemType)
        try encoder.encode(refine)
        try encoder.encode(grade)
    }
}

public struct PACKET_ZC_UPDATE_ITEM_FROM_BUYING_STORE: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 2 + 4 + 4 + 4 + 4)
    }
    public var packetType: Int16 = 0
    public var itemId: UInt32 = 0
    public var amount: UInt16 = 0
    public var zeny: UInt32 = 0
    public var zenyLimit: UInt32 = 0
    public var charId: UInt32 = 0
    public var updateTime: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        itemId = try decoder.decode(UInt32.self)
        amount = try decoder.decode(UInt16.self)
        zeny = try decoder.decode(UInt32.self)
        zenyLimit = try decoder.decode(UInt32.self)
        charId = try decoder.decode(UInt32.self)
        updateTime = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(itemId)
        try encoder.encode(amount)
        try encoder.encode(zeny)
        try encoder.encode(zenyLimit)
        try encoder.encode(charId)
        try encoder.encode(updateTime)
    }
}

public struct PACKET_ZC_ACK_WEAPONREFINE: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 4)
    }
    public var packetType: Int16 = 0
    public var result: Int32 = 0
    public var itemId: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        result = try decoder.decode(Int32.self)
        itemId = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(result)
        try encoder.encode(itemId)
    }
}

public struct PACKET_ZC_PROPERTY_HOMUN: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 24 + 1 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 4 + 4 + 4 + 4 + 8 + 8 + 2 + 2)
    }
    public var packetType: Int16 = 0
    @FixedLengthString(lengthOfBytes: 24)
    public var name: String
    public var flags: UInt8 = 0
    public var level: UInt16 = 0
    public var hunger: UInt16 = 0
    public var intimacy: UInt16 = 0
    public var atk2: UInt16 = 0
    public var matk: UInt16 = 0
    public var hit: UInt16 = 0
    public var crit: UInt16 = 0
    public var def: UInt16 = 0
    public var mdef: UInt16 = 0
    public var flee: UInt16 = 0
    public var amotion: UInt16 = 0
    public var hp: UInt32 = 0
    public var maxHp: UInt32 = 0
    public var sp: UInt32 = 0
    public var maxSp: UInt32 = 0
    public var exp: Int64 = 0
    public var expNext: Int64 = 0
    public var skillPoints: UInt16 = 0
    public var range: UInt16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        name = try decoder.decode(String.self, lengthOfBytes: 24)
        flags = try decoder.decode(UInt8.self)
        level = try decoder.decode(UInt16.self)
        hunger = try decoder.decode(UInt16.self)
        intimacy = try decoder.decode(UInt16.self)
        atk2 = try decoder.decode(UInt16.self)
        matk = try decoder.decode(UInt16.self)
        hit = try decoder.decode(UInt16.self)
        crit = try decoder.decode(UInt16.self)
        def = try decoder.decode(UInt16.self)
        mdef = try decoder.decode(UInt16.self)
        flee = try decoder.decode(UInt16.self)
        amotion = try decoder.decode(UInt16.self)
        hp = try decoder.decode(UInt32.self)
        maxHp = try decoder.decode(UInt32.self)
        sp = try decoder.decode(UInt32.self)
        maxSp = try decoder.decode(UInt32.self)
        exp = try decoder.decode(Int64.self)
        expNext = try decoder.decode(Int64.self)
        skillPoints = try decoder.decode(UInt16.self)
        range = try decoder.decode(UInt16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(name, lengthOfBytes: 24)
        try encoder.encode(flags)
        try encoder.encode(level)
        try encoder.encode(hunger)
        try encoder.encode(intimacy)
        try encoder.encode(atk2)
        try encoder.encode(matk)
        try encoder.encode(hit)
        try encoder.encode(crit)
        try encoder.encode(def)
        try encoder.encode(mdef)
        try encoder.encode(flee)
        try encoder.encode(amotion)
        try encoder.encode(hp)
        try encoder.encode(maxHp)
        try encoder.encode(sp)
        try encoder.encode(maxSp)
        try encoder.encode(exp)
        try encoder.encode(expNext)
        try encoder.encode(skillPoints)
        try encoder.encode(range)
    }
}

public struct PACKET_ZC_FAILED_TRADE_BUYING_STORE_TO_SELLER: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2 + 4)
    }
    public var packetType: Int16 = 0
    public var result: UInt16 = 0
    public var itemId: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        result = try decoder.decode(UInt16.self)
        itemId = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(result)
        try encoder.encode(itemId)
    }
}

public struct PACKET_CZ_REQ_ITEMREPAIR2: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + (2 + 4 + ((4 * 4)) + 1 + 1))
    }
    public var packetType: Int16 = 0
    public var item: REPAIRITEM_INFO2 = REPAIRITEM_INFO2()
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        item = try decoder.decode(REPAIRITEM_INFO2.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(item)
    }
}

public struct PACKET_CZ_REQ_ITEMREPAIR1: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + (2 + 4 + 1 + ((4 * 4))))
    }
    public var packetType: Int16 = 0
    public var item: REPAIRITEM_INFO1 = REPAIRITEM_INFO1()
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        item = try decoder.decode(REPAIRITEM_INFO1.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(item)
    }
}

public struct PACKET_CZ_REQ_MAKINGITEM: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2 + 4)
    }
    public var packetType: Int16 = 0
    public var type: Int16 = 0
    public var itemId: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        type = try decoder.decode(Int16.self)
        itemId = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(type)
        try encoder.encode(itemId)
    }
}

public struct PACKET_CZ_SSILIST_ITEM_CLICK: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 4 + 4)
    }
    public var packetType: Int16 = 0
    public var AID: UInt32 = 0
    public var storeId: UInt32 = 0
    public var itemId: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        AID = try decoder.decode(UInt32.self)
        storeId = try decoder.decode(UInt32.self)
        itemId = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(AID)
        try encoder.encode(storeId)
        try encoder.encode(itemId)
    }
}

public struct PACKET_ZC_ACK_SCHEDULER_CASHITEM_sub: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (4 + 4)
    }
    public var itemId: UInt32 = 0
    public var price: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        itemId = try decoder.decode(UInt32.self)
        price = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(itemId)
        try encoder.encode(price)
    }
}

public struct PACKET_ZC_ACK_SCHEDULER_CASHITEM: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        -1
    }
    public var packetType: Int16 = 0
    public var packetLength: Int16 = 0
    public var count: Int16 = 0
    public var tabNum: Int16 = 0
    public var items: [PACKET_ZC_ACK_SCHEDULER_CASHITEM_sub] = []
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        packetLength = try decoder.decode(Int16.self)
        count = try decoder.decode(Int16.self)
        tabNum = try decoder.decode(Int16.self)
        items = try decoder.decode([PACKET_ZC_ACK_SCHEDULER_CASHITEM_sub].self, count: (Int(packetLength) - (2 + 2 + 2 + 2)) / (4 + 4))
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(packetLength)
        try encoder.encode(count)
        try encoder.encode(tabNum)
        try encoder.encode(items)
    }
}

public struct PACKET_ZC_PC_PURCHASE_MYITEMLIST_sub: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (4 + 2 + 2 + 1 + 4 + 1 + 1 + ((4 * 4)) + ((2 + 2 + 1) * 5) + 1 + 1)
    }
    public var price: UInt32 = 0
    public var index: Int16 = 0
    public var amount: Int16 = 0
    public var itemType: UInt8 = 0
    public var itemId: UInt32 = 0
    public var identified: UInt8 = 0
    public var damaged: UInt8 = 0
    public var slot: EQUIPSLOTINFO = EQUIPSLOTINFO()
    @FixedSizeArray(size: 5, initialValue: ItemOptions())
    public var option_data: [ItemOptions]
    public var refine: UInt8 = 0
    public var grade: UInt8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        price = try decoder.decode(UInt32.self)
        index = try decoder.decode(Int16.self)
        amount = try decoder.decode(Int16.self)
        itemType = try decoder.decode(UInt8.self)
        itemId = try decoder.decode(UInt32.self)
        identified = try decoder.decode(UInt8.self)
        damaged = try decoder.decode(UInt8.self)
        slot = try decoder.decode(EQUIPSLOTINFO.self)
        option_data = try decoder.decode([ItemOptions].self, count: 5)
        refine = try decoder.decode(UInt8.self)
        grade = try decoder.decode(UInt8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(price)
        try encoder.encode(index)
        try encoder.encode(amount)
        try encoder.encode(itemType)
        try encoder.encode(itemId)
        try encoder.encode(identified)
        try encoder.encode(damaged)
        try encoder.encode(slot)
        try encoder.encode(option_data)
        try encoder.encode(refine)
        try encoder.encode(grade)
    }
}

public struct PACKET_ZC_PC_PURCHASE_MYITEMLIST: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        -1
    }
    public var packetType: Int16 = 0
    public var packetLength: Int16 = 0
    public var AID: UInt32 = 0
    public var items: [PACKET_ZC_PC_PURCHASE_MYITEMLIST_sub] = []
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        packetLength = try decoder.decode(Int16.self)
        AID = try decoder.decode(UInt32.self)
        items = try decoder.decode([PACKET_ZC_PC_PURCHASE_MYITEMLIST_sub].self, count: (Int(packetLength) - (2 + 2 + 4)) / (4 + 2 + 2 + 1 + 4 + 1 + 1 + ((4 * 4)) + ((2 + 2 + 1) * 5) + 1 + 1))
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(packetLength)
        try encoder.encode(AID)
        try encoder.encode(items)
    }
}

public struct PACKET_ZC_PC_PURCHASE_ITEMLIST_sub: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (4 + 4 + 4 + 1 + 2 + 4)
    }
    public var itemId: UInt32 = 0
    public var price: UInt32 = 0
    public var discountPrice: UInt32 = 0
    public var itemType: UInt8 = 0
    public var viewSprite: UInt16 = 0
    public var location: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        itemId = try decoder.decode(UInt32.self)
        price = try decoder.decode(UInt32.self)
        discountPrice = try decoder.decode(UInt32.self)
        itemType = try decoder.decode(UInt8.self)
        viewSprite = try decoder.decode(UInt16.self)
        location = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(itemId)
        try encoder.encode(price)
        try encoder.encode(discountPrice)
        try encoder.encode(itemType)
        try encoder.encode(viewSprite)
        try encoder.encode(location)
    }
}

public struct PACKET_ZC_PC_PURCHASE_ITEMLIST: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        -1
    }
    public var packetType: Int16 = 0
    public var packetLength: Int16 = 0
    public var items: [PACKET_ZC_PC_PURCHASE_ITEMLIST_sub] = []
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        packetLength = try decoder.decode(Int16.self)
        items = try decoder.decode([PACKET_ZC_PC_PURCHASE_ITEMLIST_sub].self, count: (Int(packetLength) - (2 + 2)) / (4 + 4 + 4 + 1 + 2 + 4))
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(packetLength)
        try encoder.encode(items)
    }
}

public struct PACKET_CZ_PC_PURCHASE_ITEMLIST_sub: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4)
    }
    public var amount: UInt16 = 0
    public var itemId: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        amount = try decoder.decode(UInt16.self)
        itemId = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(amount)
        try encoder.encode(itemId)
    }
}

public struct PACKET_CZ_PC_PURCHASE_ITEMLIST: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        -1
    }
    public var packetType: Int16 = 0
    public var packetLength: Int16 = 0
    public var items: [PACKET_CZ_PC_PURCHASE_ITEMLIST_sub] = []
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        packetLength = try decoder.decode(Int16.self)
        items = try decoder.decode([PACKET_CZ_PC_PURCHASE_ITEMLIST_sub].self, count: (Int(packetLength) - (2 + 2)) / (2 + 4))
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(packetLength)
        try encoder.encode(items)
    }
}

public struct PACKET_CZ_REQ_OPEN_BUYING_STORE_sub: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (4 + 2 + 4)
    }
    public var itemId: UInt32 = 0
    public var amount: UInt16 = 0
    public var price: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        itemId = try decoder.decode(UInt32.self)
        amount = try decoder.decode(UInt16.self)
        price = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(itemId)
        try encoder.encode(amount)
        try encoder.encode(price)
    }
}

public struct PACKET_CZ_REQ_OPEN_BUYING_STORE: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        -1
    }
    public var packetType: Int16 = 0
    public var packetLength: Int16 = 0
    public var zenyLimit: UInt32 = 0
    public var result: UInt8 = 0
    @FixedLengthString(lengthOfBytes: 80)
    public var storeName: String
    public var items: [PACKET_CZ_REQ_OPEN_BUYING_STORE_sub] = []
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        packetLength = try decoder.decode(Int16.self)
        zenyLimit = try decoder.decode(UInt32.self)
        result = try decoder.decode(UInt8.self)
        storeName = try decoder.decode(String.self, lengthOfBytes: 80)
        items = try decoder.decode([PACKET_CZ_REQ_OPEN_BUYING_STORE_sub].self, count: (Int(packetLength) - (2 + 2 + 4 + 1 + 80)) / (4 + 2 + 4))
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(packetLength)
        try encoder.encode(zenyLimit)
        try encoder.encode(result)
        try encoder.encode(storeName, lengthOfBytes: 80)
        try encoder.encode(items)
    }
}

public struct PACKET_ZC_MYITEMLIST_BUYING_STORE_sub: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (4 + 2 + 1 + 4)
    }
    public var price: UInt32 = 0
    public var amount: UInt16 = 0
    public var itemType: UInt8 = 0
    public var itemId: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        price = try decoder.decode(UInt32.self)
        amount = try decoder.decode(UInt16.self)
        itemType = try decoder.decode(UInt8.self)
        itemId = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(price)
        try encoder.encode(amount)
        try encoder.encode(itemType)
        try encoder.encode(itemId)
    }
}

public struct PACKET_ZC_MYITEMLIST_BUYING_STORE: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        -1
    }
    public var packetType: Int16 = 0
    public var packetLength: Int16 = 0
    public var AID: UInt32 = 0
    public var zenyLimit: UInt32 = 0
    public var items: [PACKET_ZC_MYITEMLIST_BUYING_STORE_sub] = []
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        packetLength = try decoder.decode(Int16.self)
        AID = try decoder.decode(UInt32.self)
        zenyLimit = try decoder.decode(UInt32.self)
        items = try decoder.decode([PACKET_ZC_MYITEMLIST_BUYING_STORE_sub].self, count: (Int(packetLength) - (2 + 2 + 4 + 4)) / (4 + 2 + 1 + 4))
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(packetLength)
        try encoder.encode(AID)
        try encoder.encode(zenyLimit)
        try encoder.encode(items)
    }
}

public struct PACKET_ZC_PC_PURCHASE_ITEMLIST_FROMMC_sub: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (4 + 2 + 2 + 1 + 4 + 1 + 1 + ((4 * 4)) + ((2 + 2 + 1) * 5) + 4 + 2 + 1 + 1)
    }
    public var price: UInt32 = 0
    public var amount: UInt16 = 0
    public var index: Int16 = 0
    public var itemType: UInt8 = 0
    public var itemId: UInt32 = 0
    public var identified: UInt8 = 0
    public var damaged: UInt8 = 0
    public var slot: EQUIPSLOTINFO = EQUIPSLOTINFO()
    @FixedSizeArray(size: 5, initialValue: ItemOptions())
    public var option_data: [ItemOptions]
    public var location: UInt32 = 0
    public var viewSprite: UInt16 = 0
    public var refine: UInt8 = 0
    public var grade: UInt8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        price = try decoder.decode(UInt32.self)
        amount = try decoder.decode(UInt16.self)
        index = try decoder.decode(Int16.self)
        itemType = try decoder.decode(UInt8.self)
        itemId = try decoder.decode(UInt32.self)
        identified = try decoder.decode(UInt8.self)
        damaged = try decoder.decode(UInt8.self)
        slot = try decoder.decode(EQUIPSLOTINFO.self)
        option_data = try decoder.decode([ItemOptions].self, count: 5)
        location = try decoder.decode(UInt32.self)
        viewSprite = try decoder.decode(UInt16.self)
        refine = try decoder.decode(UInt8.self)
        grade = try decoder.decode(UInt8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(price)
        try encoder.encode(amount)
        try encoder.encode(index)
        try encoder.encode(itemType)
        try encoder.encode(itemId)
        try encoder.encode(identified)
        try encoder.encode(damaged)
        try encoder.encode(slot)
        try encoder.encode(option_data)
        try encoder.encode(location)
        try encoder.encode(viewSprite)
        try encoder.encode(refine)
        try encoder.encode(grade)
    }
}

public struct PACKET_ZC_PC_PURCHASE_ITEMLIST_FROMMC: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        -1
    }
    public var packetType: Int16 = 0
    public var packetLength: Int16 = 0
    public var AID: UInt32 = 0
    public var venderId: UInt32 = 0
    public var items: [PACKET_ZC_PC_PURCHASE_ITEMLIST_FROMMC_sub] = []
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        packetLength = try decoder.decode(Int16.self)
        AID = try decoder.decode(UInt32.self)
        venderId = try decoder.decode(UInt32.self)
        items = try decoder.decode([PACKET_ZC_PC_PURCHASE_ITEMLIST_FROMMC_sub].self, count: (Int(packetLength) - (2 + 2 + 4 + 4)) / (4 + 2 + 2 + 1 + 4 + 1 + 1 + ((4 * 4)) + ((2 + 2 + 1) * 5) + 4 + 2 + 1 + 1))
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(packetLength)
        try encoder.encode(AID)
        try encoder.encode(venderId)
        try encoder.encode(items)
    }
}

public struct PACKET_ZC_ACK_ITEMLIST_BUYING_STORE_sub: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (4 + 2 + 1 + 4)
    }
    public var price: UInt32 = 0
    public var amount: UInt16 = 0
    public var itemType: UInt8 = 0
    public var itemId: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        price = try decoder.decode(UInt32.self)
        amount = try decoder.decode(UInt16.self)
        itemType = try decoder.decode(UInt8.self)
        itemId = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(price)
        try encoder.encode(amount)
        try encoder.encode(itemType)
        try encoder.encode(itemId)
    }
}

public struct PACKET_ZC_ACK_ITEMLIST_BUYING_STORE: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        -1
    }
    public var packetType: Int16 = 0
    public var packetLength: Int16 = 0
    public var AID: UInt32 = 0
    public var storeId: UInt32 = 0
    public var zenyLimit: UInt32 = 0
    public var items: [PACKET_ZC_ACK_ITEMLIST_BUYING_STORE_sub] = []
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        packetLength = try decoder.decode(Int16.self)
        AID = try decoder.decode(UInt32.self)
        storeId = try decoder.decode(UInt32.self)
        zenyLimit = try decoder.decode(UInt32.self)
        items = try decoder.decode([PACKET_ZC_ACK_ITEMLIST_BUYING_STORE_sub].self, count: (Int(packetLength) - (2 + 2 + 4 + 4 + 4)) / (4 + 2 + 1 + 4))
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(packetLength)
        try encoder.encode(AID)
        try encoder.encode(storeId)
        try encoder.encode(zenyLimit)
        try encoder.encode(items)
    }
}

public struct PACKET_CZ_REQ_TRADE_BUYING_STORE_sub: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 2)
    }
    public var index: Int16 = 0
    public var itemId: UInt32 = 0
    public var amount: UInt16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        index = try decoder.decode(Int16.self)
        itemId = try decoder.decode(UInt32.self)
        amount = try decoder.decode(UInt16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(index)
        try encoder.encode(itemId)
        try encoder.encode(amount)
    }
}

public struct PACKET_CZ_REQ_TRADE_BUYING_STORE: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        -1
    }
    public var packetType: Int16 = 0
    public var packetLength: Int16 = 0
    public var AID: UInt32 = 0
    public var storeId: UInt32 = 0
    public var items: [PACKET_CZ_REQ_TRADE_BUYING_STORE_sub] = []
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        packetLength = try decoder.decode(Int16.self)
        AID = try decoder.decode(UInt32.self)
        storeId = try decoder.decode(UInt32.self)
        items = try decoder.decode([PACKET_CZ_REQ_TRADE_BUYING_STORE_sub].self, count: (Int(packetLength) - (2 + 2 + 4 + 4)) / (2 + 4 + 2))
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(packetLength)
        try encoder.encode(AID)
        try encoder.encode(storeId)
        try encoder.encode(items)
    }
}

public struct PACKET_ZC_MAKABLEITEMLIST_sub: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (4 + (4 * 3))
    }
    public var itemId: UInt32 = 0
    @FixedSizeArray(size: 3, initialValue: 0)
    public var material: [UInt32]
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        itemId = try decoder.decode(UInt32.self)
        material = try decoder.decode([UInt32].self, count: 3)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(itemId)
        try encoder.encode(material)
    }
}

public struct PACKET_ZC_MAKABLEITEMLIST: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        -1
    }
    public var packetType: Int16 = 0
    public var packetLength: Int16 = 0
    public var items: [PACKET_ZC_MAKABLEITEMLIST_sub] = []
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        packetLength = try decoder.decode(Int16.self)
        items = try decoder.decode([PACKET_ZC_MAKABLEITEMLIST_sub].self, count: (Int(packetLength) - (2 + 2)) / (4 + (4 * 3)))
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(packetLength)
        try encoder.encode(items)
    }
}

public struct PACKET_ZC_MAKINGARROW_LIST_sub: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (4)
    }
    public var itemId: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        itemId = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(itemId)
    }
}

public struct PACKET_ZC_MAKINGARROW_LIST: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        -1
    }
    public var packetType: Int16 = 0
    public var packetLength: Int16 = 0
    public var items: [PACKET_ZC_MAKINGARROW_LIST_sub] = []
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        packetLength = try decoder.decode(Int16.self)
        items = try decoder.decode([PACKET_ZC_MAKINGARROW_LIST_sub].self, count: (Int(packetLength) - (2 + 2)) / (4))
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(packetLength)
        try encoder.encode(items)
    }
}

public struct PACKET_ZC_SKILL_SELECT_REQUEST: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        -1
    }
    public var packetType: Int16 = 0
    public var packetLength: Int16 = 0
    public var flag: Int32 = 0
    public var skillIds: [Int16] = []
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        packetLength = try decoder.decode(Int16.self)
        flag = try decoder.decode(Int32.self)
        skillIds = try decoder.decode([Int16].self, count: (Int(packetLength) - (2 + 2 + 4)) / 2)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(packetLength)
        try encoder.encode(flag)
        try encoder.encode(skillIds)
    }
}

public struct PACKET_CZ_SKILL_SELECT_RESPONSE: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 2)
    }
    public var packetType: Int16 = 0
    public var flag: Int32 = 0
    public var selectedSkillId: Int16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        flag = try decoder.decode(Int32.self)
        selectedSkillId = try decoder.decode(Int16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(flag)
        try encoder.encode(selectedSkillId)
    }
}

public struct PACKET_ZC_REPAIRITEMLIST: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        -1
    }
    public var packetType: Int16 = 0
    public var packetLength: Int16 = 0
    public var items: [REPAIRITEM_INFO2] = []
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        packetLength = try decoder.decode(Int16.self)
        items = try decoder.decode([REPAIRITEM_INFO2].self, count: (Int(packetLength) - (2 + 2)) / (2 + 4 + ((4 * 4)) + 1 + 1))
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(packetLength)
        try encoder.encode(items)
    }
}

public struct PACKET_ZC_NOTIFY_WEAPONITEMLIST_sub: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 1 + ((4 * 4)))
    }
    public var index: Int16 = 0
    public var itemId: UInt32 = 0
    public var refine: UInt8 = 0
    public var slot: EQUIPSLOTINFO = EQUIPSLOTINFO()
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        index = try decoder.decode(Int16.self)
        itemId = try decoder.decode(UInt32.self)
        refine = try decoder.decode(UInt8.self)
        slot = try decoder.decode(EQUIPSLOTINFO.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(index)
        try encoder.encode(itemId)
        try encoder.encode(refine)
        try encoder.encode(slot)
    }
}

public struct PACKET_ZC_NOTIFY_WEAPONITEMLIST: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        -1
    }
    public var packetType: Int16 = 0
    public var packetLength: Int16 = 0
    public var items: [PACKET_ZC_NOTIFY_WEAPONITEMLIST_sub] = []
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        packetLength = try decoder.decode(Int16.self)
        items = try decoder.decode([PACKET_ZC_NOTIFY_WEAPONITEMLIST_sub].self, count: (Int(packetLength) - (2 + 2)) / (2 + 4 + 1 + ((4 * 4))))
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(packetLength)
        try encoder.encode(items)
    }
}

public struct PACKET_ZC_MAKINGITEM_LIST_sub: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (4)
    }
    public var itemId: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        itemId = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(itemId)
    }
}

public struct PACKET_ZC_MAKINGITEM_LIST: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        -1
    }
    public var packetType: Int16 = 0
    public var packetLength: Int16 = 0
    public var makeItem: UInt16 = 0
    public var items: [PACKET_ZC_MAKINGITEM_LIST_sub] = []
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        packetLength = try decoder.decode(Int16.self)
        makeItem = try decoder.decode(UInt16.self)
        items = try decoder.decode([PACKET_ZC_MAKINGITEM_LIST_sub].self, count: (Int(packetLength) - (2 + 2 + 2)) / (4))
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(packetLength)
        try encoder.encode(makeItem)
        try encoder.encode(items)
    }
}

public struct PACKET_ZC_PC_CASH_POINT_ITEMLIST_sub: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (4 + 4 + 1 + 4)
    }
    public var price: UInt32 = 0
    public var discountPrice: UInt32 = 0
    public var itemType: UInt8 = 0
    public var itemId: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        price = try decoder.decode(UInt32.self)
        discountPrice = try decoder.decode(UInt32.self)
        itemType = try decoder.decode(UInt8.self)
        itemId = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(price)
        try encoder.encode(discountPrice)
        try encoder.encode(itemType)
        try encoder.encode(itemId)
    }
}

public struct PACKET_ZC_PC_CASH_POINT_ITEMLIST: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        -1
    }
    public var packetType: Int16 = 0
    public var packetLength: Int16 = 0
    public var cashPoints: UInt32 = 0
    public var kafraPoints: UInt32 = 0
    public var items: [PACKET_ZC_PC_CASH_POINT_ITEMLIST_sub] = []
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        packetLength = try decoder.decode(Int16.self)
        cashPoints = try decoder.decode(UInt32.self)
        kafraPoints = try decoder.decode(UInt32.self)
        items = try decoder.decode([PACKET_ZC_PC_CASH_POINT_ITEMLIST_sub].self, count: (Int(packetLength) - (2 + 2 + 4 + 4)) / (4 + 4 + 1 + 4))
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(packetLength)
        try encoder.encode(cashPoints)
        try encoder.encode(kafraPoints)
        try encoder.encode(items)
    }
}

public struct PACKET_CZ_PC_BUY_CASH_POINT_ITEM_sub: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4)
    }
    public var amount: UInt16 = 0
    public var itemId: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        amount = try decoder.decode(UInt16.self)
        itemId = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(amount)
        try encoder.encode(itemId)
    }
}

public struct PACKET_CZ_PC_BUY_CASH_POINT_ITEM: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        -1
    }
    public var packetType: Int16 = 0
    public var packetLength: Int16 = 0
    public var kafraPoints: UInt32 = 0
    public var count: UInt16 = 0
    public var items: [PACKET_CZ_PC_BUY_CASH_POINT_ITEM_sub] = []
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        packetLength = try decoder.decode(Int16.self)
        kafraPoints = try decoder.decode(UInt32.self)
        count = try decoder.decode(UInt16.self)
        items = try decoder.decode([PACKET_CZ_PC_BUY_CASH_POINT_ITEM_sub].self, count: (Int(packetLength) - (2 + 2 + 4 + 2)) / (2 + 4))
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(packetLength)
        try encoder.encode(kafraPoints)
        try encoder.encode(count)
        try encoder.encode(items)
    }
}

public struct PACKET_CZ_SEARCH_STORE_INFO_item: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (4)
    }
    public var itemId: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        itemId = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(itemId)
    }
}

public struct PACKET_CZ_SEARCH_STORE_INFO: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        -1
    }
    public var packetType: Int16 = 0
    public var packetLength: Int16 = 0
    public var searchType: UInt8 = 0
    public var maxPrice: UInt32 = 0
    public var minPrice: UInt32 = 0
    public var itemsCount: UInt8 = 0
    public var cardsCount: UInt8 = 0
    public var items: [PACKET_CZ_SEARCH_STORE_INFO_item] = []
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        packetLength = try decoder.decode(Int16.self)
        searchType = try decoder.decode(UInt8.self)
        maxPrice = try decoder.decode(UInt32.self)
        minPrice = try decoder.decode(UInt32.self)
        itemsCount = try decoder.decode(UInt8.self)
        cardsCount = try decoder.decode(UInt8.self)
        items = try decoder.decode([PACKET_CZ_SEARCH_STORE_INFO_item].self, count: (Int(packetLength) - (2 + 2 + 1 + 4 + 4 + 1 + 1)) / (4))
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(packetLength)
        try encoder.encode(searchType)
        try encoder.encode(maxPrice)
        try encoder.encode(minPrice)
        try encoder.encode(itemsCount)
        try encoder.encode(cardsCount)
        try encoder.encode(items)
    }
}

public struct PACKET_ZC_SEARCH_STORE_INFO_FAILED: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 1)
    }
    public var packetType: Int16 = 0
    public var reason: UInt8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        reason = try decoder.decode(UInt8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(reason)
    }
}

public struct PACKET_ZC_OPEN_SEARCH_STORE_INFO: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2 + 1)
    }
    public var packetType: Int16 = 0
    public var effect: UInt16 = 0
    public var remainingUses: UInt8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        effect = try decoder.decode(UInt16.self)
        remainingUses = try decoder.decode(UInt8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(effect)
        try encoder.encode(remainingUses)
    }
}

public struct PACKET_ZC_SSILIST_ITEM_CLICK_ACK: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2 + 2)
    }
    public var packetType: Int16 = 0
    public var x: Int16 = 0
    public var y: Int16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        x = try decoder.decode(Int16.self)
        y = try decoder.decode(Int16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(x)
        try encoder.encode(y)
    }
}

public struct PACKET_ZC_SEARCH_STORE_INFO_ACK_sub: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (4 + 4 + 80 + 4 + 1 + 4 + 2 + ((4 * 4)) + ((2 + 2 + 1) * 5) + 1 + 1)
    }
    public var storeId: UInt32 = 0
    public var AID: UInt32 = 0
    @FixedLengthString(lengthOfBytes: 80)
    public var shopName: String
    public var itemId: UInt32 = 0
    public var itemType: UInt8 = 0
    public var price: UInt32 = 0
    public var amount: UInt16 = 0
    public var slot: EQUIPSLOTINFO = EQUIPSLOTINFO()
    @FixedSizeArray(size: 5, initialValue: ItemOptions())
    public var option_data: [ItemOptions]
    public var refine: UInt8 = 0
    public var grade: UInt8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        storeId = try decoder.decode(UInt32.self)
        AID = try decoder.decode(UInt32.self)
        shopName = try decoder.decode(String.self, lengthOfBytes: 80)
        itemId = try decoder.decode(UInt32.self)
        itemType = try decoder.decode(UInt8.self)
        price = try decoder.decode(UInt32.self)
        amount = try decoder.decode(UInt16.self)
        slot = try decoder.decode(EQUIPSLOTINFO.self)
        option_data = try decoder.decode([ItemOptions].self, count: 5)
        refine = try decoder.decode(UInt8.self)
        grade = try decoder.decode(UInt8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(storeId)
        try encoder.encode(AID)
        try encoder.encode(shopName, lengthOfBytes: 80)
        try encoder.encode(itemId)
        try encoder.encode(itemType)
        try encoder.encode(price)
        try encoder.encode(amount)
        try encoder.encode(slot)
        try encoder.encode(option_data)
        try encoder.encode(refine)
        try encoder.encode(grade)
    }
}

public struct PACKET_ZC_SEARCH_STORE_INFO_ACK: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        -1
    }
    public var packetType: Int16 = 0
    public var packetLength: Int16 = 0
    public var firstPage: UInt8 = 0
    public var nextPage: UInt8 = 0
    public var usesCount: UInt8 = 0
    public var items: [PACKET_ZC_SEARCH_STORE_INFO_ACK_sub] = []
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        packetLength = try decoder.decode(Int16.self)
        firstPage = try decoder.decode(UInt8.self)
        nextPage = try decoder.decode(UInt8.self)
        usesCount = try decoder.decode(UInt8.self)
        items = try decoder.decode([PACKET_ZC_SEARCH_STORE_INFO_ACK_sub].self, count: (Int(packetLength) - (2 + 2 + 1 + 1 + 1)) / (4 + 4 + 80 + 4 + 1 + 4 + 2 + ((4 * 4)) + ((2 + 2 + 1) * 5) + 1 + 1))
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(packetLength)
        try encoder.encode(firstPage)
        try encoder.encode(nextPage)
        try encoder.encode(usesCount)
        try encoder.encode(items)
    }
}

public struct packet_achievement_list: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2 + 4 + 4 + 2 + 4 + 4 + ((4 + 1 + (4 * 10) + 4 + 1) * 10))
    }
    public var packetType: Int16 = 0
    public var packetLength: Int16 = 0
    public var total_achievements: UInt32 = 0
    public var total_points: UInt32 = 0
    public var rank: UInt16 = 0
    public var current_rank_points: UInt32 = 0
    public var next_rank_points: UInt32 = 0
    @FixedSizeArray(size: 10, initialValue: ach_list_info())
    public var ach: [ach_list_info]
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        packetLength = try decoder.decode(Int16.self)
        total_achievements = try decoder.decode(UInt32.self)
        total_points = try decoder.decode(UInt32.self)
        rank = try decoder.decode(UInt16.self)
        current_rank_points = try decoder.decode(UInt32.self)
        next_rank_points = try decoder.decode(UInt32.self)
        ach = try decoder.decode([ach_list_info].self, count: 10)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(packetLength)
        try encoder.encode(total_achievements)
        try encoder.encode(total_points)
        try encoder.encode(rank)
        try encoder.encode(current_rank_points)
        try encoder.encode(next_rank_points)
        try encoder.encode(ach)
    }
}

public struct packet_achievement_update: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 2 + 4 + 4 + (4 + 1 + (4 * 10) + 4 + 1))
    }
    public var packetType: Int16 = 0
    public var total_points: UInt32 = 0
    public var rank: UInt16 = 0
    public var current_rank_points: UInt32 = 0
    public var next_rank_points: UInt32 = 0
    public var ach: ach_list_info = ach_list_info()
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        total_points = try decoder.decode(UInt32.self)
        rank = try decoder.decode(UInt16.self)
        current_rank_points = try decoder.decode(UInt32.self)
        next_rank_points = try decoder.decode(UInt32.self)
        ach = try decoder.decode(ach_list_info.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(total_points)
        try encoder.encode(rank)
        try encoder.encode(current_rank_points)
        try encoder.encode(next_rank_points)
        try encoder.encode(ach)
    }
}

public struct packet_achievement_reward_ack: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 1 + 4)
    }
    public var packetType: Int16 = 0
    public var failed: UInt8 = 0
    public var ach_id: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        failed = try decoder.decode(UInt8.self)
        ach_id = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(failed)
        try encoder.encode(ach_id)
    }
}

public struct packet_reqname_ack: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 24)
    }
    public var packetType: Int16 = 0
    public var gid: Int32 = 0
    @FixedLengthString(lengthOfBytes: 24)
    public var name: String
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        gid = try decoder.decode(Int32.self)
        name = try decoder.decode(String.self, lengthOfBytes: 24)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(gid)
        try encoder.encode(name, lengthOfBytes: 24)
    }
}

public struct PACKET_ZC_ACK_REQNAMEALL: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 24 + 24 + 24 + 24 + 4)
    }
    public var packetType: Int16 = 0
    public var gid: Int32 = 0
    @FixedLengthString(lengthOfBytes: 24)
    public var name: String
    @FixedLengthString(lengthOfBytes: 24)
    public var party_name: String
    @FixedLengthString(lengthOfBytes: 24)
    public var guild_name: String
    @FixedLengthString(lengthOfBytes: 24)
    public var position_name: String
    public var title_id: Int32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        gid = try decoder.decode(Int32.self)
        name = try decoder.decode(String.self, lengthOfBytes: 24)
        party_name = try decoder.decode(String.self, lengthOfBytes: 24)
        guild_name = try decoder.decode(String.self, lengthOfBytes: 24)
        position_name = try decoder.decode(String.self, lengthOfBytes: 24)
        title_id = try decoder.decode(Int32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(gid)
        try encoder.encode(name, lengthOfBytes: 24)
        try encoder.encode(party_name, lengthOfBytes: 24)
        try encoder.encode(guild_name, lengthOfBytes: 24)
        try encoder.encode(position_name, lengthOfBytes: 24)
        try encoder.encode(title_id)
    }
}

public struct PACKET_ZC_ACK_REQNAMEALL_NPC: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 4 + 24 + 24)
    }
    public var packetType: Int16 = 0
    public var gid: Int32 = 0
    public var groupId: Int32 = 0
    @FixedLengthString(lengthOfBytes: 24)
    public var name: String
    @FixedLengthString(lengthOfBytes: 24)
    public var title: String
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        gid = try decoder.decode(Int32.self)
        groupId = try decoder.decode(Int32.self)
        name = try decoder.decode(String.self, lengthOfBytes: 24)
        title = try decoder.decode(String.self, lengthOfBytes: 24)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(gid)
        try encoder.encode(groupId)
        try encoder.encode(name, lengthOfBytes: 24)
        try encoder.encode(title, lengthOfBytes: 24)
    }
}

public struct PACKET_ZC_OVERWEIGHT_PERCENT: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4)
    }
    public var packetType: Int16 = 0
    public var percent: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        percent = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(percent)
    }
}

public struct PACKET_ZC_WARPLIST_sub: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (16)
    }
    @FixedLengthString(lengthOfBytes: 16)
    public var map: String
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        map = try decoder.decode(String.self, lengthOfBytes: 16)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(map, lengthOfBytes: 16)
    }
}

public struct PACKET_ZC_WARPLIST: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        -1
    }
    public var packetType: Int16 = 0
    public var packetLength: Int16 = 0
    public var skillId: UInt16 = 0
    public var maps: [PACKET_ZC_WARPLIST_sub] = []
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        packetLength = try decoder.decode(Int16.self)
        skillId = try decoder.decode(UInt16.self)
        maps = try decoder.decode([PACKET_ZC_WARPLIST_sub].self, count: (Int(packetLength) - (2 + 2 + 2)) / (16))
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(packetLength)
        try encoder.encode(skillId)
        try encoder.encode(maps)
    }
}

public struct PACKET_ZC_GROUP_ISALIVE: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 1)
    }
    public var packetType: Int16 = 0
    public var AID: UInt32 = 0
    public var isDead: UInt8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        AID = try decoder.decode(UInt32.self)
        isDead = try decoder.decode(UInt8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(AID)
        try encoder.encode(isDead)
    }
}

public struct PACKET_ZC_GUILD_POSITION: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        -1
    }
    public var packetType: Int16 = 0
    public var packetLength: Int16 = 0
    public var AID: UInt32 = 0
    public var position: String = ""
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        packetLength = try decoder.decode(Int16.self)
        AID = try decoder.decode(UInt32.self)
        position = try decoder.decode(String.self, lengthOfBytes: (Int(packetLength) - (2 + 2 + 4)))
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(packetLength)
        try encoder.encode(AID)
        try encoder.encode(position)
    }
}

public struct PACKET_ZC_MOVE_ITEM_FAILED: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2 + 2)
    }
    public var packetType: Int16 = 0
    public var itemIndex: Int16 = 0
    public var itemCount: Int16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        itemIndex = try decoder.decode(Int16.self)
        itemCount = try decoder.decode(Int16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(itemIndex)
        try encoder.encode(itemCount)
    }
}

public struct PACKET_ZC_ACK_BAN_GUILD1: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 24 + 40 + 24)
    }
    public var packetType: Int16 = 0
    @FixedLengthString(lengthOfBytes: 24)
    public var name: String
    @FixedLengthString(lengthOfBytes: 40)
    public var reason: String
    @FixedLengthString(lengthOfBytes: 24)
    public var account_name: String
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        name = try decoder.decode(String.self, lengthOfBytes: 24)
        reason = try decoder.decode(String.self, lengthOfBytes: 40)
        account_name = try decoder.decode(String.self, lengthOfBytes: 24)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(name, lengthOfBytes: 24)
        try encoder.encode(reason, lengthOfBytes: 40)
        try encoder.encode(account_name, lengthOfBytes: 24)
    }
}

public struct PACKET_ZC_ACK_BAN_GUILD2: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 24 + 40)
    }
    public var packetType: Int16 = 0
    @FixedLengthString(lengthOfBytes: 24)
    public var name: String
    @FixedLengthString(lengthOfBytes: 40)
    public var reason: String
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        name = try decoder.decode(String.self, lengthOfBytes: 24)
        reason = try decoder.decode(String.self, lengthOfBytes: 40)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(name, lengthOfBytes: 24)
        try encoder.encode(reason, lengthOfBytes: 40)
    }
}

public struct PACKET_ZC_ACK_BAN_GUILD3: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 40 + 4)
    }
    public var packetType: Int16 = 0
    @FixedLengthString(lengthOfBytes: 40)
    public var reason: String
    public var GID: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        reason = try decoder.decode(String.self, lengthOfBytes: 40)
        GID = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(reason, lengthOfBytes: 40)
        try encoder.encode(GID)
    }
}

public struct PACKET_ZC_ACK_LEAVE_GUILD1: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 24 + 40)
    }
    public var packetType: Int16 = 0
    @FixedLengthString(lengthOfBytes: 24)
    public var name: String
    @FixedLengthString(lengthOfBytes: 40)
    public var reason: String
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        name = try decoder.decode(String.self, lengthOfBytes: 24)
        reason = try decoder.decode(String.self, lengthOfBytes: 40)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(name, lengthOfBytes: 24)
        try encoder.encode(reason, lengthOfBytes: 40)
    }
}

public struct PACKET_ZC_ACK_LEAVE_GUILD2: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 40)
    }
    public var packetType: Int16 = 0
    public var GID: UInt32 = 0
    @FixedLengthString(lengthOfBytes: 40)
    public var reason: String
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        GID = try decoder.decode(UInt32.self)
        reason = try decoder.decode(String.self, lengthOfBytes: 40)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(GID)
        try encoder.encode(reason, lengthOfBytes: 40)
    }
}

public struct PACKET_CZ_MEMORIALDUNGEON_COMMAND: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4)
    }
    public var packetType: Int16 = 0
    public var command: Int32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        command = try decoder.decode(Int32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(command)
    }
}

public struct PACKET_ZC_REMOVE_EFFECT: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 4)
    }
    public var packetType: Int16 = 0
    public var aid: UInt32 = 0
    public var effectId: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        aid = try decoder.decode(UInt32.self)
        effectId = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(aid)
        try encoder.encode(effectId)
    }
}

public struct PACKET_ZC_VIEW_CAMERAINFO: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 1 + 4 + 4 + 4)
    }
    public var packetType: Int16 = 0
    public var action: Int8 = 0
    public var range: Float32 = 0
    public var rotation: Float32 = 0
    public var latitude: Float32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        action = try decoder.decode(Int8.self)
        range = try decoder.decode(Float32.self)
        rotation = try decoder.decode(Float32.self)
        latitude = try decoder.decode(Float32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(action)
        try encoder.encode(range)
        try encoder.encode(rotation)
        try encoder.encode(latitude)
    }
}

public struct PACKET_CZ_VIEW_CAMERAINFO: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 1 + 4 + 4 + 4)
    }
    public var packetType: Int16 = 0
    public var action: Int8 = 0
    public var range: Float32 = 0
    public var rotation: Float32 = 0
    public var latitude: Float32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        action = try decoder.decode(Int8.self)
        range = try decoder.decode(Float32.self)
        rotation = try decoder.decode(Float32.self)
        latitude = try decoder.decode(Float32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(action)
        try encoder.encode(range)
        try encoder.encode(rotation)
        try encoder.encode(latitude)
    }
}

public struct PACKET_ZC_AUTOSPELLLIST: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        -1
    }
    public var packetType: Int16 = 0
    public var packetLength: Int16 = 0
    public var skills: [Int32] = []
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        packetLength = try decoder.decode(Int16.self)
        skills = try decoder.decode([Int32].self, count: (Int(packetLength) - (2 + 2)) / 4)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(packetLength)
        try encoder.encode(skills)
    }
}

public struct PACKET_ZC_CHANGE_ITEM_OPTION: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2 + 1 + ((4 * 4)) + ((2 + 2 + 1) * 5) + 1 + 1)
    }
    public var packetType: Int16 = 0
    public var index: Int16 = 0
    public var isDamaged: Int8 = 0
    public var slot: EQUIPSLOTINFO = EQUIPSLOTINFO()
    @FixedSizeArray(size: 5, initialValue: ItemOptions())
    public var option_data: [ItemOptions]
    public var refiningLevel: UInt8 = 0
    public var grade: UInt8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        index = try decoder.decode(Int16.self)
        isDamaged = try decoder.decode(Int8.self)
        slot = try decoder.decode(EQUIPSLOTINFO.self)
        option_data = try decoder.decode([ItemOptions].self, count: 5)
        refiningLevel = try decoder.decode(UInt8.self)
        grade = try decoder.decode(UInt8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(index)
        try encoder.encode(isDamaged)
        try encoder.encode(slot)
        try encoder.encode(option_data)
        try encoder.encode(refiningLevel)
        try encoder.encode(grade)
    }
}

public struct PACKET_ZC_UPDATE_CARDSLOT: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2 + 2 + 4 + 1)
    }
    public var packetType: Int16 = 0
    public var wearState: Int16 = 0
    public var cardSlot: Int16 = 0
    public var itemId: Int32 = 0
    public var equipFlag: Int8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        wearState = try decoder.decode(Int16.self)
        cardSlot = try decoder.decode(Int16.self)
        itemId = try decoder.decode(Int32.self)
        equipFlag = try decoder.decode(Int8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(wearState)
        try encoder.encode(cardSlot)
        try encoder.encode(itemId)
        try encoder.encode(equipFlag)
    }
}

public struct PACKET_ZC_DEBUGMSG: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        -1
    }
    public var packetType: Int16 = 0
    public var packetLength: Int16 = 0
    public var color: Int32 = 0
    public var message: String = ""
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        packetLength = try decoder.decode(Int16.self)
        color = try decoder.decode(Int32.self)
        message = try decoder.decode(String.self, lengthOfBytes: (Int(packetLength) - (2 + 2 + 4)))
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(packetLength)
        try encoder.encode(color)
        try encoder.encode(message)
    }
}

public struct PACKET_CZ_USE_SKILL_START: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2 + 2 + 4)
    }
    public var packetType: Int16 = 0
    public var skillId: Int16 = 0
    public var skillLv: Int16 = 0
    public var targetId: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        skillId = try decoder.decode(Int16.self)
        skillLv = try decoder.decode(Int16.self)
        targetId = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(skillId)
        try encoder.encode(skillLv)
        try encoder.encode(targetId)
    }
}

public struct PACKET_CZ_USE_SKILL_END: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2)
    }
    public var packetType: Int16 = 0
    public var skillId: Int16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        skillId = try decoder.decode(Int16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(skillId)
    }
}

public struct PACKET_ZC_EXTEND_BODYITEM_SIZE: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2)
    }
    public var packetType: Int16 = 0
    public var expansionSize: Int16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        expansionSize = try decoder.decode(Int16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(expansionSize)
    }
}

public struct PACKET_ZC_ACK_OPEN_MSGBOX_EXTEND_BODYITEM_SIZE: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 1 + 4)
    }
    public var packetType: Int16 = 0
    public var result: UInt8 = 0
    public var itemId: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        result = try decoder.decode(UInt8.self)
        itemId = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(result)
        try encoder.encode(itemId)
    }
}

public struct PACKET_ZC_ACK_EXTEND_BODYITEM_SIZE: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 1)
    }
    public var packetType: Int16 = 0
    public var result: UInt8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        result = try decoder.decode(UInt8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(result)
    }
}

public struct PACKET_CZ_REQ_OPEN_MSGBOX_EXTEND_BODYITEM_SIZE: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2)
    }
    public var packetType: Int16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
    }
}

public struct PACKET_CZ_REQ_EXTEND_BODYITEM_SIZE: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2)
    }
    public var packetType: Int16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
    }
}

public struct PACKET_CZ_CLOSE_MSGBOX_EXTEND_BODYITEM_SIZE: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2)
    }
    public var packetType: Int16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
    }
}

public struct PACKET_CZ_REQ_REMAINTIME: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2)
    }
    public var packetType: Int16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
    }
}

public struct PACKET_CZ_PARTY_CONFIG: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 1)
    }
    public var packetType: Int16 = 0
    public var refuseInvite: UInt8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        refuseInvite = try decoder.decode(UInt8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(refuseInvite)
    }
}

public struct PACKET_ZC_NPC_BARTER_MARKET_ITEMINFO_sub: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (4 + 1 + 4 + 4 + 4 + 4 + 4 + 2 + 4)
    }
    public var nameid: UInt32 = 0
    public var type: UInt8 = 0
    public var amount: UInt32 = 0
    public var currencyNameid: UInt32 = 0
    public var currencyAmount: UInt32 = 0
    public var weight: UInt32 = 0
    public var index: UInt32 = 0
    public var viewSprite: UInt16 = 0
    public var location: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        nameid = try decoder.decode(UInt32.self)
        type = try decoder.decode(UInt8.self)
        amount = try decoder.decode(UInt32.self)
        currencyNameid = try decoder.decode(UInt32.self)
        currencyAmount = try decoder.decode(UInt32.self)
        weight = try decoder.decode(UInt32.self)
        index = try decoder.decode(UInt32.self)
        viewSprite = try decoder.decode(UInt16.self)
        location = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(nameid)
        try encoder.encode(type)
        try encoder.encode(amount)
        try encoder.encode(currencyNameid)
        try encoder.encode(currencyAmount)
        try encoder.encode(weight)
        try encoder.encode(index)
        try encoder.encode(viewSprite)
        try encoder.encode(location)
    }
}

public struct PACKET_ZC_NPC_BARTER_MARKET_ITEMINFO: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        -1
    }
    public var packetType: Int16 = 0
    public var packetLength: Int16 = 0
    public var list: [PACKET_ZC_NPC_BARTER_MARKET_ITEMINFO_sub] = []
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        packetLength = try decoder.decode(Int16.self)
        list = try decoder.decode([PACKET_ZC_NPC_BARTER_MARKET_ITEMINFO_sub].self, count: (Int(packetLength) - (2 + 2)) / (4 + 1 + 4 + 4 + 4 + 4 + 4 + 2 + 4))
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(packetLength)
        try encoder.encode(list)
    }
}

public struct PACKET_CZ_NPC_BARTER_MARKET_CLOSE: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2)
    }
    public var packetType: Int16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
    }
}

public struct PACKET_CZ_NPC_BARTER_MARKET_PURCHASE_sub: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (4 + 4 + 2 + 4)
    }
    public var itemId: UInt32 = 0
    public var amount: UInt32 = 0
    public var invIndex: UInt16 = 0
    public var shopIndex: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        itemId = try decoder.decode(UInt32.self)
        amount = try decoder.decode(UInt32.self)
        invIndex = try decoder.decode(UInt16.self)
        shopIndex = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(itemId)
        try encoder.encode(amount)
        try encoder.encode(invIndex)
        try encoder.encode(shopIndex)
    }
}

public struct PACKET_CZ_NPC_BARTER_MARKET_PURCHASE: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        -1
    }
    public var packetType: Int16 = 0
    public var packetLength: Int16 = 0
    public var list: [PACKET_CZ_NPC_BARTER_MARKET_PURCHASE_sub] = []
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        packetLength = try decoder.decode(Int16.self)
        list = try decoder.decode([PACKET_CZ_NPC_BARTER_MARKET_PURCHASE_sub].self, count: (Int(packetLength) - (2 + 2)) / (4 + 4 + 2 + 4))
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(packetLength)
        try encoder.encode(list)
    }
}

public struct PACKET_ZC_USESKILL_ACK: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 4 + 2 + 2 + 2 + 4 + 4 + 1 + 4)
    }
    public var packetType: Int16 = 0
    public var srcId: UInt32 = 0
    public var dstId: UInt32 = 0
    public var x: UInt16 = 0
    public var y: UInt16 = 0
    public var skillId: UInt16 = 0
    public var element: UInt32 = 0
    public var delayTime: UInt32 = 0
    public var disposable: UInt8 = 0
    public var attackMT: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        srcId = try decoder.decode(UInt32.self)
        dstId = try decoder.decode(UInt32.self)
        x = try decoder.decode(UInt16.self)
        y = try decoder.decode(UInt16.self)
        skillId = try decoder.decode(UInt16.self)
        element = try decoder.decode(UInt32.self)
        delayTime = try decoder.decode(UInt32.self)
        disposable = try decoder.decode(UInt8.self)
        attackMT = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(srcId)
        try encoder.encode(dstId)
        try encoder.encode(x)
        try encoder.encode(y)
        try encoder.encode(skillId)
        try encoder.encode(element)
        try encoder.encode(delayTime)
        try encoder.encode(disposable)
        try encoder.encode(attackMT)
    }
}

public struct PACKET_CZ_CLIENT_VERSION: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4)
    }
    public var packetType: Int16 = 0
    public var clientVersion: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        clientVersion = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(clientVersion)
    }
}

public struct PACKET_CZ_PING_LIVE: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2)
    }
    public var packetType: Int16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
    }
}

public struct PACKET_ZC_PING_LIVE: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2)
    }
    public var packetType: Int16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
    }
}

public struct PACKET_CZ_CMD_RESETCOOLTIME: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2)
    }
    public var packetType: Int16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
    }
}

public struct PACKET_CZ_CLOSE_UI_STYLINGSHOP: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2)
    }
    public var packetType: Int16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
    }
}

public struct PACKET_ZC_NOTIFY_ACTORINIT: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2)
    }
    public var packetType: Int16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
    }
}

public struct PACKET_ZC_PARTY_CONFIG: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 1)
    }
    public var packetType: Int16 = 0
    public var denyPartyInvites: UInt8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        denyPartyInvites = try decoder.decode(UInt8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(denyPartyInvites)
    }
}

public struct PACKET_ZC_ROLE_CHANGE: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 24)
    }
    public var packetType: Int16 = 0
    public var flag: Int32 = 0
    @FixedLengthString(lengthOfBytes: 24)
    public var name: String
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        flag = try decoder.decode(Int32.self)
        name = try decoder.decode(String.self, lengthOfBytes: 24)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(flag)
        try encoder.encode(name, lengthOfBytes: 24)
    }
}

public struct PACKET_ZC_BAN_LIST_sub: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (4 + 40 + 24)
    }
    public var char_id: Int32 = 0
    @FixedLengthString(lengthOfBytes: 40)
    public var message: String
    @FixedLengthString(lengthOfBytes: 24)
    public var char_name: String
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        char_id = try decoder.decode(Int32.self)
        message = try decoder.decode(String.self, lengthOfBytes: 40)
        char_name = try decoder.decode(String.self, lengthOfBytes: 24)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(char_id)
        try encoder.encode(message, lengthOfBytes: 40)
        try encoder.encode(char_name, lengthOfBytes: 24)
    }
}

public struct PACKET_ZC_BAN_LIST: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        -1
    }
    public var packetType: Int16 = 0
    public var packetLength: Int16 = 0
    public var chars: [PACKET_ZC_BAN_LIST_sub] = []
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        packetLength = try decoder.decode(Int16.self)
        chars = try decoder.decode([PACKET_ZC_BAN_LIST_sub].self, count: (Int(packetLength) - (2 + 2)) / (4 + 40 + 24))
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(packetLength)
        try encoder.encode(chars)
    }
}

public struct PACKET_ZC_ACK_CLOSE_ROULETTE: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 1)
    }
    public var packetType: Int16 = 0
    public var result: UInt8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        result = try decoder.decode(UInt8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(result)
    }
}

public struct PACKET_ZC_ACK_MERGE_ITEM: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2 + 2 + 1)
    }
    public var packetType: Int16 = 0
    public var index: Int16 = 0
    public var amount: Int16 = 0
    public var reason: UInt8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        index = try decoder.decode(Int16.self)
        amount = try decoder.decode(Int16.self)
        reason = try decoder.decode(UInt8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(index)
        try encoder.encode(amount)
        try encoder.encode(reason)
    }
}

public struct PACKET_ZC_MERGE_ITEM_OPEN_sub: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2)
    }
    public var index: Int16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        index = try decoder.decode(Int16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(index)
    }
}

public struct PACKET_ZC_MERGE_ITEM_OPEN: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        -1
    }
    public var packetType: Int16 = 0
    public var packetLength: Int16 = 0
    public var items: [PACKET_ZC_MERGE_ITEM_OPEN_sub] = []
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        packetLength = try decoder.decode(Int16.self)
        items = try decoder.decode([PACKET_ZC_MERGE_ITEM_OPEN_sub].self, count: (Int(packetLength) - (2 + 2)) / (2))
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(packetLength)
        try encoder.encode(items)
    }
}

public struct PACKET_ZC_SE_PC_BUY_CASHITEM_RESULT: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 2 + 4 + 4)
    }
    public var packetType: Int16 = 0
    public var itemId: UInt32 = 0
    public var result: UInt16 = 0
    public var cashPoints: UInt32 = 0
    public var kafraPoints: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        itemId = try decoder.decode(UInt32.self)
        result = try decoder.decode(UInt16.self)
        cashPoints = try decoder.decode(UInt32.self)
        kafraPoints = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(itemId)
        try encoder.encode(result)
        try encoder.encode(cashPoints)
        try encoder.encode(kafraPoints)
    }
}

public struct PACKET_ZC_OPEN_REFINING_UI: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2)
    }
    public var packetType: Int16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
    }
}

public struct PACKET_CZ_REFINING_SELECT_ITEM: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2)
    }
    public var packetType: Int16 = 0
    public var index: Int16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        index = try decoder.decode(Int16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(index)
    }
}

public struct PACKET_ZC_REFINING_MATERIAL_LIST_SUB: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (4 + 1 + 4)
    }
    public var itemId: UInt32 = 0
    public var chance: Int8 = 0
    public var zeny: Int32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        itemId = try decoder.decode(UInt32.self)
        chance = try decoder.decode(Int8.self)
        zeny = try decoder.decode(Int32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(itemId)
        try encoder.encode(chance)
        try encoder.encode(zeny)
    }
}

public struct PACKET_ZC_REFINING_MATERIAL_LIST: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        -1
    }
    public var packetType: Int16 = 0
    public var packetLength: Int16 = 0
    public var itemIndex: Int16 = 0
    public var blacksmithBlessing: Int8 = 0
    public var req: [PACKET_ZC_REFINING_MATERIAL_LIST_SUB] = []
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        packetLength = try decoder.decode(Int16.self)
        itemIndex = try decoder.decode(Int16.self)
        blacksmithBlessing = try decoder.decode(Int8.self)
        req = try decoder.decode([PACKET_ZC_REFINING_MATERIAL_LIST_SUB].self, count: (Int(packetLength) - (2 + 2 + 2 + 1)) / (4 + 1 + 4))
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(packetLength)
        try encoder.encode(itemIndex)
        try encoder.encode(blacksmithBlessing)
        try encoder.encode(req)
    }
}

public struct PACKET_CZ_REQ_REFINING: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2 + 4 + 1)
    }
    public var packetType: Int16 = 0
    public var index: Int16 = 0
    public var itemId: UInt32 = 0
    public var blacksmithBlessing: Int8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        index = try decoder.decode(Int16.self)
        itemId = try decoder.decode(UInt32.self)
        blacksmithBlessing = try decoder.decode(Int8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(index)
        try encoder.encode(itemId)
        try encoder.encode(blacksmithBlessing)
    }
}

public struct PACKET_CZ_CLOSE_REFINING_UI: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2)
    }
    public var packetType: Int16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
    }
}

public struct PACKET_ZC_BROADCAST_ITEMREFINING_RESULT: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 24 + 4 + 1 + 1)
    }
    public var packetType: Int16 = 0
    @FixedLengthString(lengthOfBytes: 24)
    public var name: String
    public var itemId: UInt32 = 0
    public var refine_level: Int8 = 0
    public var status: Int8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        name = try decoder.decode(String.self, lengthOfBytes: 24)
        itemId = try decoder.decode(UInt32.self)
        refine_level = try decoder.decode(Int8.self)
        status = try decoder.decode(Int8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(name, lengthOfBytes: 24)
        try encoder.encode(itemId)
        try encoder.encode(refine_level)
        try encoder.encode(status)
    }
}

public struct PACKET_ZC_STATUS_CHANGE_ACK: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2 + 1 + 1)
    }
    public var packetType: Int16 = 0
    public var sp: UInt16 = 0
    public var ok: UInt8 = 0
    public var value: UInt8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        sp = try decoder.decode(UInt16.self)
        ok = try decoder.decode(UInt8.self)
        value = try decoder.decode(UInt8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(sp)
        try encoder.encode(ok)
        try encoder.encode(value)
    }
}

public struct PACKET_ZC_EQUIPMENT_EFFECT: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        -1
    }
    public var packetType: Int16 = 0
    public var packetLength: Int16 = 0
    public var aid: UInt32 = 0
    public var status: Int8 = 0
    public var effects: [UInt16] = []
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        packetLength = try decoder.decode(Int16.self)
        aid = try decoder.decode(UInt32.self)
        status = try decoder.decode(Int8.self)
        effects = try decoder.decode([UInt16].self, count: (Int(packetLength) - (2 + 2 + 4 + 1)) / 2)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(packetLength)
        try encoder.encode(aid)
        try encoder.encode(status)
        try encoder.encode(effects)
    }
}

public struct PACKET_ZC_ADD_SKILL: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + (2 + 4 + 2 + 2 + 2 + 1 + 2))
    }
    public var packetType: Int16 = 0
    public var skill: SKILLDATA = SKILLDATA()
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        skill = try decoder.decode(SKILLDATA.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(skill)
    }
}

public struct PACKET_ZC_SKILLINFO_LIST: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        -1
    }
    public var packetType: Int16 = 0
    public var packetLength: Int16 = 0
    public var skills: [SKILLDATA] = []
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        packetLength = try decoder.decode(Int16.self)
        skills = try decoder.decode([SKILLDATA].self, count: (Int(packetLength) - (2 + 2)) / (2 + 4 + 2 + 2 + 2 + 1 + 2))
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(packetLength)
        try encoder.encode(skills)
    }
}

public struct PACKET_ZC_SKILLINFO_UPDATE2: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2 + 4 + 2 + 2 + 2 + 1 + 2)
    }
    public var packetType: Int16 = 0
    public var id: UInt16 = 0
    public var inf: Int32 = 0
    public var level: UInt16 = 0
    public var sp: UInt16 = 0
    public var range2: UInt16 = 0
    public var upFlag: UInt8 = 0
    public var level2: UInt16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        id = try decoder.decode(UInt16.self)
        inf = try decoder.decode(Int32.self)
        level = try decoder.decode(UInt16.self)
        sp = try decoder.decode(UInt16.self)
        range2 = try decoder.decode(UInt16.self)
        upFlag = try decoder.decode(UInt8.self)
        level2 = try decoder.decode(UInt16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(id)
        try encoder.encode(inf)
        try encoder.encode(level)
        try encoder.encode(sp)
        try encoder.encode(range2)
        try encoder.encode(upFlag)
        try encoder.encode(level2)
    }
}

public struct PACKET_ZC_NPC_MARKET_PURCHASE_RESULT_sub: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (4 + 2 + 4)
    }
    public var ITID: UInt32 = 0
    public var qty: UInt16 = 0
    public var price: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        ITID = try decoder.decode(UInt32.self)
        qty = try decoder.decode(UInt16.self)
        price = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(ITID)
        try encoder.encode(qty)
        try encoder.encode(price)
    }
}

public struct PACKET_ZC_NPC_MARKET_PURCHASE_RESULT: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        -1
    }
    public var packetType: Int16 = 0
    public var packetLength: Int16 = 0
    public var result: UInt16 = 0
    public var list: [PACKET_ZC_NPC_MARKET_PURCHASE_RESULT_sub] = []
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        packetLength = try decoder.decode(Int16.self)
        result = try decoder.decode(UInt16.self)
        list = try decoder.decode([PACKET_ZC_NPC_MARKET_PURCHASE_RESULT_sub].self, count: (Int(packetLength) - (2 + 2 + 2)) / (4 + 2 + 4))
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(packetLength)
        try encoder.encode(result)
        try encoder.encode(list)
    }
}

public struct PACKET_ZC_TALKBOX_CHATCONTENTS: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 21)
    }
    public var packetType: Int16 = 0
    public var aid: UInt32 = 0
    @FixedLengthString(lengthOfBytes: 21)
    public var message: String
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        aid = try decoder.decode(UInt32.self)
        message = try decoder.decode(String.self, lengthOfBytes: 21)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(aid)
        try encoder.encode(message, lengthOfBytes: 21)
    }
}

public struct PACKET_ZC_GUILD_AGIT_INFO: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        -1
    }
    public var packetType: Int16 = 0
    public var packetLength: Int16 = 0
    public var castle_list: [Int8] = []
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        packetLength = try decoder.decode(Int16.self)
        castle_list = try decoder.decode([Int8].self, count: (Int(packetLength) - (2 + 2)) / 1)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(packetLength)
        try encoder.encode(castle_list)
    }
}

public struct PACKET_CZ_REQ_MOVE_GUILD_AGIT: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 1)
    }
    public var packetType: Int16 = 0
    public var castle_id: Int8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        castle_id = try decoder.decode(Int8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(castle_id)
    }
}

public struct PACKET_ZC_REQ_ACK_MOVE_GUILD_AGIT: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2)
    }
    public var packetType: Int16 = 0
    public var result: Int16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        result = try decoder.decode(Int16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(result)
    }
}

public struct PACKET_ZC_REQ_ACK_AGIT_INVESTMENT: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 1 + 4 + 4)
    }
    public var packetType: Int16 = 0
    public var castle_id: Int8 = 0
    public var economy: Int32 = 0
    public var defense: Int32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        castle_id = try decoder.decode(Int8.self)
        economy = try decoder.decode(Int32.self)
        defense = try decoder.decode(Int32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(castle_id)
        try encoder.encode(economy)
        try encoder.encode(defense)
    }
}

public struct PACKET_CZ_REQ_AGIT_INVESTMENT: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 1)
    }
    public var packetType: Int16 = 0
    public var castle_id: Int8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        castle_id = try decoder.decode(Int8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(castle_id)
    }
}

public struct PACKET_ZC_RANDOM_COMBINE_ITEM_UI_OPEN: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4)
    }
    public var packetType: Int16 = 0
    public var itemId: Int32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        itemId = try decoder.decode(Int32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(itemId)
    }
}

public struct PACKET_CZ_RANDOM_COMBINE_ITEM_UI_CLOSE: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2)
    }
    public var packetType: Int16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
    }
}

public struct PACKET_CZ_REQ_RANDOM_COMBINE_ITEM_sub: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2)
    }
    public var index: Int16 = 0
    public var count: Int16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        index = try decoder.decode(Int16.self)
        count = try decoder.decode(Int16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(index)
        try encoder.encode(count)
    }
}

public struct PACKET_CZ_REQ_RANDOM_COMBINE_ITEM: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        -1
    }
    public var packetType: Int16 = 0
    public var packetLength: Int16 = 0
    public var itemId: Int32 = 0
    public var items: [PACKET_CZ_REQ_RANDOM_COMBINE_ITEM_sub] = []
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        packetLength = try decoder.decode(Int16.self)
        itemId = try decoder.decode(Int32.self)
        items = try decoder.decode([PACKET_CZ_REQ_RANDOM_COMBINE_ITEM_sub].self, count: (Int(packetLength) - (2 + 2 + 4)) / (2 + 2))
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(packetLength)
        try encoder.encode(itemId)
        try encoder.encode(items)
    }
}

public struct PACKET_ZC_ACK_RANDOM_COMBINE_ITEM: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2)
    }
    public var packetType: Int16 = 0
    public var result: Int16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        result = try decoder.decode(Int16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(result)
    }
}

public struct PACKET_CZ_UNINSTALLATION: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 1)
    }
    public var packetType: Int16 = 0
    public var InstallationKind: UInt8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        InstallationKind = try decoder.decode(UInt8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(InstallationKind)
    }
}

public struct PACKET_ZC_NOTIFY_EFFECT3: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 4 + 8)
    }
    public var packetType: Int16 = 0
    public var aid: UInt32 = 0
    public var effectId: UInt32 = 0
    public var num: UInt64 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        aid = try decoder.decode(UInt32.self)
        effectId = try decoder.decode(UInt32.self)
        num = try decoder.decode(UInt64.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(aid)
        try encoder.encode(effectId)
        try encoder.encode(num)
    }
}

public struct PACKET_CZ_SE_CASHSHOP_OPEN1: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2)
    }
    public var packetType: Int16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
    }
}

public struct PACKET_CZ_SE_CASHSHOP_OPEN2: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4)
    }
    public var packetType: Int16 = 0
    public var tab: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        tab = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(tab)
    }
}

public struct PACKET_CZ_GET_ACCOUNT_LIMTIED_SALE_LIST: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2)
    }
    public var packetType: Int16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
    }
}

public struct PACKET_ZC_SE_CASHSHOP_OPEN: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 4 + 4)
    }
    public var packetType: Int16 = 0
    public var cashPoints: UInt32 = 0
    public var kafraPoints: UInt32 = 0
    public var tab: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        cashPoints = try decoder.decode(UInt32.self)
        kafraPoints = try decoder.decode(UInt32.self)
        tab = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(cashPoints)
        try encoder.encode(kafraPoints)
        try encoder.encode(tab)
    }
}

public struct PACKET_CZ_NPC_EXPANDED_BARTER_MARKET_CLOSE: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2)
    }
    public var packetType: Int16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
    }
}

public struct PACKET_ZC_NPC_EXPANDED_BARTER_MARKET_ITEMINFO_sub2: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (4 + 2 + 4 + 2)
    }
    public var nameid: UInt32 = 0
    public var refine_level: UInt16 = 0
    public var amount: UInt32 = 0
    public var type: UInt16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        nameid = try decoder.decode(UInt32.self)
        refine_level = try decoder.decode(UInt16.self)
        amount = try decoder.decode(UInt32.self)
        type = try decoder.decode(UInt16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(nameid)
        try encoder.encode(refine_level)
        try encoder.encode(amount)
        try encoder.encode(type)
    }
}

public struct PACKET_ZC_NPC_EXPANDED_BARTER_MARKET_ITEMINFO_sub: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (4 + 2 + 4 + 4 + 4 + 4 + 2 + 4 + 4 + ((4 + 2 + 4 + 2) * 1))
    }
    public var nameid: UInt32 = 0
    public var type: UInt16 = 0
    public var amount: UInt32 = 0
    public var weight: UInt32 = 0
    public var index: UInt32 = 0
    public var zeny: UInt32 = 0
    public var viewSprite: UInt16 = 0
    public var location: UInt32 = 0
    public var currency_count: UInt32 = 0
    @FixedSizeArray(size: 1, initialValue: PACKET_ZC_NPC_EXPANDED_BARTER_MARKET_ITEMINFO_sub2())
    public var currencies: [PACKET_ZC_NPC_EXPANDED_BARTER_MARKET_ITEMINFO_sub2]
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        nameid = try decoder.decode(UInt32.self)
        type = try decoder.decode(UInt16.self)
        amount = try decoder.decode(UInt32.self)
        weight = try decoder.decode(UInt32.self)
        index = try decoder.decode(UInt32.self)
        zeny = try decoder.decode(UInt32.self)
        viewSprite = try decoder.decode(UInt16.self)
        location = try decoder.decode(UInt32.self)
        currency_count = try decoder.decode(UInt32.self)
        currencies = try decoder.decode([PACKET_ZC_NPC_EXPANDED_BARTER_MARKET_ITEMINFO_sub2].self, count: 1)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(nameid)
        try encoder.encode(type)
        try encoder.encode(amount)
        try encoder.encode(weight)
        try encoder.encode(index)
        try encoder.encode(zeny)
        try encoder.encode(viewSprite)
        try encoder.encode(location)
        try encoder.encode(currency_count)
        try encoder.encode(currencies)
    }
}

public struct PACKET_ZC_NPC_EXPANDED_BARTER_MARKET_ITEMINFO: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        -1
    }
    public var packetType: Int16 = 0
    public var packetLength: Int16 = 0
    public var items_count: Int32 = 0
    public var items: [PACKET_ZC_NPC_EXPANDED_BARTER_MARKET_ITEMINFO_sub] = []
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        packetLength = try decoder.decode(Int16.self)
        items_count = try decoder.decode(Int32.self)
        items = try decoder.decode([PACKET_ZC_NPC_EXPANDED_BARTER_MARKET_ITEMINFO_sub].self, count: (Int(packetLength) - (2 + 2 + 4)) / (4 + 2 + 4 + 4 + 4 + 4 + 2 + 4 + 4 + ((4 + 2 + 4 + 2) * 1)))
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(packetLength)
        try encoder.encode(items_count)
        try encoder.encode(items)
    }
}

public struct PACKET_CZ_NPC_EXPANDED_BARTER_MARKET_PURCHASE_sub: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (4 + 4 + 4)
    }
    public var itemId: UInt32 = 0
    public var shopIndex: UInt32 = 0
    public var amount: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        itemId = try decoder.decode(UInt32.self)
        shopIndex = try decoder.decode(UInt32.self)
        amount = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(itemId)
        try encoder.encode(shopIndex)
        try encoder.encode(amount)
    }
}

public struct PACKET_CZ_NPC_EXPANDED_BARTER_MARKET_PURCHASE: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        -1
    }
    public var packetType: Int16 = 0
    public var packetLength: Int16 = 0
    public var list: [PACKET_CZ_NPC_EXPANDED_BARTER_MARKET_PURCHASE_sub] = []
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        packetLength = try decoder.decode(Int16.self)
        list = try decoder.decode([PACKET_CZ_NPC_EXPANDED_BARTER_MARKET_PURCHASE_sub].self, count: (Int(packetLength) - (2 + 2)) / (4 + 4 + 4))
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(packetLength)
        try encoder.encode(list)
    }
}

public struct PACKET_ZC_STATE_CHANGE: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 2 + 2 + 4 + 1)
    }
    public var packetType: Int16 = 0
    public var AID: UInt32 = 0
    public var bodyState: Int16 = 0
    public var healthState: Int16 = 0
    public var effectState: Int32 = 0
    public var isPKModeON: Int8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        AID = try decoder.decode(UInt32.self)
        bodyState = try decoder.decode(Int16.self)
        healthState = try decoder.decode(Int16.self)
        effectState = try decoder.decode(Int32.self)
        isPKModeON = try decoder.decode(Int8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(AID)
        try encoder.encode(bodyState)
        try encoder.encode(healthState)
        try encoder.encode(effectState)
        try encoder.encode(isPKModeON)
    }
}

public struct PACKET_ZC_AUTORUN_SKILL: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2 + 4 + 2 + 2 + 2 + 24 + 1)
    }
    public var packetType: Int16 = 0
    public var skill_id: UInt16 = 0
    public var skill_type: UInt32 = 0
    public var skill_lv: UInt16 = 0
    public var skill_sp: UInt16 = 0
    public var skill_range: UInt16 = 0
    @FixedLengthString(lengthOfBytes: 24)
    public var skill_name: String
    public var up_flag: Int8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        skill_id = try decoder.decode(UInt16.self)
        skill_type = try decoder.decode(UInt32.self)
        skill_lv = try decoder.decode(UInt16.self)
        skill_sp = try decoder.decode(UInt16.self)
        skill_range = try decoder.decode(UInt16.self)
        skill_name = try decoder.decode(String.self, lengthOfBytes: 24)
        up_flag = try decoder.decode(Int8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(skill_id)
        try encoder.encode(skill_type)
        try encoder.encode(skill_lv)
        try encoder.encode(skill_sp)
        try encoder.encode(skill_range)
        try encoder.encode(skill_name, lengthOfBytes: 24)
        try encoder.encode(up_flag)
    }
}

public struct PACKET_ZC_RANDOM_UPGRADE_ITEM_UI_OPEN: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4)
    }
    public var packetType: Int16 = 0
    public var itemId: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        itemId = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(itemId)
    }
}

public struct PACKET_ZC_ACK_RANDOM_UPGRADE_ITEM: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2)
    }
    public var packetType: Int16 = 0
    public var result: UInt16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        result = try decoder.decode(UInt16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(result)
    }
}

public struct PACKET_CZ_RANDOM_UPGRADE_ITEM_UI_CLOSE: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2)
    }
    public var packetType: Int16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
    }
}

public struct PACKET_CZ_REQ_RANDOM_UPGRADE_ITEM: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 2)
    }
    public var packetType: Int16 = 0
    public var itemId: UInt32 = 0
    public var index: UInt16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        itemId = try decoder.decode(UInt32.self)
        index = try decoder.decode(UInt16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(itemId)
        try encoder.encode(index)
    }
}

public struct PACKET_ZC_PERSONAL_INFOMATION_SUB: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (1 + 4 + 4 + 4)
    }
    public var type: Int8 = 0
    public var exp: Int32 = 0
    public var death: Int32 = 0
    public var drop: Int32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        type = try decoder.decode(Int8.self)
        exp = try decoder.decode(Int32.self)
        death = try decoder.decode(Int32.self)
        drop = try decoder.decode(Int32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(type)
        try encoder.encode(exp)
        try encoder.encode(death)
        try encoder.encode(drop)
    }
}

public struct PACKET_ZC_PERSONAL_INFOMATION: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        -1
    }
    public var packetType: Int16 = 0
    public var packetLength: Int16 = 0
    public var total_exp: Int32 = 0
    public var total_death: Int32 = 0
    public var total_drop: Int32 = 0
    public var details: [PACKET_ZC_PERSONAL_INFOMATION_SUB] = []
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        packetLength = try decoder.decode(Int16.self)
        total_exp = try decoder.decode(Int32.self)
        total_death = try decoder.decode(Int32.self)
        total_drop = try decoder.decode(Int32.self)
        details = try decoder.decode([PACKET_ZC_PERSONAL_INFOMATION_SUB].self, count: (Int(packetLength) - (2 + 2 + 4 + 4 + 4)) / (1 + 4 + 4 + 4))
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(packetLength)
        try encoder.encode(total_exp)
        try encoder.encode(total_death)
        try encoder.encode(total_drop)
        try encoder.encode(details)
    }
}

public struct PACKET_CZ_REQUEST_ACTNPC: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 4 + 1)
    }
    public var packetType: Int16 = 0
    public var GID: UInt32 = 0
    public var targetGID: UInt32 = 0
    public var action: Int8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        GID = try decoder.decode(UInt32.self)
        targetGID = try decoder.decode(UInt32.self)
        action = try decoder.decode(Int8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(GID)
        try encoder.encode(targetGID)
        try encoder.encode(action)
    }
}

public struct PACKET_ZC_NOTIFY_SKILL: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2 + 4 + 4 + 4 + 4 + 4 + 4 + 2 + 2 + 1)
    }
    public var packetType: Int16 = 0
    public var SKID: UInt16 = 0
    public var AID: UInt32 = 0
    public var targetID: UInt32 = 0
    public var startTime: UInt32 = 0
    public var attackMT: Int32 = 0
    public var attackedMT: Int32 = 0
    public var damage: Int32 = 0
    public var level: Int16 = 0
    public var count: Int16 = 0
    public var action: Int8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        SKID = try decoder.decode(UInt16.self)
        AID = try decoder.decode(UInt32.self)
        targetID = try decoder.decode(UInt32.self)
        startTime = try decoder.decode(UInt32.self)
        attackMT = try decoder.decode(Int32.self)
        attackedMT = try decoder.decode(Int32.self)
        damage = try decoder.decode(Int32.self)
        level = try decoder.decode(Int16.self)
        count = try decoder.decode(Int16.self)
        action = try decoder.decode(Int8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(SKID)
        try encoder.encode(AID)
        try encoder.encode(targetID)
        try encoder.encode(startTime)
        try encoder.encode(attackMT)
        try encoder.encode(attackedMT)
        try encoder.encode(damage)
        try encoder.encode(level)
        try encoder.encode(count)
        try encoder.encode(action)
    }
}

public struct PACKET_ZC_USE_SKILL: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2 + 4 + 4 + 4 + 1)
    }
    public var packetType: Int16 = 0
    public var SKID: UInt16 = 0
    public var level: Int32 = 0
    public var targetAID: UInt32 = 0
    public var srcAID: UInt32 = 0
    public var result: Int8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        SKID = try decoder.decode(UInt16.self)
        level = try decoder.decode(Int32.self)
        targetAID = try decoder.decode(UInt32.self)
        srcAID = try decoder.decode(UInt32.self)
        result = try decoder.decode(Int8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(SKID)
        try encoder.encode(level)
        try encoder.encode(targetAID)
        try encoder.encode(srcAID)
        try encoder.encode(result)
    }
}

public struct PACKET_ZC_NOTIFY_GROUNDSKILL: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2 + 4 + 2 + 2 + 2 + 4)
    }
    public var packetType: Int16 = 0
    public var SKID: UInt16 = 0
    public var AID: UInt32 = 0
    public var level: Int16 = 0
    public var xPos: Int16 = 0
    public var yPos: Int16 = 0
    public var startTime: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        SKID = try decoder.decode(UInt16.self)
        AID = try decoder.decode(UInt32.self)
        level = try decoder.decode(Int16.self)
        xPos = try decoder.decode(Int16.self)
        yPos = try decoder.decode(Int16.self)
        startTime = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(SKID)
        try encoder.encode(AID)
        try encoder.encode(level)
        try encoder.encode(xPos)
        try encoder.encode(yPos)
        try encoder.encode(startTime)
    }
}

public struct PACKET_ZC_SKILL_POSTDELAY: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2 + 4)
    }
    public var packetType: Int16 = 0
    public var SKID: UInt16 = 0
    public var DelayTM: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        SKID = try decoder.decode(UInt16.self)
        DelayTM = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(SKID)
        try encoder.encode(DelayTM)
    }
}

public struct PACKET_ZC_NOTIFY_SKILL_POSITION: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2 + 4 + 4 + 4 + 4 + 4 + 2 + 2 + 2 + 2 + 2 + 1)
    }
    public var packetType: Int16 = 0
    public var SKID: UInt16 = 0
    public var AID: UInt32 = 0
    public var targetID: UInt32 = 0
    public var startTime: UInt32 = 0
    public var attackMT: Int32 = 0
    public var attackedMT: Int32 = 0
    public var xPos: Int16 = 0
    public var yPos: Int16 = 0
    public var damage: Int16 = 0
    public var level: Int16 = 0
    public var count: Int16 = 0
    public var action: Int8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        SKID = try decoder.decode(UInt16.self)
        AID = try decoder.decode(UInt32.self)
        targetID = try decoder.decode(UInt32.self)
        startTime = try decoder.decode(UInt32.self)
        attackMT = try decoder.decode(Int32.self)
        attackedMT = try decoder.decode(Int32.self)
        xPos = try decoder.decode(Int16.self)
        yPos = try decoder.decode(Int16.self)
        damage = try decoder.decode(Int16.self)
        level = try decoder.decode(Int16.self)
        count = try decoder.decode(Int16.self)
        action = try decoder.decode(Int8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(SKID)
        try encoder.encode(AID)
        try encoder.encode(targetID)
        try encoder.encode(startTime)
        try encoder.encode(attackMT)
        try encoder.encode(attackedMT)
        try encoder.encode(xPos)
        try encoder.encode(yPos)
        try encoder.encode(damage)
        try encoder.encode(level)
        try encoder.encode(count)
        try encoder.encode(action)
    }
}

public struct PACKET_ZC_C_MARKERINFO: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 2 + 2)
    }
    public var packetType: Int16 = 0
    public var AID: UInt32 = 0
    public var xPos: Int16 = 0
    public var yPos: Int16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        AID = try decoder.decode(UInt32.self)
        xPos = try decoder.decode(Int16.self)
        yPos = try decoder.decode(Int16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(AID)
        try encoder.encode(xPos)
        try encoder.encode(yPos)
    }
}

public struct PACKET_ZC_MEMBERMGR_INFO: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        -1
    }
    public var packetType: Int16 = 0
    public var packetLength: Int16 = 0
    public var guildMemberInfo: [GUILD_MEMBER_INFO] = []
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        packetLength = try decoder.decode(Int16.self)
        guildMemberInfo = try decoder.decode([GUILD_MEMBER_INFO].self, count: (Int(packetLength) - (2 + 2)) / (4 + 4 + 2 + 2 + 2 + 2 + 2 + 4 + 4 + 4 + 4 + 24))
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(packetLength)
        try encoder.encode(guildMemberInfo)
    }
}

public struct PACKET_ZC_GUILD_INFO: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4 + 24 + 16 + 4 + 4 + 24)
    }
    public var packetType: Int16 = 0
    public var GDID: Int32 = 0
    public var level: Int32 = 0
    public var userNum: Int32 = 0
    public var maxUserNum: Int32 = 0
    public var userAverageLevel: Int32 = 0
    public var exp: Int32 = 0
    public var maxExp: Int32 = 0
    public var point: Int32 = 0
    public var honor: Int32 = 0
    public var virtue: Int32 = 0
    public var emblemVersion: Int32 = 0
    @FixedLengthString(lengthOfBytes: 24)
    public var guildname: String
    @FixedLengthString(lengthOfBytes: 16)
    public var manageLand: String
    public var zeny: Int32 = 0
    public var masterGID: Int32 = 0
    @FixedLengthString(lengthOfBytes: 24)
    public var masterName: String
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        GDID = try decoder.decode(Int32.self)
        level = try decoder.decode(Int32.self)
        userNum = try decoder.decode(Int32.self)
        maxUserNum = try decoder.decode(Int32.self)
        userAverageLevel = try decoder.decode(Int32.self)
        exp = try decoder.decode(Int32.self)
        maxExp = try decoder.decode(Int32.self)
        point = try decoder.decode(Int32.self)
        honor = try decoder.decode(Int32.self)
        virtue = try decoder.decode(Int32.self)
        emblemVersion = try decoder.decode(Int32.self)
        guildname = try decoder.decode(String.self, lengthOfBytes: 24)
        manageLand = try decoder.decode(String.self, lengthOfBytes: 16)
        zeny = try decoder.decode(Int32.self)
        masterGID = try decoder.decode(Int32.self)
        masterName = try decoder.decode(String.self, lengthOfBytes: 24)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(GDID)
        try encoder.encode(level)
        try encoder.encode(userNum)
        try encoder.encode(maxUserNum)
        try encoder.encode(userAverageLevel)
        try encoder.encode(exp)
        try encoder.encode(maxExp)
        try encoder.encode(point)
        try encoder.encode(honor)
        try encoder.encode(virtue)
        try encoder.encode(emblemVersion)
        try encoder.encode(guildname, lengthOfBytes: 24)
        try encoder.encode(manageLand, lengthOfBytes: 16)
        try encoder.encode(zeny)
        try encoder.encode(masterGID)
        try encoder.encode(masterName, lengthOfBytes: 24)
    }
}

public struct PACKET_ZC_POSITION_ID_NAME_INFO: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2 + ((4 + 24) * 20))
    }
    public var packetType: Int16 = 0
    public var packetLength: Int16 = 0
    @FixedSizeArray(size: 20, initialValue: PACKET_ZC_POSITION_ID_NAME_INFO_sub())
    public var posInfo: [PACKET_ZC_POSITION_ID_NAME_INFO_sub]
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        packetLength = try decoder.decode(Int16.self)
        posInfo = try decoder.decode([PACKET_ZC_POSITION_ID_NAME_INFO_sub].self, count: 20)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(packetLength)
        try encoder.encode(posInfo)
    }
}

public struct PACKET_ZC_POSITION_INFO_sub: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (4 + 4 + 4 + 4)
    }
    public var positionID: Int32 = 0
    public var right: Int32 = 0
    public var ranking: Int32 = 0
    public var payRate: Int32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        positionID = try decoder.decode(Int32.self)
        right = try decoder.decode(Int32.self)
        ranking = try decoder.decode(Int32.self)
        payRate = try decoder.decode(Int32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(positionID)
        try encoder.encode(right)
        try encoder.encode(ranking)
        try encoder.encode(payRate)
    }
}

public struct PACKET_ZC_POSITION_INFO: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        -1
    }
    public var packetType: Int16 = 0
    public var packetLength: Int16 = 0
    public var posInfo: [PACKET_ZC_POSITION_INFO_sub] = []
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        packetLength = try decoder.decode(Int16.self)
        posInfo = try decoder.decode([PACKET_ZC_POSITION_INFO_sub].self, count: (Int(packetLength) - (2 + 2)) / (4 + 4 + 4 + 4))
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(packetLength)
        try encoder.encode(posInfo)
    }
}

public struct PACKET_ZC_GUILD_SKILLINFO: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        -1
    }
    public var packetType: Int16 = 0
    public var packetLength: Int16 = 0
    public var skillPoint: Int16 = 0
    public var skillInfo: [GUILD_SKILLDATA] = []
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        packetLength = try decoder.decode(Int16.self)
        skillPoint = try decoder.decode(Int16.self)
        skillInfo = try decoder.decode([GUILD_SKILLDATA].self, count: (Int(packetLength) - (2 + 2 + 2)) / (2 + 4 + 2 + 2 + 2 + 24 + 1))
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(packetLength)
        try encoder.encode(skillPoint)
        try encoder.encode(skillInfo)
    }
}

public struct PACKET_ZC_MYGUILD_BASIC_INFO: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        -1
    }
    public var packetType: Int16 = 0
    public var packetLength: Int16 = 0
    public var rgInfo: [RELATED_GUILD_INFO] = []
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        packetLength = try decoder.decode(Int16.self)
        rgInfo = try decoder.decode([RELATED_GUILD_INFO].self, count: (Int(packetLength) - (2 + 2)) / (4 + 4 + 24))
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(packetLength)
        try encoder.encode(rgInfo)
    }
}

public struct PACKET_CZ_REQ_UPLOAD_MACRO_DETECTOR: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 16 + 2)
    }
    public var packetType: Int16 = 0
    @FixedLengthString(lengthOfBytes: 16)
    public var answer: String
    public var imageSize: UInt16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        answer = try decoder.decode(String.self, lengthOfBytes: 16)
        imageSize = try decoder.decode(UInt16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(answer, lengthOfBytes: 16)
        try encoder.encode(imageSize)
    }
}

public struct PACKET_ZC_ACK_UPLOAD_MACRO_DETECTOR: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 4)
    }
    public var packetType: Int16 = 0
    @FixedLengthString(lengthOfBytes: 4)
    public var captchaKey: String
    public var captchaFlag: Int32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        captchaKey = try decoder.decode(String.self, lengthOfBytes: 4)
        captchaFlag = try decoder.decode(Int32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(captchaKey, lengthOfBytes: 4)
        try encoder.encode(captchaFlag)
    }
}

public struct PACKET_CZ_UPLOAD_MACRO_DETECTOR_CAPTCHA: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        -1
    }
    public var packetType: Int16 = 0
    public var packetLength: Int16 = 0
    @FixedLengthString(lengthOfBytes: 4)
    public var captchaKey: String
    public var imageData: String = ""
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        packetLength = try decoder.decode(Int16.self)
        captchaKey = try decoder.decode(String.self, lengthOfBytes: 4)
        imageData = try decoder.decode(String.self, lengthOfBytes: (Int(packetLength) - (2 + 2 + 4)))
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(packetLength)
        try encoder.encode(captchaKey, lengthOfBytes: 4)
        try encoder.encode(imageData)
    }
}

public struct PACKET_ZC_COMPLETE_UPLOAD_MACRO_DETECTOR_CAPTCHA: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2)
    }
    public var packetType: Int16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
    }
}

public struct PACKET_CZ_REQ_APPLY_MACRO_DETECTOR: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4)
    }
    public var packetType: Int16 = 0
    public var AID: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        AID = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(AID)
    }
}

public struct PACKET_ZC_ACK_APPLY_MACRO_DETECTOR: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4)
    }
    public var packetType: Int16 = 0
    public var status: Int32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        status = try decoder.decode(Int32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(status)
    }
}

public struct PACKET_ZC_APPLY_MACRO_DETECTOR: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2 + 4)
    }
    public var packetType: Int16 = 0
    public var imageSize: UInt16 = 0
    @FixedLengthString(lengthOfBytes: 4)
    public var captchaKey: String
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        imageSize = try decoder.decode(UInt16.self)
        captchaKey = try decoder.decode(String.self, lengthOfBytes: 4)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(imageSize)
        try encoder.encode(captchaKey, lengthOfBytes: 4)
    }
}

public struct PACKET_ZC_APPLY_MACRO_DETECTOR_CAPTCHA: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        -1
    }
    public var packetType: Int16 = 0
    public var packetLength: Int16 = 0
    @FixedLengthString(lengthOfBytes: 4)
    public var captchaKey: String
    public var imageData: String = ""
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        packetLength = try decoder.decode(Int16.self)
        captchaKey = try decoder.decode(String.self, lengthOfBytes: 4)
        imageData = try decoder.decode(String.self, lengthOfBytes: (Int(packetLength) - (2 + 2 + 4)))
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(packetLength)
        try encoder.encode(captchaKey, lengthOfBytes: 4)
        try encoder.encode(imageData)
    }
}

public struct PACKET_CZ_COMPLETE_APPLY_MACRO_DETECTOR_CAPTCHA: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2)
    }
    public var packetType: Int16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
    }
}

public struct PACKET_ZC_REQ_ANSWER_MACRO_DETECTOR: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 1 + 4)
    }
    public var packetType: Int16 = 0
    public var retryCount: UInt8 = 0
    public var timeout: Int32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        retryCount = try decoder.decode(UInt8.self)
        timeout = try decoder.decode(Int32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(retryCount)
        try encoder.encode(timeout)
    }
}

public struct PACKET_CZ_ACK_ANSWER_MACRO_DETECTOR: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 16)
    }
    public var packetType: Int16 = 0
    @FixedLengthString(lengthOfBytes: 16)
    public var answer: String
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        answer = try decoder.decode(String.self, lengthOfBytes: 16)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(answer, lengthOfBytes: 16)
    }
}

public struct PACKET_ZC_CLOSE_MACRO_DETECTOR: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4)
    }
    public var packetType: Int16 = 0
    public var status: Int32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        status = try decoder.decode(Int32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(status)
    }
}

public struct PACKET_CZ_REQ_PREVIEW_MACRO_DETECTOR: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4)
    }
    public var packetType: Int16 = 0
    public var captchaID: Int32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        captchaID = try decoder.decode(Int32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(captchaID)
    }
}

public struct PACKET_ZC_ACK_PREVIEW_MACRO_DETECTOR: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 2 + 4)
    }
    public var packetType: Int16 = 0
    public var captchaFlag: Int32 = 0
    public var imageSize: UInt16 = 0
    @FixedLengthString(lengthOfBytes: 4)
    public var captchaKey: String
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        captchaFlag = try decoder.decode(Int32.self)
        imageSize = try decoder.decode(UInt16.self)
        captchaKey = try decoder.decode(String.self, lengthOfBytes: 4)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(captchaFlag)
        try encoder.encode(imageSize)
        try encoder.encode(captchaKey, lengthOfBytes: 4)
    }
}

public struct PACKET_ZC_PREVIEW_MACRO_DETECTOR_CAPTCHA: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        -1
    }
    public var packetType: Int16 = 0
    public var packetLength: Int16 = 0
    @FixedLengthString(lengthOfBytes: 4)
    public var captchaKey: String
    public var imageData: String = ""
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        packetLength = try decoder.decode(Int16.self)
        captchaKey = try decoder.decode(String.self, lengthOfBytes: 4)
        imageData = try decoder.decode(String.self, lengthOfBytes: (Int(packetLength) - (2 + 2 + 4)))
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(packetLength)
        try encoder.encode(captchaKey, lengthOfBytes: 4)
        try encoder.encode(imageData)
    }
}

public struct PACKET_CZ_REQ_PLAYER_AID_IN_RANGE: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2 + 2 + 1)
    }
    public var packetType: Int16 = 0
    public var xPos: Int16 = 0
    public var yPos: Int16 = 0
    public var RadiusRange: Int8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        xPos = try decoder.decode(Int16.self)
        yPos = try decoder.decode(Int16.self)
        RadiusRange = try decoder.decode(Int8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(xPos)
        try encoder.encode(yPos)
        try encoder.encode(RadiusRange)
    }
}

public struct PACKET_ZC_ACK_PLAYER_AID_IN_RANGE: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        -1
    }
    public var packetType: Int16 = 0
    public var packetLength: Int16 = 0
    public var AID: [UInt32] = []
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        packetLength = try decoder.decode(Int16.self)
        AID = try decoder.decode([UInt32].self, count: (Int(packetLength) - (2 + 2)) / 4)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(packetLength)
        try encoder.encode(AID)
    }
}

public struct PACKET_ZC_ACK_MAKE_GROUP: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 1)
    }
    public var packetType: Int16 = 0
    public var result: Int8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        result = try decoder.decode(Int8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(result)
    }
}

public struct PACKET_ZC_PARTY_JOIN_REQ: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 24)
    }
    public var packetType: Int16 = 0
    public var GRID: Int32 = 0
    @FixedLengthString(lengthOfBytes: 24)
    public var groupName: String
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        GRID = try decoder.decode(Int32.self)
        groupName = try decoder.decode(String.self, lengthOfBytes: 24)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(GRID)
        try encoder.encode(groupName, lengthOfBytes: 24)
    }
}

public struct PACKET_ZC_PARTY_JOIN_REQ_ACK: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 24 + 4)
    }
    public var packetType: Int16 = 0
    @FixedLengthString(lengthOfBytes: 24)
    public var characterName: String
    public var result: Int32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        characterName = try decoder.decode(String.self, lengthOfBytes: 24)
        result = try decoder.decode(Int32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(characterName, lengthOfBytes: 24)
        try encoder.encode(result)
    }
}

public struct PACKET_ZC_NOTIFY_CHAT_PARTY: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        -1
    }
    public var packetType: Int16 = 0
    public var packetLength: Int16 = 0
    public var AID: Int32 = 0
    public var chatMsg: String = ""
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        packetLength = try decoder.decode(Int16.self)
        AID = try decoder.decode(Int32.self)
        chatMsg = try decoder.decode(String.self, lengthOfBytes: (Int(packetLength) - (2 + 2 + 4)))
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(packetLength)
        try encoder.encode(AID)
        try encoder.encode(chatMsg)
    }
}

public struct PACKET_ZC_NOTIFY_POSITION_TO_GROUPM: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 2 + 2)
    }
    public var packetType: Int16 = 0
    public var AID: Int32 = 0
    public var xPos: Int16 = 0
    public var yPos: Int16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        AID = try decoder.decode(Int32.self)
        xPos = try decoder.decode(Int16.self)
        yPos = try decoder.decode(Int16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(AID)
        try encoder.encode(xPos)
        try encoder.encode(yPos)
    }
}

public struct PACKET_ZC_NOTIFY_HP_TO_GROUPM: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 4 + 4)
    }
    public var packetType: Int16 = 0
    public var AID: UInt32 = 0
    public var hp: Int32 = 0
    public var maxhp: Int32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        AID = try decoder.decode(UInt32.self)
        hp = try decoder.decode(Int32.self)
        maxhp = try decoder.decode(Int32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(AID)
        try encoder.encode(hp)
        try encoder.encode(maxhp)
    }
}

public struct PACKET_ZC_NOTIFY_MEMBERINFO_TO_GROUPM: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 2 + 2)
    }
    public var packetType: Int16 = 0
    public var AID: Int32 = 0
    public var job: Int16 = 0
    public var level: Int16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        AID = try decoder.decode(Int32.self)
        job = try decoder.decode(Int16.self)
        level = try decoder.decode(Int16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(AID)
        try encoder.encode(job)
        try encoder.encode(level)
    }
}

public struct PACKET_ZC_DELETE_MEMBER_FROM_GROUP: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 24 + 1)
    }
    public var packetType: Int16 = 0
    public var AID: Int32 = 0
    @FixedLengthString(lengthOfBytes: 24)
    public var characterName: String
    public var result: Int8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        AID = try decoder.decode(Int32.self)
        characterName = try decoder.decode(String.self, lengthOfBytes: 24)
        result = try decoder.decode(Int8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(AID)
        try encoder.encode(characterName, lengthOfBytes: 24)
        try encoder.encode(result)
    }
}

public struct PACKET_CZ_REQ_TAKEOFF_EQUIP_ALL: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2)
    }
    public var packetType: Int16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
    }
}

public struct PACKET_ZC_ACK_TAKEOFF_EQUIP_ALL: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 1)
    }
    public var packetType: Int16 = 0
    public var result: UInt8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        result = try decoder.decode(UInt8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(result)
    }
}

public struct PACKET_ZC_BATTLEFIELD_NOTIFY_HP: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 4 + 4)
    }
    public var packetType: Int16 = 0
    public var AID: UInt32 = 0
    public var hp: Int32 = 0
    public var maxhp: Int32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        AID = try decoder.decode(UInt32.self)
        hp = try decoder.decode(Int32.self)
        maxhp = try decoder.decode(Int32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(AID)
        try encoder.encode(hp)
        try encoder.encode(maxhp)
    }
}

public struct PACKET_CZ_CHOOSE_MENU_ZERO: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 1)
    }
    public var packetType: Int16 = 0
    public var NpcID: UInt32 = 0
    public var menuIndex: UInt8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        NpcID = try decoder.decode(UInt32.self)
        menuIndex = try decoder.decode(UInt8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(NpcID)
        try encoder.encode(menuIndex)
    }
}

public struct PACKET_ZC_DIALOG_TEXT_ALIGN: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 1)
    }
    public var packetType: Int16 = 0
    public var align: UInt8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        align = try decoder.decode(UInt8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(align)
    }
}

public struct PACKET_CZ_GRADE_ENCHANT_SELECT_EQUIPMENT: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2)
    }
    public var packetType: Int16 = 0
    public var index: Int16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        index = try decoder.decode(Int16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(index)
    }
}

public struct PACKET_ZC_GRADE_ENCHANT_MATERIAL_LIST: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        -1
    }
    public var packetType: Int16 = 0
    public var packetLength: Int16 = 0
    public var index: Int16 = 0
    public var success_chance: Int32 = 0
    public var blessing_info: GRADE_ENCHANT_BLESSING = GRADE_ENCHANT_BLESSING()
    public var protect_itemid: Int32 = 0
    public var protect_amount: Int32 = 0
    public var material_info: [GRADE_ENCHANT_MATERIAL] = []
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        packetLength = try decoder.decode(Int16.self)
        index = try decoder.decode(Int16.self)
        success_chance = try decoder.decode(Int32.self)
        blessing_info = try decoder.decode(GRADE_ENCHANT_BLESSING.self)
        protect_itemid = try decoder.decode(Int32.self)
        protect_amount = try decoder.decode(Int32.self)
        material_info = try decoder.decode([GRADE_ENCHANT_MATERIAL].self, count: (Int(packetLength) - (2 + 2 + 2 + 4 + (4 + 4 + 4 + 4) + 4 + 4)) / (4 + 4 + 4 + 4 + 1))
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(packetLength)
        try encoder.encode(index)
        try encoder.encode(success_chance)
        try encoder.encode(blessing_info)
        try encoder.encode(protect_itemid)
        try encoder.encode(protect_amount)
        try encoder.encode(material_info)
    }
}

public struct PACKET_CZ_GRADE_ENCHANT_REQUEST: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2 + 4 + 1 + 4 + 1)
    }
    public var packetType: Int16 = 0
    public var index: Int16 = 0
    public var material_index: Int32 = 0
    public var blessing_flag: Int8 = 0
    public var blessing_amount: Int32 = 0
    public var protect_flag: Int8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        index = try decoder.decode(Int16.self)
        material_index = try decoder.decode(Int32.self)
        blessing_flag = try decoder.decode(Int8.self)
        blessing_amount = try decoder.decode(Int32.self)
        protect_flag = try decoder.decode(Int8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(index)
        try encoder.encode(material_index)
        try encoder.encode(blessing_flag)
        try encoder.encode(blessing_amount)
        try encoder.encode(protect_flag)
    }
}

public struct PACKET_CZ_GRADE_ENCHANT_CLOSE_UI: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2)
    }
    public var packetType: Int16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
    }
}

public struct PACKET_ZC_GRADE_ENCHANT_ACK: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2 + 2 + 4)
    }
    public var packetType: Int16 = 0
    public var index: Int16 = 0
    public var grade: Int16 = 0
    public var result: Int32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        index = try decoder.decode(Int16.self)
        grade = try decoder.decode(Int16.self)
        result = try decoder.decode(Int32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(index)
        try encoder.encode(grade)
        try encoder.encode(result)
    }
}

public struct PACKET_ZC_GRADE_ENCHANT_BROADCAST_RESULT: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 24 + 4 + 2 + 1)
    }
    public var packetType: Int16 = 0
    @FixedLengthString(lengthOfBytes: 24)
    public var name: String
    public var itemId: UInt32 = 0
    public var grade: Int16 = 0
    public var status: Int8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        name = try decoder.decode(String.self, lengthOfBytes: 24)
        itemId = try decoder.decode(UInt32.self)
        grade = try decoder.decode(Int16.self)
        status = try decoder.decode(Int8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(name, lengthOfBytes: 24)
        try encoder.encode(itemId)
        try encoder.encode(grade)
        try encoder.encode(status)
    }
}

public struct PACKET_ZC_SHOW_IMAGE: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 64 + 1)
    }
    public var packetType: Int16 = 0
    @FixedLengthString(lengthOfBytes: 64)
    public var image: String
    public var type: UInt8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        image = try decoder.decode(String.self, lengthOfBytes: 64)
        type = try decoder.decode(UInt8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(image, lengthOfBytes: 64)
        try encoder.encode(type)
    }
}

public struct PACKET_ZC_WHISPER: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        -1
    }
    public var packetType: Int16 = 0
    public var packetLength: Int16 = 0
    public var senderGID: UInt32 = 0
    @FixedLengthString(lengthOfBytes: 24)
    public var sender: String
    public var isAdmin: UInt8 = 0
    public var message: String = ""
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        packetLength = try decoder.decode(Int16.self)
        senderGID = try decoder.decode(UInt32.self)
        sender = try decoder.decode(String.self, lengthOfBytes: 24)
        isAdmin = try decoder.decode(UInt8.self)
        message = try decoder.decode(String.self, lengthOfBytes: (Int(packetLength) - (2 + 2 + 4 + 24 + 1)))
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(packetLength)
        try encoder.encode(senderGID)
        try encoder.encode(sender, lengthOfBytes: 24)
        try encoder.encode(isAdmin)
        try encoder.encode(message)
    }
}

public struct PACKET_ZC_UPDATE_GDID: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 4 + 4 + 1 + 4 + 24)
    }
    public var packetType: Int16 = 0
    public var guildId: UInt32 = 0
    public var emblemVersion: Int32 = 0
    public var mode: UInt32 = 0
    public var isMaster: UInt8 = 0
    public var interSid: Int32 = 0
    @FixedLengthString(lengthOfBytes: 24)
    public var guildName: String
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        guildId = try decoder.decode(UInt32.self)
        emblemVersion = try decoder.decode(Int32.self)
        mode = try decoder.decode(UInt32.self)
        isMaster = try decoder.decode(UInt8.self)
        interSid = try decoder.decode(Int32.self)
        guildName = try decoder.decode(String.self, lengthOfBytes: 24)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(guildId)
        try encoder.encode(emblemVersion)
        try encoder.encode(mode)
        try encoder.encode(isMaster)
        try encoder.encode(interSid)
        try encoder.encode(guildName, lengthOfBytes: 24)
    }
}

public struct PACKET_CZ_CONTACTNPC: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 1)
    }
    public var packetType: Int16 = 0
    public var AID: UInt32 = 0
    public var type: UInt8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        AID = try decoder.decode(UInt32.self)
        type = try decoder.decode(UInt8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(AID)
        try encoder.encode(type)
    }
}

public struct PACKET_ZC_ATTACK_FAILURE_FOR_DISTANCE: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 2 + 2 + 2 + 2 + 2)
    }
    public var packetType: Int16 = 0
    public var targetAID: UInt32 = 0
    public var targetXPos: Int16 = 0
    public var targetYPos: Int16 = 0
    public var xPos: Int16 = 0
    public var yPos: Int16 = 0
    public var currentAttRange: Int16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        targetAID = try decoder.decode(UInt32.self)
        targetXPos = try decoder.decode(Int16.self)
        targetYPos = try decoder.decode(Int16.self)
        xPos = try decoder.decode(Int16.self)
        yPos = try decoder.decode(Int16.self)
        currentAttRange = try decoder.decode(Int16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(targetAID)
        try encoder.encode(targetXPos)
        try encoder.encode(targetYPos)
        try encoder.encode(xPos)
        try encoder.encode(yPos)
        try encoder.encode(currentAttRange)
    }
}

public struct PACKET_ZC_START_CAPTURE: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2)
    }
    public var packetType: Int16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
    }
}

public struct PACKET_ZC_TRYCAPTURE_MONSTER: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 1)
    }
    public var packetType: Int16 = 0
    public var result: Int8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        result = try decoder.decode(Int8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(result)
    }
}

public struct PACKET_ZC_PROPERTY_PET: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 24 + 1 + 2 + 2 + 2 + 2 + 2)
    }
    public var packetType: Int16 = 0
    @FixedLengthString(lengthOfBytes: 24)
    public var szName: String
    public var bModified: Int8 = 0
    public var nLevel: Int16 = 0
    public var nFullness: Int16 = 0
    public var nRelationship: Int16 = 0
    public var ITID: Int16 = 0
    public var job: Int16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        szName = try decoder.decode(String.self, lengthOfBytes: 24)
        bModified = try decoder.decode(Int8.self)
        nLevel = try decoder.decode(Int16.self)
        nFullness = try decoder.decode(Int16.self)
        nRelationship = try decoder.decode(Int16.self)
        ITID = try decoder.decode(Int16.self)
        job = try decoder.decode(Int16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(szName, lengthOfBytes: 24)
        try encoder.encode(bModified)
        try encoder.encode(nLevel)
        try encoder.encode(nFullness)
        try encoder.encode(nRelationship)
        try encoder.encode(ITID)
        try encoder.encode(job)
    }
}

public struct PACKET_ZC_CHANGESTATE_PET: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 1 + 4 + 4)
    }
    public var packetType: Int16 = 0
    public var type: Int8 = 0
    public var GID: Int32 = 0
    public var data: Int32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        type = try decoder.decode(Int8.self)
        GID = try decoder.decode(Int32.self)
        data = try decoder.decode(Int32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(type)
        try encoder.encode(GID)
        try encoder.encode(data)
    }
}

public struct PACKET_ZC_SPIRITS: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 2)
    }
    public var packetType: Int16 = 0
    public var AID: UInt32 = 0
    public var num: Int16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        AID = try decoder.decode(UInt32.self)
        num = try decoder.decode(Int16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(AID)
        try encoder.encode(num)
    }
}

public struct PACKET_ZC_SPIRITS2: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 2)
    }
    public var packetType: Int16 = 0
    public var AID: UInt32 = 0
    public var num: Int16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        AID = try decoder.decode(UInt32.self)
        num = try decoder.decode(Int16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(AID)
        try encoder.encode(num)
    }
}

public struct PACKET_ZC_SOULENERGY: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 2)
    }
    public var packetType: Int16 = 0
    public var AID: UInt32 = 0
    public var num: UInt16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        AID = try decoder.decode(UInt32.self)
        num = try decoder.decode(UInt16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(AID)
        try encoder.encode(num)
    }
}

public struct PACKET_ZC_SAY_DIALOG: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        -1
    }
    public var packetType: Int16 = 0
    public var packetLength: Int16 = 0
    public var NpcID: UInt32 = 0
    public var message: String = ""
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        packetLength = try decoder.decode(Int16.self)
        NpcID = try decoder.decode(UInt32.self)
        message = try decoder.decode(String.self, lengthOfBytes: (Int(packetLength) - (2 + 2 + 4)))
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(packetLength)
        try encoder.encode(NpcID)
        try encoder.encode(message)
    }
}

public struct PACKET_ZC_SAY_DIALOG2: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        -1
    }
    public var packetType: Int16 = 0
    public var packetLength: Int16 = 0
    public var NpcID: UInt32 = 0
    public var message: String = ""
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        packetLength = try decoder.decode(Int16.self)
        NpcID = try decoder.decode(UInt32.self)
        message = try decoder.decode(String.self, lengthOfBytes: (Int(packetLength) - (2 + 2 + 4)))
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(packetLength)
        try encoder.encode(NpcID)
        try encoder.encode(message)
    }
}

public struct PACKET_ZC_WAIT_DIALOG: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4)
    }
    public var packetType: Int16 = 0
    public var NpcID: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        NpcID = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(NpcID)
    }
}

public struct PACKET_ZC_WAIT_DIALOG2: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4)
    }
    public var packetType: Int16 = 0
    public var NpcID: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        NpcID = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(NpcID)
    }
}

public struct PACKET_ZC_PLAY_NPC_BGM: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 24)
    }
    public var packetType: Int16 = 0
    @FixedLengthString(lengthOfBytes: 24)
    public var bgm: String
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        bgm = try decoder.decode(String.self, lengthOfBytes: 24)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(bgm, lengthOfBytes: 24)
    }
}

public struct PACKET_CZ_MOVE_ITEM_FROM_BODY_TO_CART: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2 + 4)
    }
    public var packetType: Int16 = 0
    public var index: Int16 = 0
    public var count: Int32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        index = try decoder.decode(Int16.self)
        count = try decoder.decode(Int32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(index)
        try encoder.encode(count)
    }
}

public struct PACKET_ZC_SOUND: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 24 + 1 + 4 + 4)
    }
    public var packetType: Int16 = 0
    @FixedLengthString(lengthOfBytes: 24)
    public var name: String
    public var act: UInt8 = 0
    public var term: UInt32 = 0
    public var AID: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        name = try decoder.decode(String.self, lengthOfBytes: 24)
        act = try decoder.decode(UInt8.self)
        term = try decoder.decode(UInt32.self)
        AID = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(name, lengthOfBytes: 24)
        try encoder.encode(act)
        try encoder.encode(term)
        try encoder.encode(AID)
    }
}

public struct PACKET_ZC_BUYING_STORE_ENTRY: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 80)
    }
    public var packetType: Int16 = 0
    public var makerAID: UInt32 = 0
    @FixedLengthString(lengthOfBytes: 80)
    public var storeName: String
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        makerAID = try decoder.decode(UInt32.self)
        storeName = try decoder.decode(String.self, lengthOfBytes: 80)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(makerAID)
        try encoder.encode(storeName, lengthOfBytes: 80)
    }
}

public struct PACKET_ZC_STORE_ENTRY: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 80)
    }
    public var packetType: Int16 = 0
    public var makerAID: UInt32 = 0
    @FixedLengthString(lengthOfBytes: 80)
    public var storeName: String
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        makerAID = try decoder.decode(UInt32.self)
        storeName = try decoder.decode(String.self, lengthOfBytes: 80)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(makerAID)
        try encoder.encode(storeName, lengthOfBytes: 80)
    }
}

public struct PACKET_CZ_PC_PURCHASE_ITEMLIST_FROMMC: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        -1
    }
    public var packetType: Int16 = 0
    public var packetLength: Int16 = 0
    public var AID: UInt32 = 0
    public var list: [CZ_PURCHASE_ITEM_FROMMC] = []
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        packetLength = try decoder.decode(Int16.self)
        AID = try decoder.decode(UInt32.self)
        list = try decoder.decode([CZ_PURCHASE_ITEM_FROMMC].self, count: (Int(packetLength) - (2 + 2 + 4)) / (2 + 2))
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(packetLength)
        try encoder.encode(AID)
        try encoder.encode(list)
    }
}

public struct PACKET_CZ_PC_PURCHASE_ITEMLIST_FROMMC2: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        -1
    }
    public var packetType: Int16 = 0
    public var packetLength: Int16 = 0
    public var AID: UInt32 = 0
    public var UniqueID: UInt32 = 0
    public var list: [CZ_PURCHASE_ITEM_FROMMC] = []
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        packetLength = try decoder.decode(Int16.self)
        AID = try decoder.decode(UInt32.self)
        UniqueID = try decoder.decode(UInt32.self)
        list = try decoder.decode([CZ_PURCHASE_ITEM_FROMMC].self, count: (Int(packetLength) - (2 + 2 + 4 + 4)) / (2 + 2))
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(packetLength)
        try encoder.encode(AID)
        try encoder.encode(UniqueID)
        try encoder.encode(list)
    }
}

public struct PACKET_ZC_DISAPPEAR_BUYING_STORE_ENTRY: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4)
    }
    public var packetType: Int16 = 0
    public var makerAID: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        makerAID = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(makerAID)
    }
}

public struct PACKET_ZC_OPEN_REFORM_UI: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4)
    }
    public var packetType: Int16 = 0
    public var ITID: Int32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        ITID = try decoder.decode(Int32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(ITID)
    }
}

public struct PACKET_CZ_CLOSE_REFORM_UI: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2)
    }
    public var packetType: Int16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
    }
}

public struct PACKET_CZ_ITEM_REFORM: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 2)
    }
    public var packetType: Int16 = 0
    public var ITID: Int32 = 0
    public var index: Int16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        ITID = try decoder.decode(Int32.self)
        index = try decoder.decode(Int16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(ITID)
        try encoder.encode(index)
    }
}

public struct PACKET_ZC_ITEM_REFORM_ACK: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2 + 1)
    }
    public var packetType: Int16 = 0
    public var index: Int16 = 0
    public var result: Int8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        index = try decoder.decode(Int16.self)
        result = try decoder.decode(Int8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(index)
        try encoder.encode(result)
    }
}

public struct PACKET_CZ_REQUEST_RANDOM_ENCHANT: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 8 + 2)
    }
    public var packetType: Int16 = 0
    public var enchant_group: Int64 = 0
    public var index: Int16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        enchant_group = try decoder.decode(Int64.self)
        index = try decoder.decode(Int16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(enchant_group)
        try encoder.encode(index)
    }
}

public struct PACKET_CZ_REQUEST_PERFECT_ENCHANT: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 8 + 2 + 4)
    }
    public var packetType: Int16 = 0
    public var enchant_group: Int64 = 0
    public var index: Int16 = 0
    public var ITID: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        enchant_group = try decoder.decode(Int64.self)
        index = try decoder.decode(Int16.self)
        ITID = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(enchant_group)
        try encoder.encode(index)
        try encoder.encode(ITID)
    }
}

public struct PACKET_CZ_REQUEST_UPGRADE_ENCHANT: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 8 + 2 + 2)
    }
    public var packetType: Int16 = 0
    public var enchant_group: Int64 = 0
    public var index: Int16 = 0
    public var slot: Int16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        enchant_group = try decoder.decode(Int64.self)
        index = try decoder.decode(Int16.self)
        slot = try decoder.decode(Int16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(enchant_group)
        try encoder.encode(index)
        try encoder.encode(slot)
    }
}

public struct PACKET_CZ_REQUEST_RESET_ENCHANT: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 8 + 2)
    }
    public var packetType: Int16 = 0
    public var enchant_group: Int64 = 0
    public var index: Int16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        enchant_group = try decoder.decode(Int64.self)
        index = try decoder.decode(Int16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(enchant_group)
        try encoder.encode(index)
    }
}

public struct PACKET_ZC_RESPONSE_ENCHANT: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 4)
    }
    public var packetType: Int16 = 0
    public var msgId: Int32 = 0
    public var ITID: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        msgId = try decoder.decode(Int32.self)
        ITID = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(msgId)
        try encoder.encode(ITID)
    }
}

public struct PACKET_CZ_CLOSE_UI_ENCHANT: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2)
    }
    public var packetType: Int16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
    }
}

public struct PACKET_ZC_GOLDPCCAFE_POINT: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 1 + 1 + 4 + 4)
    }
    public var packetType: Int16 = 0
    public var isActive: Int8 = 0
    public var mode: Int8 = 0
    public var point: Int32 = 0
    public var playedTime: Int32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        isActive = try decoder.decode(Int8.self)
        mode = try decoder.decode(Int8.self)
        point = try decoder.decode(Int32.self)
        playedTime = try decoder.decode(Int32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(isActive)
        try encoder.encode(mode)
        try encoder.encode(point)
        try encoder.encode(playedTime)
    }
}

public struct PACKET_CZ_DYNAMICNPC_CREATE_REQUEST: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 24)
    }
    public var packetType: Int16 = 0
    @FixedLengthString(lengthOfBytes: 24)
    public var name: String
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        name = try decoder.decode(String.self, lengthOfBytes: 24)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(name, lengthOfBytes: 24)
    }
}

public struct PACKET_ZC_DYNAMICNPC_CREATE_RESULT: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4)
    }
    public var packetType: Int16 = 0
    public var result: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        result = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(result)
    }
}

public struct PACKET_CZ_REQ_GUILD_EMBLEM_IMG1: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4)
    }
    public var packetType: Int16 = 0
    public var guild_id: Int32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        guild_id = try decoder.decode(Int32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(guild_id)
    }
}

public struct PACKET_CZ_REQ_GUILD_EMBLEM_IMG3: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 4)
    }
    public var packetType: Int16 = 0
    public var guild_id: Int32 = 0
    public var emblem_id: Int32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        guild_id = try decoder.decode(Int32.self)
        emblem_id = try decoder.decode(Int32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(guild_id)
        try encoder.encode(emblem_id)
    }
}

public struct PACKET_CZ_REQ_GUILD_EMBLEM_IMG2: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 4 + 4)
    }
    public var packetType: Int16 = 0
    public var guild_id: Int32 = 0
    public var emblem_id: Int32 = 0
    public var unused: Int32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        guild_id = try decoder.decode(Int32.self)
        emblem_id = try decoder.decode(Int32.self)
        unused = try decoder.decode(Int32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(guild_id)
        try encoder.encode(emblem_id)
        try encoder.encode(unused)
    }
}

public struct PACKET_ZC_CHANGE_GUILD: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 4 + 4)
    }
    public var packetType: Int16 = 0
    public var guild_id: Int32 = 0
    public var emblem_id: UInt32 = 0
    public var AID: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        guild_id = try decoder.decode(Int32.self)
        emblem_id = try decoder.decode(UInt32.self)
        AID = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(guild_id)
        try encoder.encode(emblem_id)
        try encoder.encode(AID)
    }
}

public struct PACKET_ZC_GUILD_EMBLEM_IMG: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        -1
    }
    public var packetType: Int16 = 0
    public var packetLength: Int16 = 0
    public var result: UInt16 = 0
    public var guild_id: Int32 = 0
    public var emblem_id: UInt32 = 0
    public var emblem_data: String = ""
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        packetLength = try decoder.decode(Int16.self)
        result = try decoder.decode(UInt16.self)
        guild_id = try decoder.decode(Int32.self)
        emblem_id = try decoder.decode(UInt32.self)
        emblem_data = try decoder.decode(String.self, lengthOfBytes: (Int(packetLength) - (2 + 2 + 2 + 4 + 4)))
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(packetLength)
        try encoder.encode(result)
        try encoder.encode(guild_id)
        try encoder.encode(emblem_id)
        try encoder.encode(emblem_data)
    }
}

public struct PACKET_CZ_ADVENTURER_AGENCY_JOIN_REQ: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 4)
    }
    public var packetType: Int16 = 0
    public var GID: Int32 = 0
    public var AID: Int32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        GID = try decoder.decode(Int32.self)
        AID = try decoder.decode(Int32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(GID)
        try encoder.encode(AID)
    }
}

public struct PACKET_ZC_ADVENTURER_AGENCY_JOIN_RESULT: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 24 + 24 + 4 + 4)
    }
    public var packetType: Int16 = 0
    @FixedLengthString(lengthOfBytes: 24)
    public var player_name: String
    @FixedLengthString(lengthOfBytes: 24)
    public var party_name: String
    public var AID: Int32 = 0
    public var result: Int32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        player_name = try decoder.decode(String.self, lengthOfBytes: 24)
        party_name = try decoder.decode(String.self, lengthOfBytes: 24)
        AID = try decoder.decode(Int32.self)
        result = try decoder.decode(Int32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(player_name, lengthOfBytes: 24)
        try encoder.encode(party_name, lengthOfBytes: 24)
        try encoder.encode(AID)
        try encoder.encode(result)
    }
}

public struct PACKET_ZC_ADVENTURER_AGENCY_JOIN_REQ: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 4 + 24 + 2 + 2)
    }
    public var packetType: Int16 = 0
    public var GRID: Int32 = 0
    public var AID: Int32 = 0
    @FixedLengthString(lengthOfBytes: 24)
    public var groupName: String
    public var level: Int16 = 0
    public var job: Int16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        GRID = try decoder.decode(Int32.self)
        AID = try decoder.decode(Int32.self)
        groupName = try decoder.decode(String.self, lengthOfBytes: 24)
        level = try decoder.decode(Int16.self)
        job = try decoder.decode(Int16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(GRID)
        try encoder.encode(AID)
        try encoder.encode(groupName, lengthOfBytes: 24)
        try encoder.encode(level)
        try encoder.encode(job)
    }
}

public struct PACKET_CZ_ADVENTURER_AGENCY_JOIN_RESULT: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 4 + 1)
    }
    public var packetType: Int16 = 0
    public var GRID: Int32 = 0
    public var AID: Int32 = 0
    public var result: Int8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        GRID = try decoder.decode(Int32.self)
        AID = try decoder.decode(Int32.self)
        result = try decoder.decode(Int8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(GRID)
        try encoder.encode(AID)
        try encoder.encode(result)
    }
}

public struct PACKET_ZC_USER_COUNT: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4)
    }
    public var packetType: Int16 = 0
    public var playersCount: Int32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        playersCount = try decoder.decode(Int32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(playersCount)
    }
}

public struct PACKET_ZC_PC_PURCHASE_RESULT: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 1)
    }
    public var packetType: Int16 = 0
    public var result: UInt8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        result = try decoder.decode(UInt8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(result)
    }
}

public struct PACKET_CZ_REQ_MAKINGARROW: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4)
    }
    public var packetType: Int16 = 0
    public var itemId: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        itemId = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(itemId)
    }
}

public struct PACKET_CZ_SE_PC_BUY_CASHITEM_LIST_sub: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (4 + 4 + 2)
    }
    public var itemId: UInt32 = 0
    public var amount: UInt32 = 0
    public var tab: UInt16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        itemId = try decoder.decode(UInt32.self)
        amount = try decoder.decode(UInt32.self)
        tab = try decoder.decode(UInt16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(itemId)
        try encoder.encode(amount)
        try encoder.encode(tab)
    }
}

public struct PACKET_CZ_SE_PC_BUY_CASHITEM_LIST: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        -1
    }
    public var packetType: Int16 = 0
    public var packetLength: Int16 = 0
    public var count: UInt16 = 0
    public var kafraPoints: UInt32 = 0
    public var items: [PACKET_CZ_SE_PC_BUY_CASHITEM_LIST_sub] = []
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        packetLength = try decoder.decode(Int16.self)
        count = try decoder.decode(UInt16.self)
        kafraPoints = try decoder.decode(UInt32.self)
        items = try decoder.decode([PACKET_CZ_SE_PC_BUY_CASHITEM_LIST_sub].self, count: (Int(packetLength) - (2 + 2 + 2 + 4)) / (4 + 4 + 2))
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(packetLength)
        try encoder.encode(count)
        try encoder.encode(kafraPoints)
        try encoder.encode(items)
    }
}

public struct PACKET_CZ_REQ_CASH_BARGAIN_SALE_ITEM_INFO: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2 + 4 + 4)
    }
    public var packetType: Int16 = 0
    public var packetLength: Int16 = 0
    public var AID: UInt32 = 0
    public var itemId: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        packetLength = try decoder.decode(Int16.self)
        AID = try decoder.decode(UInt32.self)
        itemId = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(packetLength)
        try encoder.encode(AID)
        try encoder.encode(itemId)
    }
}

public struct PACKET_ZC_ACK_CASH_BARGAIN_SALE_ITEM_INFO: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2 + 4 + 4)
    }
    public var packetType: Int16 = 0
    public var result: UInt16 = 0
    public var itemId: UInt32 = 0
    public var price: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        result = try decoder.decode(UInt16.self)
        itemId = try decoder.decode(UInt32.self)
        price = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(result)
        try encoder.encode(itemId)
        try encoder.encode(price)
    }
}

public struct PACKET_CZ_REQ_APPLY_BARGAIN_SALE_ITEM: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 4 + 4 + 4 + 2)
    }
    public var packetType: Int16 = 0
    public var AID: UInt32 = 0
    public var itemId: UInt32 = 0
    public var amount: UInt32 = 0
    public var startTime: UInt32 = 0
    public var hours: UInt16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        AID = try decoder.decode(UInt32.self)
        itemId = try decoder.decode(UInt32.self)
        amount = try decoder.decode(UInt32.self)
        startTime = try decoder.decode(UInt32.self)
        hours = try decoder.decode(UInt16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(AID)
        try encoder.encode(itemId)
        try encoder.encode(amount)
        try encoder.encode(startTime)
        try encoder.encode(hours)
    }
}

public struct PACKET_CZ_REQ_REMOVE_BARGAIN_SALE_ITEM: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 4)
    }
    public var packetType: Int16 = 0
    public var AID: UInt32 = 0
    public var itemId: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        AID = try decoder.decode(UInt32.self)
        itemId = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(AID)
        try encoder.encode(itemId)
    }
}

public struct PACKET_ZC_NOTIFY_BARGAIN_SALE_SELLING: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 4)
    }
    public var packetType: Int16 = 0
    public var itemId: UInt32 = 0
    public var remainingTime: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        itemId = try decoder.decode(UInt32.self)
        remainingTime = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(itemId)
        try encoder.encode(remainingTime)
    }
}

public struct PACKET_ZC_NOTIFY_BARGAIN_SALE_CLOSE: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4)
    }
    public var packetType: Int16 = 0
    public var itemId: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        itemId = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(itemId)
    }
}

public struct PACKET_ZC_ACK_COUNT_BARGAIN_SALE_ITEM: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 4)
    }
    public var packetType: Int16 = 0
    public var itemId: UInt32 = 0
    public var amount: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        itemId = try decoder.decode(UInt32.self)
        amount = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(itemId)
        try encoder.encode(amount)
    }
}

public struct PACKET_ZC_ACK_GUILDSTORAGE_LOG_sub: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (4 + 4 + 4 + 1 + 4 + 8 + 1 + 2 + ((4 * 4)) + 24 + 24 + 1)
    }
    public var id: UInt32 = 0
    public var itemId: UInt32 = 0
    public var amount: Int32 = 0
    public var action: UInt8 = 0
    public var refine: Int32 = 0
    public var uniqueId: Int64 = 0
    public var IsIdentified: UInt8 = 0
    public var itemType: UInt16 = 0
    public var slot: EQUIPSLOTINFO = EQUIPSLOTINFO()
    @FixedLengthString(lengthOfBytes: 24)
    public var name: String
    @FixedLengthString(lengthOfBytes: 24)
    public var time: String
    public var attribute: UInt8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        id = try decoder.decode(UInt32.self)
        itemId = try decoder.decode(UInt32.self)
        amount = try decoder.decode(Int32.self)
        action = try decoder.decode(UInt8.self)
        refine = try decoder.decode(Int32.self)
        uniqueId = try decoder.decode(Int64.self)
        IsIdentified = try decoder.decode(UInt8.self)
        itemType = try decoder.decode(UInt16.self)
        slot = try decoder.decode(EQUIPSLOTINFO.self)
        name = try decoder.decode(String.self, lengthOfBytes: 24)
        time = try decoder.decode(String.self, lengthOfBytes: 24)
        attribute = try decoder.decode(UInt8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(id)
        try encoder.encode(itemId)
        try encoder.encode(amount)
        try encoder.encode(action)
        try encoder.encode(refine)
        try encoder.encode(uniqueId)
        try encoder.encode(IsIdentified)
        try encoder.encode(itemType)
        try encoder.encode(slot)
        try encoder.encode(name, lengthOfBytes: 24)
        try encoder.encode(time, lengthOfBytes: 24)
        try encoder.encode(attribute)
    }
}

public struct PACKET_ZC_ACK_GUILDSTORAGE_LOG: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        -1
    }
    public var packetType: Int16 = 0
    public var packetLength: Int16 = 0
    public var result: UInt16 = 0
    public var amount: UInt16 = 0
    public var items: [PACKET_ZC_ACK_GUILDSTORAGE_LOG_sub] = []
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        packetLength = try decoder.decode(Int16.self)
        result = try decoder.decode(UInt16.self)
        amount = try decoder.decode(UInt16.self)
        items = try decoder.decode([PACKET_ZC_ACK_GUILDSTORAGE_LOG_sub].self, count: (Int(packetLength) - (2 + 2 + 2 + 2)) / (4 + 4 + 4 + 1 + 4 + 8 + 1 + 2 + ((4 * 4)) + 24 + 24 + 1))
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(packetLength)
        try encoder.encode(result)
        try encoder.encode(amount)
        try encoder.encode(items)
    }
}

public struct PACKET_CZ_ADVANCED_STATUS_CHANGE: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2 + 2)
    }
    public var packetType: Int16 = 0
    public var type: Int16 = 0
    public var amount: Int16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        type = try decoder.decode(Int16.self)
        amount = try decoder.decode(Int16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(type)
        try encoder.encode(amount)
    }
}

public struct PACKET_CZ_REQ_ADD_NEW_EMBLEM: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 4)
    }
    public var packetType: Int16 = 0
    public var guild_id: UInt32 = 0
    public var version: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        guild_id = try decoder.decode(UInt32.self)
        version = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(guild_id)
        try encoder.encode(version)
    }
}

public struct PACKET_ZC_BROADCAST: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        -1
    }
    public var packetType: Int16 = 0
    public var packetLength: Int16 = 0
    public var message: String = ""
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        packetLength = try decoder.decode(Int16.self)
        message = try decoder.decode(String.self, lengthOfBytes: (Int(packetLength) - (2 + 2)))
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(packetLength)
        try encoder.encode(message)
    }
}

public struct PACKET_ZC_BROADCAST2: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        -1
    }
    public var packetType: Int16 = 0
    public var packetLength: Int16 = 0
    public var fontColor: UInt32 = 0
    public var fontType: Int16 = 0
    public var fontSize: Int16 = 0
    public var fontAlign: Int16 = 0
    public var fontY: Int16 = 0
    public var message: String = ""
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        packetLength = try decoder.decode(Int16.self)
        fontColor = try decoder.decode(UInt32.self)
        fontType = try decoder.decode(Int16.self)
        fontSize = try decoder.decode(Int16.self)
        fontAlign = try decoder.decode(Int16.self)
        fontY = try decoder.decode(Int16.self)
        message = try decoder.decode(String.self, lengthOfBytes: (Int(packetLength) - (2 + 2 + 4 + 2 + 2 + 2 + 2)))
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(packetLength)
        try encoder.encode(fontColor)
        try encoder.encode(fontType)
        try encoder.encode(fontSize)
        try encoder.encode(fontAlign)
        try encoder.encode(fontY)
        try encoder.encode(message)
    }
}

public struct PACKET_ZC_ENTRY_QUEUE_INIT: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2)
    }
    public var packetType: Int16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
    }
}

public struct PACKET_CZ_RODEX_RETURN: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4)
    }
    public var packetType: Int16 = 0
    public var msgId: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        msgId = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(msgId)
    }
}

public struct PACKET_CZ_REQ_STYLE_CLOSE: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2)
    }
    public var packetType: Int16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
    }
}

public struct PACKET_ZC_SUMMON_HP_INIT: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 4 + 4)
    }
    public var packetType: Int16 = 0
    public var summonAID: UInt32 = 0
    public var CurrentHP: UInt32 = 0
    public var MaxHP: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        summonAID = try decoder.decode(UInt32.self)
        CurrentHP = try decoder.decode(UInt32.self)
        MaxHP = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(summonAID)
        try encoder.encode(CurrentHP)
        try encoder.encode(MaxHP)
    }
}

public struct PACKET_ZC_SUMMON_HP_UPDATE: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 2 + 4)
    }
    public var packetType: Int16 = 0
    public var summonAID: UInt32 = 0
    public var VarId: UInt16 = 0
    public var Value: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        summonAID = try decoder.decode(UInt32.self)
        VarId = try decoder.decode(UInt16.self)
        Value = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(summonAID)
        try encoder.encode(VarId)
        try encoder.encode(Value)
    }
}

public struct PACKET_ZC_REPUTE_INFO_sub: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (8 + 8)
    }
    public var type: UInt64 = 0
    public var points: Int64 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        type = try decoder.decode(UInt64.self)
        points = try decoder.decode(Int64.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(type)
        try encoder.encode(points)
    }
}

public struct PACKET_ZC_REPUTE_INFO: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        -1
    }
    public var packetType: Int16 = 0
    public var packetLength: Int16 = 0
    public var success: UInt8 = 0
    public var list: [PACKET_ZC_REPUTE_INFO_sub] = []
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        packetLength = try decoder.decode(Int16.self)
        success = try decoder.decode(UInt8.self)
        list = try decoder.decode([PACKET_ZC_REPUTE_INFO_sub].self, count: (Int(packetLength) - (2 + 2 + 1)) / (8 + 8))
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(packetLength)
        try encoder.encode(success)
        try encoder.encode(list)
    }
}

public struct PACKET_ZC_UI_OPEN_V3: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 1 + 8)
    }
    public var packetType: Int16 = 0
    public var type: UInt8 = 0
    public var data: UInt64 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        type = try decoder.decode(UInt8.self)
        data = try decoder.decode(UInt64.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(type)
        try encoder.encode(data)
    }
}

public struct PACKET_ZC_TARGET_SPIRITS: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 4 + 2)
    }
    public var packetType: Int16 = 0
    public var GID: UInt32 = 0
    public var unknown_val: UInt32 = 0
    public var amount: UInt16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        GID = try decoder.decode(UInt32.self)
        unknown_val = try decoder.decode(UInt32.self)
        amount = try decoder.decode(UInt16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(GID)
        try encoder.encode(unknown_val)
        try encoder.encode(amount)
    }
}

public struct PACKET_ZC_FRIENDS_LIST_sub: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (4 + 4 + 24)
    }
    public var AID: UInt32 = 0
    public var CID: UInt32 = 0
    @FixedLengthString(lengthOfBytes: 24)
    public var name: String
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        AID = try decoder.decode(UInt32.self)
        CID = try decoder.decode(UInt32.self)
        name = try decoder.decode(String.self, lengthOfBytes: 24)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(AID)
        try encoder.encode(CID)
        try encoder.encode(name, lengthOfBytes: 24)
    }
}

public struct PACKET_ZC_FRIENDS_LIST: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        -1
    }
    public var packetType: Int16 = 0
    public var packetLength: Int16 = 0
    public var friends: [PACKET_ZC_FRIENDS_LIST_sub] = []
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        packetLength = try decoder.decode(Int16.self)
        friends = try decoder.decode([PACKET_ZC_FRIENDS_LIST_sub].self, count: (Int(packetLength) - (2 + 2)) / (4 + 4 + 24))
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(packetLength)
        try encoder.encode(friends)
    }
}

public struct PACKET_CZ_PC_SELL_ITEMLIST_sub: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2)
    }
    public var index: UInt16 = 0
    public var amount: UInt16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        index = try decoder.decode(UInt16.self)
        amount = try decoder.decode(UInt16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(index)
        try encoder.encode(amount)
    }
}

public struct PACKET_CZ_PC_SELL_ITEMLIST: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        -1
    }
    public var packetType: Int16 = 0
    public var packetLength: Int16 = 0
    public var sellList: [PACKET_CZ_PC_SELL_ITEMLIST_sub] = []
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        packetLength = try decoder.decode(Int16.self)
        sellList = try decoder.decode([PACKET_CZ_PC_SELL_ITEMLIST_sub].self, count: (Int(packetLength) - (2 + 2)) / (2 + 2))
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(packetLength)
        try encoder.encode(sellList)
    }
}

public struct PACKET_CZ_REQ_CHANGE_MEMBERPOS_sub: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (4 + 4 + 4)
    }
    public var AID: UInt32 = 0
    public var CID: UInt32 = 0
    public var position: Int32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        AID = try decoder.decode(UInt32.self)
        CID = try decoder.decode(UInt32.self)
        position = try decoder.decode(Int32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(AID)
        try encoder.encode(CID)
        try encoder.encode(position)
    }
}

public struct PACKET_CZ_REQ_CHANGE_MEMBERPOS: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        -1
    }
    public var packetType: Int16 = 0
    public var packetLength: Int16 = 0
    public var list: [PACKET_CZ_REQ_CHANGE_MEMBERPOS_sub] = []
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        packetLength = try decoder.decode(Int16.self)
        list = try decoder.decode([PACKET_CZ_REQ_CHANGE_MEMBERPOS_sub].self, count: (Int(packetLength) - (2 + 2)) / (4 + 4 + 4))
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(packetLength)
        try encoder.encode(list)
    }
}

public struct PACKET_ZC_CLEAR_DIALOG: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4)
    }
    public var packetType: Int16 = 0
    public var GID: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        GID = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(GID)
    }
}

public struct PACKET_ZC_NOTIFY_BIND_ON_EQUIP: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2)
    }
    public var packetType: Int16 = 0
    public var index: Int16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        index = try decoder.decode(Int16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(index)
    }
}

public struct PACKET_ZC_BANKING_CHECK: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 8 + 2)
    }
    public var packetType: Int16 = 0
    public var money: Int64 = 0
    public var reason: Int16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        money = try decoder.decode(Int64.self)
        reason = try decoder.decode(Int16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(money)
        try encoder.encode(reason)
    }
}

public struct PACKET_ZC_ACK_BANKING_WITHDRAW: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2 + 8 + 4)
    }
    public var packetType: Int16 = 0
    public var reason: Int16 = 0
    public var money: Int64 = 0
    public var zeny: Int32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        reason = try decoder.decode(Int16.self)
        money = try decoder.decode(Int64.self)
        zeny = try decoder.decode(Int32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(reason)
        try encoder.encode(money)
        try encoder.encode(zeny)
    }
}

public struct PACKET_ZC_ACK_BANKING_DEPOSIT: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2 + 8 + 4)
    }
    public var packetType: Int16 = 0
    public var reason: Int16 = 0
    public var money: Int64 = 0
    public var zeny: Int32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        reason = try decoder.decode(Int16.self)
        money = try decoder.decode(Int64.self)
        zeny = try decoder.decode(Int32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(reason)
        try encoder.encode(money)
        try encoder.encode(zeny)
    }
}

public struct PACKET_ZC_ACK_CLOSE_BANKING: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2)
    }
    public var packetType: Int16 = 0
    public var unknown: Int16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        unknown = try decoder.decode(Int16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(unknown)
    }
}

public struct PACKET_ZC_ACK_OPEN_BANKING: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2)
    }
    public var packetType: Int16 = 0
    public var unknown: Int16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        unknown = try decoder.decode(Int16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(unknown)
    }
}

public struct PACKET_ZC_REQ_EXCHANGE_ITEM: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 24 + 4 + 2)
    }
    public var packetType: Int16 = 0
    @FixedLengthString(lengthOfBytes: 24)
    public var requesterName: String
    public var targetId: UInt32 = 0
    public var targetLv: UInt16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        requesterName = try decoder.decode(String.self, lengthOfBytes: 24)
        targetId = try decoder.decode(UInt32.self)
        targetLv = try decoder.decode(UInt16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(requesterName, lengthOfBytes: 24)
        try encoder.encode(targetId)
        try encoder.encode(targetLv)
    }
}

public struct PACKET_ZC_ACK_EXCHANGE_ITEM: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 1 + 4 + 2)
    }
    public var packetType: Int16 = 0
    public var result: UInt8 = 0
    public var targetId: UInt32 = 0
    public var targetLv: UInt16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        result = try decoder.decode(UInt8.self)
        targetId = try decoder.decode(UInt32.self)
        targetLv = try decoder.decode(UInt16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(result)
        try encoder.encode(targetId)
        try encoder.encode(targetLv)
    }
}

public struct PACKET_ZC_ACK_ADD_EXCHANGE_ITEM: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2 + 1)
    }
    public var packetType: Int16 = 0
    public var index: UInt16 = 0
    public var result: UInt8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        index = try decoder.decode(UInt16.self)
        result = try decoder.decode(UInt8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(index)
        try encoder.encode(result)
    }
}

public struct PACKET_ZC_COUPLENAME: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 24)
    }
    public var packetType: Int16 = 0
    @FixedLengthString(lengthOfBytes: 24)
    public var name: String
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        name = try decoder.decode(String.self, lengthOfBytes: 24)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(name, lengthOfBytes: 24)
    }
}

public struct PACKET_CZ_PARTY_REQ_MASTER_TO_JOIN: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 4)
    }
    public var packetType: Int16 = 0
    public var CID: UInt32 = 0
    public var AID: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        CID = try decoder.decode(UInt32.self)
        AID = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(CID)
        try encoder.encode(AID)
    }
}

public struct PACKET_ZC_PARTY_REQ_MASTER_TO_JOIN: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 4 + 24 + 2 + 2)
    }
    public var packetType: Int16 = 0
    public var CID: UInt32 = 0
    public var AID: UInt32 = 0
    @FixedLengthString(lengthOfBytes: 24)
    public var name: String
    public var x: UInt16 = 0
    public var y: UInt16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        CID = try decoder.decode(UInt32.self)
        AID = try decoder.decode(UInt32.self)
        name = try decoder.decode(String.self, lengthOfBytes: 24)
        x = try decoder.decode(UInt16.self)
        y = try decoder.decode(UInt16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(CID)
        try encoder.encode(AID)
        try encoder.encode(name, lengthOfBytes: 24)
        try encoder.encode(x)
        try encoder.encode(y)
    }
}

public struct PACKET_CZ_PARTY_REQ_ACK_MASTER_TO_JOIN: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 4 + 1)
    }
    public var packetType: Int16 = 0
    public var CID: UInt32 = 0
    public var AID: UInt32 = 0
    public var accept: UInt8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        CID = try decoder.decode(UInt32.self)
        AID = try decoder.decode(UInt32.self)
        accept = try decoder.decode(UInt8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(CID)
        try encoder.encode(AID)
        try encoder.encode(accept)
    }
}

public struct PACKET_ZC_PARTY_JOIN_REQ_ACK_FROM_MASTER: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 24 + 24 + 4 + 4)
    }
    public var packetType: Int16 = 0
    @FixedLengthString(lengthOfBytes: 24)
    public var player_name: String
    @FixedLengthString(lengthOfBytes: 24)
    public var party_name: String
    public var AID: UInt32 = 0
    public var refused: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        player_name = try decoder.decode(String.self, lengthOfBytes: 24)
        party_name = try decoder.decode(String.self, lengthOfBytes: 24)
        AID = try decoder.decode(UInt32.self)
        refused = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(player_name, lengthOfBytes: 24)
        try encoder.encode(party_name, lengthOfBytes: 24)
        try encoder.encode(AID)
        try encoder.encode(refused)
    }
}

public struct PACKET_CZ_REQ_SE_CASH_TAB_CODE: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2)
    }
    public var packetType: Int16 = 0
    public var tab: Int16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        tab = try decoder.decode(Int16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(tab)
    }
}

public struct PACKET_ZC_ACK_SE_CASH_ITEM_LIST2_sub: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (4 + 4)
    }
    public var itemId: UInt32 = 0
    public var price: Int32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        itemId = try decoder.decode(UInt32.self)
        price = try decoder.decode(Int32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(itemId)
        try encoder.encode(price)
    }
}

public struct PACKET_ZC_ACK_SE_CASH_ITEM_LIST2: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        -1
    }
    public var packetType: Int16 = 0
    public var packetLength: Int16 = 0
    public var tab: UInt32 = 0
    public var count: Int16 = 0
    public var items: [PACKET_ZC_ACK_SE_CASH_ITEM_LIST2_sub] = []
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        packetLength = try decoder.decode(Int16.self)
        tab = try decoder.decode(UInt32.self)
        count = try decoder.decode(Int16.self)
        items = try decoder.decode([PACKET_ZC_ACK_SE_CASH_ITEM_LIST2_sub].self, count: (Int(packetLength) - (2 + 2 + 4 + 2)) / (4 + 4))
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(packetLength)
        try encoder.encode(tab)
        try encoder.encode(count)
        try encoder.encode(items)
    }
}

public struct PACKET_CZ_REQ_MERGE_ITEM: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        -1
    }
    public var packetType: Int16 = 0
    public var packetLength: Int16 = 0
    public var indices: [UInt16] = []
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        packetLength = try decoder.decode(Int16.self)
        indices = try decoder.decode([UInt16].self, count: (Int(packetLength) - (2 + 2)) / 2)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(packetLength)
        try encoder.encode(indices)
    }
}

public struct PACKET_CZ_RESET_SKILL: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 1)
    }
    public var packetType: Int16 = 0
    public var unknown: UInt8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        unknown = try decoder.decode(UInt8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(unknown)
    }
}

public struct PACKET_ZC_SKILLINFO_UPDATE: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2 + 2 + 2 + 2 + 1)
    }
    public var packetType: Int16 = 0
    public var skillId: UInt16 = 0
    public var level: UInt16 = 0
    public var sp: UInt16 = 0
    public var range2: UInt16 = 0
    public var upFlag: Int8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        skillId = try decoder.decode(UInt16.self)
        level = try decoder.decode(UInt16.self)
        sp = try decoder.decode(UInt16.self)
        range2 = try decoder.decode(UInt16.self)
        upFlag = try decoder.decode(Int8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(skillId)
        try encoder.encode(level)
        try encoder.encode(sp)
        try encoder.encode(range2)
        try encoder.encode(upFlag)
    }
}

public struct PACKET_ZC_BOSS_INFO: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 1 + 4 + 4 + 2 + 2 + 2 + 2 + 51)
    }
    public var packetType: Int16 = 0
    public var type: UInt8 = 0
    public var x: UInt32 = 0
    public var y: UInt32 = 0
    public var minHours: UInt16 = 0
    public var minMinutes: UInt16 = 0
    public var maxHours: UInt16 = 0
    public var maxMinutes: UInt16 = 0
    @FixedLengthString(lengthOfBytes: 51)
    public var name: String
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        type = try decoder.decode(UInt8.self)
        x = try decoder.decode(UInt32.self)
        y = try decoder.decode(UInt32.self)
        minHours = try decoder.decode(UInt16.self)
        minMinutes = try decoder.decode(UInt16.self)
        maxHours = try decoder.decode(UInt16.self)
        maxMinutes = try decoder.decode(UInt16.self)
        name = try decoder.decode(String.self, lengthOfBytes: 51)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(type)
        try encoder.encode(x)
        try encoder.encode(y)
        try encoder.encode(minHours)
        try encoder.encode(minMinutes)
        try encoder.encode(maxHours)
        try encoder.encode(maxMinutes)
        try encoder.encode(name, lengthOfBytes: 51)
    }
}

public struct PACKET_CZ_INVENTORY_TAB: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2 + 1)
    }
    public var packetType: Int16 = 0
    public var index: Int16 = 0
    public var favorite: Int8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        index = try decoder.decode(Int16.self)
        favorite = try decoder.decode(Int8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(index)
        try encoder.encode(favorite)
    }
}

public struct PACKET_ZC_INVENTORY_TAB: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2 + 1)
    }
    public var packetType: Int16 = 0
    public var index: Int16 = 0
    public var favorite: Int8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        index = try decoder.decode(Int16.self)
        favorite = try decoder.decode(Int8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(index)
        try encoder.encode(favorite)
    }
}

public struct PACKET_CZ_REQ_OPEN_BANKING: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4)
    }
    public var packetType: Int16 = 0
    public var AID: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        AID = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(AID)
    }
}

public struct PACKET_CZ_REQ_CLOSE_BANKING: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4)
    }
    public var packetType: Int16 = 0
    public var AID: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        AID = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(AID)
    }
}

public struct PACKET_CZ_REQ_BANKING_CHECK: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4)
    }
    public var packetType: Int16 = 0
    public var AID: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        AID = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(AID)
    }
}

public struct PACKET_CZ_REQ_BANKING_DEPOSIT: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 4)
    }
    public var packetType: Int16 = 0
    public var AID: UInt32 = 0
    public var zeny: Int32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        AID = try decoder.decode(UInt32.self)
        zeny = try decoder.decode(Int32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(AID)
        try encoder.encode(zeny)
    }
}

public struct PACKET_CZ_REQ_BANKING_WITHDRAW: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 4)
    }
    public var packetType: Int16 = 0
    public var AID: UInt32 = 0
    public var zeny: Int32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        AID = try decoder.decode(UInt32.self)
        zeny = try decoder.decode(Int32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(AID)
        try encoder.encode(zeny)
    }
}

public struct PACKET_ZC_ACCEPT_ENTER: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + (1 * 3) + 1 + 1 + 2)
    }
    public var packetType: Int16 = 0
    public var startTime: UInt32 = 0
    @FixedSizeArray(size: 3, initialValue: 0)
    public var posDir: [UInt8]
    public var xSize: UInt8 = 0
    public var ySize: UInt8 = 0
    public var font: UInt16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        startTime = try decoder.decode(UInt32.self)
        posDir = try decoder.decode([UInt8].self, count: 3)
        xSize = try decoder.decode(UInt8.self)
        ySize = try decoder.decode(UInt8.self)
        font = try decoder.decode(UInt16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(startTime)
        try encoder.encode(posDir)
        try encoder.encode(xSize)
        try encoder.encode(ySize)
        try encoder.encode(font)
    }
}

public struct PACKET_ZC_REFUSE_ENTER: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 1)
    }
    public var packetType: Int16 = 0
    public var errorCode: UInt8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        errorCode = try decoder.decode(UInt8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(errorCode)
    }
}

public struct PACKET_ZC_RESTART_ACK: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 1)
    }
    public var packetType: Int16 = 0
    public var type: UInt8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        type = try decoder.decode(UInt8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(type)
    }
}

public struct PACKET_ZC_NOTIFY_VANISH: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 1)
    }
    public var packetType: Int16 = 0
    public var gid: UInt32 = 0
    public var type: UInt8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        gid = try decoder.decode(UInt32.self)
        type = try decoder.decode(UInt8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(gid)
        try encoder.encode(type)
    }
}

public struct PACKET_ZC_ITEM_DISAPPEAR: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4)
    }
    public var packetType: Int16 = 0
    public var itemAid: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        itemAid = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(itemAid)
    }
}

public struct PACKET_ZC_MILLENNIUMSHIELD: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 2 + 2)
    }
    public var packetType: Int16 = 0
    public var aid: UInt32 = 0
    public var num: Int16 = 0
    public var state: Int16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        aid = try decoder.decode(UInt32.self)
        num = try decoder.decode(Int16.self)
        state = try decoder.decode(Int16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(aid)
        try encoder.encode(num)
        try encoder.encode(state)
    }
}

public struct PACKET_ZC_SPIRITS_ATTRIBUTE: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 2 + 2)
    }
    public var packetType: Int16 = 0
    public var aid: UInt32 = 0
    public var spiritsType: Int16 = 0
    public var num: Int16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        aid = try decoder.decode(UInt32.self)
        spiritsType = try decoder.decode(Int16.self)
        num = try decoder.decode(Int16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(aid)
        try encoder.encode(spiritsType)
        try encoder.encode(num)
    }
}

public struct PACKET_ZC_CHANGESTATE_MER: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 1 + 1 + 4 + 4)
    }
    public var packetType: Int16 = 0
    public var type: UInt8 = 0
    public var state: UInt8 = 0
    public var gid: UInt32 = 0
    public var data: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        type = try decoder.decode(UInt8.self)
        state = try decoder.decode(UInt8.self)
        gid = try decoder.decode(UInt32.self)
        data = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(type)
        try encoder.encode(state)
        try encoder.encode(gid)
        try encoder.encode(data)
    }
}

public struct PACKET_ZC_HOSKILLINFO_LIST_sub: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2 + 2 + 2 + 2 + 2 + 24 + 1)
    }
    public var id: UInt16 = 0
    public var inf: UInt16 = 0
    public var unknown: UInt16 = 0
    public var level: UInt16 = 0
    public var sp: UInt16 = 0
    public var range: UInt16 = 0
    @FixedLengthString(lengthOfBytes: 24)
    public var name: String
    public var upgradable: UInt8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        id = try decoder.decode(UInt16.self)
        inf = try decoder.decode(UInt16.self)
        unknown = try decoder.decode(UInt16.self)
        level = try decoder.decode(UInt16.self)
        sp = try decoder.decode(UInt16.self)
        range = try decoder.decode(UInt16.self)
        name = try decoder.decode(String.self, lengthOfBytes: 24)
        upgradable = try decoder.decode(UInt8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(id)
        try encoder.encode(inf)
        try encoder.encode(unknown)
        try encoder.encode(level)
        try encoder.encode(sp)
        try encoder.encode(range)
        try encoder.encode(name, lengthOfBytes: 24)
        try encoder.encode(upgradable)
    }
}

public struct PACKET_ZC_HOSKILLINFO_LIST: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        -1
    }
    public var packetType: Int16 = 0
    public var packetLength: Int16 = 0
    public var skills: [PACKET_ZC_HOSKILLINFO_LIST_sub] = []
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        packetLength = try decoder.decode(Int16.self)
        skills = try decoder.decode([PACKET_ZC_HOSKILLINFO_LIST_sub].self, count: (Int(packetLength) - (2 + 2)) / (2 + 2 + 2 + 2 + 2 + 2 + 24 + 1))
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(packetLength)
        try encoder.encode(skills)
    }
}

public struct PACKET_ZC_HOSKILLINFO_UPDATE: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2 + 2 + 2 + 2 + 1)
    }
    public var packetType: Int16 = 0
    public var skill_id: UInt16 = 0
    public var Level: Int16 = 0
    public var SP: Int16 = 0
    public var AttackRange: Int16 = 0
    public var upgradable: Int8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        skill_id = try decoder.decode(UInt16.self)
        Level = try decoder.decode(Int16.self)
        SP = try decoder.decode(Int16.self)
        AttackRange = try decoder.decode(Int16.self)
        upgradable = try decoder.decode(Int8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(skill_id)
        try encoder.encode(Level)
        try encoder.encode(SP)
        try encoder.encode(AttackRange)
        try encoder.encode(upgradable)
    }
}

public struct PACKET_ZC_NOTIFY_PLAYERMOVE: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + (1 * 6))
    }
    public var packetType: Int16 = 0
    public var moveStartTime: UInt32 = 0
    @FixedSizeArray(size: 6, initialValue: 0)
    public var moveData: [UInt8]
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        moveStartTime = try decoder.decode(UInt32.self)
        moveData = try decoder.decode([UInt8].self, count: 6)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(moveStartTime)
        try encoder.encode(moveData)
    }
}

public struct PACKET_ZC_CHANGE_DIRECTION: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 2 + 1)
    }
    public var packetType: Int16 = 0
    public var srcId: UInt32 = 0
    public var headDir: UInt16 = 0
    public var dir: UInt8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        srcId = try decoder.decode(UInt32.self)
        headDir = try decoder.decode(UInt16.self)
        dir = try decoder.decode(UInt8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(srcId)
        try encoder.encode(headDir)
        try encoder.encode(dir)
    }
}

public struct PACKET_ZC_NPCACK_MAPMOVE: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 16 + 2 + 2)
    }
    public var packetType: Int16 = 0
    @FixedLengthString(lengthOfBytes: 16)
    public var mapName: String
    public var xPos: UInt16 = 0
    public var yPos: UInt16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        mapName = try decoder.decode(String.self, lengthOfBytes: 16)
        xPos = try decoder.decode(UInt16.self)
        yPos = try decoder.decode(UInt16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(mapName, lengthOfBytes: 16)
        try encoder.encode(xPos)
        try encoder.encode(yPos)
    }
}

public struct PACKET_ZC_NPCACK_SERVERMOVE: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 16 + 2 + 2 + 4 + 2 + 128)
    }
    public var packetType: Int16 = 0
    @FixedLengthString(lengthOfBytes: 16)
    public var mapName: String
    public var xPos: UInt16 = 0
    public var yPos: UInt16 = 0
    public var ip: UInt32 = 0
    public var port: UInt16 = 0
    @FixedLengthString(lengthOfBytes: 128)
    public var domain: String
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        mapName = try decoder.decode(String.self, lengthOfBytes: 16)
        xPos = try decoder.decode(UInt16.self)
        yPos = try decoder.decode(UInt16.self)
        ip = try decoder.decode(UInt32.self)
        port = try decoder.decode(UInt16.self)
        domain = try decoder.decode(String.self, lengthOfBytes: 128)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(mapName, lengthOfBytes: 16)
        try encoder.encode(xPos)
        try encoder.encode(yPos)
        try encoder.encode(ip)
        try encoder.encode(port)
        try encoder.encode(domain, lengthOfBytes: 128)
    }
}

public struct PACKET_ZC_STOPMOVE: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 2 + 2)
    }
    public var packetType: Int16 = 0
    public var AID: UInt32 = 0
    public var xPos: UInt16 = 0
    public var yPos: UInt16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        AID = try decoder.decode(UInt32.self)
        xPos = try decoder.decode(UInt16.self)
        yPos = try decoder.decode(UInt16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(AID)
        try encoder.encode(xPos)
        try encoder.encode(yPos)
    }
}

public struct PACKET_ZC_SELECT_DEALTYPE: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4)
    }
    public var packetType: Int16 = 0
    public var npcId: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        npcId = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(npcId)
    }
}

public struct PACKET_ZC_PC_SELL_ITEMLIST_sub: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 4)
    }
    public var index: UInt16 = 0
    public var price: UInt32 = 0
    public var overcharge: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        index = try decoder.decode(UInt16.self)
        price = try decoder.decode(UInt32.self)
        overcharge = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(index)
        try encoder.encode(price)
        try encoder.encode(overcharge)
    }
}

public struct PACKET_ZC_PC_SELL_ITEMLIST: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        -1
    }
    public var packetType: Int16 = 0
    public var packetLength: Int16 = 0
    public var items: [PACKET_ZC_PC_SELL_ITEMLIST_sub] = []
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        packetLength = try decoder.decode(Int16.self)
        items = try decoder.decode([PACKET_ZC_PC_SELL_ITEMLIST_sub].self, count: (Int(packetLength) - (2 + 2)) / (2 + 4 + 4))
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(packetLength)
        try encoder.encode(items)
    }
}

public struct PACKET_ZC_CLOSE_DIALOG: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4)
    }
    public var packetType: Int16 = 0
    public var npcId: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        npcId = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(npcId)
    }
}

public struct PACKET_ZC_MENU_LIST: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        -1
    }
    public var packetType: Int16 = 0
    public var packetLength: Int16 = 0
    public var npcId: UInt32 = 0
    public var menu: String = ""
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        packetLength = try decoder.decode(Int16.self)
        npcId = try decoder.decode(UInt32.self)
        menu = try decoder.decode(String.self, lengthOfBytes: (Int(packetLength) - (2 + 2 + 4)))
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(packetLength)
        try encoder.encode(npcId)
        try encoder.encode(menu)
    }
}

public struct PACKET_ZC_OPEN_EDITDLG: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4)
    }
    public var packetType: Int16 = 0
    public var npcId: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        npcId = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(npcId)
    }
}

public struct PACKET_ZC_OPEN_EDITDLGSTR: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4)
    }
    public var packetType: Int16 = 0
    public var npcId: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        npcId = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(npcId)
    }
}

public struct PACKET_ZC_ACK_REQ_ALLY_GUILD: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 1)
    }
    public var packetType: Int16 = 0
    public var flag: UInt8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        flag = try decoder.decode(UInt8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(flag)
    }
}

public struct PACKET_ZC_DELETE_RELATED_GUILD: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 4)
    }
    public var packetType: Int16 = 0
    public var allyID: UInt32 = 0
    public var flag: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        allyID = try decoder.decode(UInt32.self)
        flag = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(allyID)
        try encoder.encode(flag)
    }
}

public struct PACKET_ZC_REQ_ALLY_GUILD: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 24)
    }
    public var packetType: Int16 = 0
    public var inviterId: UInt32 = 0
    @FixedLengthString(lengthOfBytes: 24)
    public var inviterGuildName: String
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        inviterId = try decoder.decode(UInt32.self)
        inviterGuildName = try decoder.decode(String.self, lengthOfBytes: 24)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(inviterId)
        try encoder.encode(inviterGuildName, lengthOfBytes: 24)
    }
}

public struct PACKET_ZC_ACK_REQ_HOSTILE_GUILD: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 1)
    }
    public var packetType: Int16 = 0
    public var flag: UInt8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        flag = try decoder.decode(UInt8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(flag)
    }
}

public struct PACKET_ZC_COMPASS: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 4 + 4 + 4 + 1 + 4)
    }
    public var packetType: Int16 = 0
    public var npcId: UInt32 = 0
    public var type: UInt32 = 0
    public var xPos: UInt32 = 0
    public var yPos: UInt32 = 0
    public var id: UInt8 = 0
    public var color: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        npcId = try decoder.decode(UInt32.self)
        type = try decoder.decode(UInt32.self)
        xPos = try decoder.decode(UInt32.self)
        yPos = try decoder.decode(UInt32.self)
        id = try decoder.decode(UInt8.self)
        color = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(npcId)
        try encoder.encode(type)
        try encoder.encode(xPos)
        try encoder.encode(yPos)
        try encoder.encode(id)
        try encoder.encode(color)
    }
}

public struct PACKET_ZC_ITEM_THROW_ACK: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2 + 2)
    }
    public var packetType: Int16 = 0
    public var index: UInt16 = 0
    public var count: UInt16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        index = try decoder.decode(UInt16.self)
        count = try decoder.decode(UInt16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(index)
        try encoder.encode(count)
    }
}

public struct PACKET_ZC_DELETE_ITEM_FROM_BODY: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2 + 2 + 2)
    }
    public var packetType: Int16 = 0
    public var deleteType: Int16 = 0
    public var index: UInt16 = 0
    public var count: Int16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        deleteType = try decoder.decode(Int16.self)
        index = try decoder.decode(UInt16.self)
        count = try decoder.decode(Int16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(deleteType)
        try encoder.encode(index)
        try encoder.encode(count)
    }
}

public struct PACKET_ZC_CARTOFF: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2)
    }
    public var packetType: Int16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
    }
}

public struct PACKET_ZC_ACK_GUILD_MENUINTERFACE: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4)
    }
    public var packetType: Int16 = 0
    public var menuFlag: Int32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        menuFlag = try decoder.decode(Int32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(menuFlag)
    }
}

public struct PACKET_ZC_NOTIFY_POSITION_TO_GUILDM: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 2 + 2)
    }
    public var packetType: Int16 = 0
    public var aid: UInt32 = 0
    public var xPos: Int16 = 0
    public var yPos: Int16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        aid = try decoder.decode(UInt32.self)
        xPos = try decoder.decode(Int16.self)
        yPos = try decoder.decode(Int16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(aid)
        try encoder.encode(xPos)
        try encoder.encode(yPos)
    }
}

public struct PACKET_ZC_GUILD_CHAT: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        -1
    }
    public var packetType: Int16 = 0
    public var packetLength: Int16 = 0
    public var message: String = ""
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        packetLength = try decoder.decode(Int16.self)
        message = try decoder.decode(String.self, lengthOfBytes: (Int(packetLength) - (2 + 2)))
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(packetLength)
        try encoder.encode(message)
    }
}

public struct PACKET_ZC_STATUS: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2 + 2)
    }
    public var packetType: Int16 = 0
    public var point: UInt16 = 0
    public var str: UInt8 = 0
    public var standardStr: UInt8 = 0
    public var agi: UInt8 = 0
    public var standardAgi: UInt8 = 0
    public var vit: UInt8 = 0
    public var standardVit: UInt8 = 0
    public var int_: UInt8 = 0
    public var standardInt: UInt8 = 0
    public var dex: UInt8 = 0
    public var standardDex: UInt8 = 0
    public var luk: UInt8 = 0
    public var standardLuk: UInt8 = 0
    public var attPower: Int16 = 0
    public var refiningPower: Int16 = 0
    public var max_mattPower: Int16 = 0
    public var min_mattPower: Int16 = 0
    public var itemdefPower: Int16 = 0
    public var plusdefPower: Int16 = 0
    public var mdefPower: Int16 = 0
    public var plusmdefPower: Int16 = 0
    public var hitSuccessValue: Int16 = 0
    public var avoidSuccessValue: Int16 = 0
    public var plusAvoidSuccessValue: Int16 = 0
    public var criticalSuccessValue: Int16 = 0
    public var ASPD: Int16 = 0
    public var plusASPD: Int16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        point = try decoder.decode(UInt16.self)
        str = try decoder.decode(UInt8.self)
        standardStr = try decoder.decode(UInt8.self)
        agi = try decoder.decode(UInt8.self)
        standardAgi = try decoder.decode(UInt8.self)
        vit = try decoder.decode(UInt8.self)
        standardVit = try decoder.decode(UInt8.self)
        int_ = try decoder.decode(UInt8.self)
        standardInt = try decoder.decode(UInt8.self)
        dex = try decoder.decode(UInt8.self)
        standardDex = try decoder.decode(UInt8.self)
        luk = try decoder.decode(UInt8.self)
        standardLuk = try decoder.decode(UInt8.self)
        attPower = try decoder.decode(Int16.self)
        refiningPower = try decoder.decode(Int16.self)
        max_mattPower = try decoder.decode(Int16.self)
        min_mattPower = try decoder.decode(Int16.self)
        itemdefPower = try decoder.decode(Int16.self)
        plusdefPower = try decoder.decode(Int16.self)
        mdefPower = try decoder.decode(Int16.self)
        plusmdefPower = try decoder.decode(Int16.self)
        hitSuccessValue = try decoder.decode(Int16.self)
        avoidSuccessValue = try decoder.decode(Int16.self)
        plusAvoidSuccessValue = try decoder.decode(Int16.self)
        criticalSuccessValue = try decoder.decode(Int16.self)
        ASPD = try decoder.decode(Int16.self)
        plusASPD = try decoder.decode(Int16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(point)
        try encoder.encode(str)
        try encoder.encode(standardStr)
        try encoder.encode(agi)
        try encoder.encode(standardAgi)
        try encoder.encode(vit)
        try encoder.encode(standardVit)
        try encoder.encode(int_)
        try encoder.encode(standardInt)
        try encoder.encode(dex)
        try encoder.encode(standardDex)
        try encoder.encode(luk)
        try encoder.encode(standardLuk)
        try encoder.encode(attPower)
        try encoder.encode(refiningPower)
        try encoder.encode(max_mattPower)
        try encoder.encode(min_mattPower)
        try encoder.encode(itemdefPower)
        try encoder.encode(plusdefPower)
        try encoder.encode(mdefPower)
        try encoder.encode(plusmdefPower)
        try encoder.encode(hitSuccessValue)
        try encoder.encode(avoidSuccessValue)
        try encoder.encode(plusAvoidSuccessValue)
        try encoder.encode(criticalSuccessValue)
        try encoder.encode(ASPD)
        try encoder.encode(plusASPD)
    }
}

public struct PACKET_ZC_NOTIFY_MAPINFO: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2)
    }
    public var packetType: Int16 = 0
    public var type: Int16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        type = try decoder.decode(Int16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(type)
    }
}

public struct PACKET_ZC_ACK_REMEMBER_WARPPOINT: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 1)
    }
    public var packetType: Int16 = 0
    public var type: UInt8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        type = try decoder.decode(UInt8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(type)
    }
}

public struct PACKET_ZC_DISPEL: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4)
    }
    public var packetType: Int16 = 0
    public var gid: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        gid = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(gid)
    }
}

public struct PACKET_ZC_RESURRECTION: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 2)
    }
    public var packetType: Int16 = 0
    public var gid: UInt32 = 0
    public var type: Int16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        gid = try decoder.decode(UInt32.self)
        type = try decoder.decode(Int16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(gid)
        try encoder.encode(type)
    }
}

public struct PACKET_ZC_NOTIFY_MAPPROPERTY2: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2)
    }
    public var packetType: Int16 = 0
    public var type: Int16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        type = try decoder.decode(Int16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(type)
    }
}

public struct PACKET_ZC_ACK_ITEMREFINING: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2 + 2 + 2)
    }
    public var packetType: Int16 = 0
    public var result: UInt16 = 0
    public var index: UInt16 = 0
    public var value: UInt16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        result = try decoder.decode(UInt16.self)
        index = try decoder.decode(UInt16.self)
        value = try decoder.decode(UInt16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(result)
        try encoder.encode(index)
        try encoder.encode(value)
    }
}

public struct PACKET_ZC_PAR_CHANGE_USER: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 2 + 4)
    }
    public var packetType: Int16 = 0
    public var gid: UInt32 = 0
    public var type: Int16 = 0
    public var value: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        gid = try decoder.decode(UInt32.self)
        type = try decoder.decode(Int16.self)
        value = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(gid)
        try encoder.encode(type)
        try encoder.encode(value)
    }
}

public struct PACKET_ZC_CHANGE_CHATROOM: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        -1
    }
    public var packetType: Int16 = 0
    public var packetLength: Int16 = 0
    public var ownerId: UInt32 = 0
    public var chatId: UInt32 = 0
    public var limit: UInt16 = 0
    public var users: UInt16 = 0
    public var flag: UInt8 = 0
    public var title: String = ""
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        packetLength = try decoder.decode(Int16.self)
        ownerId = try decoder.decode(UInt32.self)
        chatId = try decoder.decode(UInt32.self)
        limit = try decoder.decode(UInt16.self)
        users = try decoder.decode(UInt16.self)
        flag = try decoder.decode(UInt8.self)
        title = try decoder.decode(String.self, lengthOfBytes: (Int(packetLength) - (2 + 2 + 4 + 4 + 2 + 2 + 1)))
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(packetLength)
        try encoder.encode(ownerId)
        try encoder.encode(chatId)
        try encoder.encode(limit)
        try encoder.encode(users)
        try encoder.encode(flag)
        try encoder.encode(title)
    }
}

public struct PACKET_ZC_EQUIP_ARROW: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2)
    }
    public var packetType: Int16 = 0
    public var index: UInt16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        index = try decoder.decode(UInt16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(index)
    }
}

public struct PACKET_ZC_REQ_TAKEOFF_EQUIP_ACK: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2 + 4 + 1)
    }
    public var packetType: Int16 = 0
    public var index: UInt16 = 0
    public var wearLocation: UInt32 = 0
    public var flag: UInt8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        index = try decoder.decode(UInt16.self)
        wearLocation = try decoder.decode(UInt32.self)
        flag = try decoder.decode(UInt8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(index)
        try encoder.encode(wearLocation)
        try encoder.encode(flag)
    }
}

public struct PACKET_ZC_CLOSE_STORE: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2)
    }
    public var packetType: Int16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
    }
}

public struct PACKET_ZC_DELETE_ITEM_FROM_STORE: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2 + 4)
    }
    public var packetType: Int16 = 0
    public var index: UInt16 = 0
    public var amount: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        index = try decoder.decode(UInt16.self)
        amount = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(index)
        try encoder.encode(amount)
    }
}

public struct PACKET_ZC_NOTIFY_STOREITEM_COUNTINFO: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2 + 2)
    }
    public var packetType: Int16 = 0
    public var amount: UInt16 = 0
    public var max_amount: UInt16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        amount = try decoder.decode(UInt16.self)
        max_amount = try decoder.decode(UInt16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(amount)
        try encoder.encode(max_amount)
    }
}

public struct PACKET_ZC_EXCHANGEITEM_UNDO: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2)
    }
    public var packetType: Int16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
    }
}

public struct PACKET_ZC_EXEC_EXCHANGE_ITEM: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 1)
    }
    public var packetType: Int16 = 0
    public var result: UInt8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        result = try decoder.decode(UInt8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(result)
    }
}

public struct PACKET_ZC_CANCEL_EXCHANGE_ITEM: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2)
    }
    public var packetType: Int16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
    }
}

public struct PACKET_ZC_CONCLUDE_EXCHANGE_ITEM: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 1)
    }
    public var packetType: Int16 = 0
    public var who: UInt8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        who = try decoder.decode(UInt8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(who)
    }
}

public struct PACKET_ZC_ACK_CREATE_CHATROOM: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 1)
    }
    public var packetType: Int16 = 0
    public var flag: UInt8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        flag = try decoder.decode(UInt8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(flag)
    }
}

public struct PACKET_ZC_REFUSE_ENTER_ROOM: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 1)
    }
    public var packetType: Int16 = 0
    public var result: UInt8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        result = try decoder.decode(UInt8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(result)
    }
}

public struct PACKET_ZC_DESTROY_ROOM: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4)
    }
    public var packetType: Int16 = 0
    public var chatId: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        chatId = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(chatId)
    }
}

public struct PACKET_ZC_ENTER_ROOM_sub: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (4 + 24)
    }
    public var flag: UInt32 = 0
    @FixedLengthString(lengthOfBytes: 24)
    public var name: String
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        flag = try decoder.decode(UInt32.self)
        name = try decoder.decode(String.self, lengthOfBytes: 24)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(flag)
        try encoder.encode(name, lengthOfBytes: 24)
    }
}

public struct PACKET_ZC_ENTER_ROOM: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        -1
    }
    public var packetType: Int16 = 0
    public var packetLength: Int16 = 0
    public var chatId: UInt32 = 0
    public var members: [PACKET_ZC_ENTER_ROOM_sub] = []
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        packetLength = try decoder.decode(Int16.self)
        chatId = try decoder.decode(UInt32.self)
        members = try decoder.decode([PACKET_ZC_ENTER_ROOM_sub].self, count: (Int(packetLength) - (2 + 2 + 4)) / (4 + 24))
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(packetLength)
        try encoder.encode(chatId)
        try encoder.encode(members)
    }
}

public struct PACKET_ZC_NPC_SHOWEFST_UPDATE: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 4 + 4 + 4)
    }
    public var packetType: Int16 = 0
    public var gid: UInt32 = 0
    public var effectState: UInt32 = 0
    public var level: Int32 = 0
    public var showEFST: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        gid = try decoder.decode(UInt32.self)
        effectState = try decoder.decode(UInt32.self)
        level = try decoder.decode(Int32.self)
        showEFST = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(gid)
        try encoder.encode(effectState)
        try encoder.encode(level)
        try encoder.encode(showEFST)
    }
}

public struct PACKET_ZC_ACTION_FAILURE: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2)
    }
    public var packetType: Int16 = 0
    public var type: UInt16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        type = try decoder.decode(UInt16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(type)
    }
}

public struct PACKET_ZC_NOTIFY_EFFECT: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 4)
    }
    public var packetType: Int16 = 0
    public var aid: UInt32 = 0
    public var effectId: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        aid = try decoder.decode(UInt32.self)
        effectId = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(aid)
        try encoder.encode(effectId)
    }
}

public struct PACKET_ZC_ACK_ITEMCOMPOSITION: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2 + 2 + 1)
    }
    public var packetType: Int16 = 0
    public var equipIndex: UInt16 = 0
    public var cardIndex: UInt16 = 0
    public var result: UInt8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        equipIndex = try decoder.decode(UInt16.self)
        cardIndex = try decoder.decode(UInt16.self)
        result = try decoder.decode(UInt8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(equipIndex)
        try encoder.encode(cardIndex)
        try encoder.encode(result)
    }
}

public struct PACKET_ZC_ACK_ITEMIDENTIFY: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2 + 1)
    }
    public var packetType: Int16 = 0
    public var index: UInt16 = 0
    public var result: UInt8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        index = try decoder.decode(UInt16.self)
        result = try decoder.decode(UInt8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(index)
        try encoder.encode(result)
    }
}

public struct PACKET_ZC_ACK_ITEMREPAIR: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2 + 1)
    }
    public var packetType: Int16 = 0
    public var index: UInt16 = 0
    public var result: UInt8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        index = try decoder.decode(UInt16.self)
        result = try decoder.decode(UInt8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(index)
        try encoder.encode(result)
    }
}

public struct PACKET_ZC_EQUIPITEM_DAMAGED: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2 + 4)
    }
    public var packetType: Int16 = 0
    public var equipLocation: UInt16 = 0
    public var GID: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        equipLocation = try decoder.decode(UInt16.self)
        GID = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(equipLocation)
        try encoder.encode(GID)
    }
}

public struct PACKET_ZC_DELETE_ITEM_FROM_CART: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2 + 4)
    }
    public var packetType: Int16 = 0
    public var index: UInt16 = 0
    public var amount: Int32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        index = try decoder.decode(UInt16.self)
        amount = try decoder.decode(Int32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(index)
        try encoder.encode(amount)
    }
}

public struct PACKET_ZC_OPENSTORE: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2)
    }
    public var packetType: Int16 = 0
    public var num: UInt16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        num = try decoder.decode(UInt16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(num)
    }
}

public struct PACKET_ZC_PC_PURCHASE_RESULT_FROMMC: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2 + 2 + 1)
    }
    public var packetType: Int16 = 0
    public var index: UInt16 = 0
    public var amount: UInt16 = 0
    public var result: UInt8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        index = try decoder.decode(UInt16.self)
        amount = try decoder.decode(UInt16.self)
        result = try decoder.decode(UInt8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(index)
        try encoder.encode(amount)
        try encoder.encode(result)
    }
}

public struct PACKET_ZC_ACK_OPENSTORE2: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 1)
    }
    public var packetType: Int16 = 0
    public var result: UInt8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        result = try decoder.decode(UInt8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(result)
    }
}

public struct PACKET_ZC_SKILL_DISAPPEAR: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4)
    }
    public var packetType: Int16 = 0
    public var GID: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        GID = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(GID)
    }
}

public struct PACKET_ZC_SKILLINFO_DELETE: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2)
    }
    public var packetType: Int16 = 0
    public var skillID: UInt16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        skillID = try decoder.decode(UInt16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(skillID)
    }
}

public struct PACKET_ZC_SKILL_UPDATE: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4)
    }
    public var packetType: Int16 = 0
    public var GID: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        GID = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(GID)
    }
}

public struct PACKET_ZC_HIGHJUMP: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 2 + 2)
    }
    public var packetType: Int16 = 0
    public var srcId: UInt32 = 0
    public var x: UInt16 = 0
    public var y: UInt16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        srcId = try decoder.decode(UInt32.self)
        x = try decoder.decode(UInt16.self)
        y = try decoder.decode(UInt16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(srcId)
        try encoder.encode(x)
        try encoder.encode(y)
    }
}

public struct PACKET_ZC_RECOVERY: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2 + 4)
    }
    public var packetType: Int16 = 0
    public var type: UInt16 = 0
    public var amount: Int32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        type = try decoder.decode(UInt16.self)
        amount = try decoder.decode(Int32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(type)
        try encoder.encode(amount)
    }
}

public struct PACKET_ZC_ACK_WHISPER: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 1 + 4)
    }
    public var packetType: Int16 = 0
    public var result: UInt8 = 0
    public var CID: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        result = try decoder.decode(UInt8.self)
        CID = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(result)
        try encoder.encode(CID)
    }
}

public struct PACKET_ZC_ACK_ADDITEM_TO_CART: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 1)
    }
    public var packetType: Int16 = 0
    public var result: UInt8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        result = try decoder.decode(UInt8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(result)
    }
}

public struct PACKET_ZC_DELETEITEM_FROM_MCSTORE: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2 + 2 + 4 + 4 + 4)
    }
    public var packetType: Int16 = 0
    public var index: UInt16 = 0
    public var amount: UInt16 = 0
    public var buyerCID: UInt32 = 0
    public var date: UInt32 = 0
    public var zeny: Int32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        index = try decoder.decode(UInt16.self)
        amount = try decoder.decode(UInt16.self)
        buyerCID = try decoder.decode(UInt32.self)
        date = try decoder.decode(UInt32.self)
        zeny = try decoder.decode(Int32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(index)
        try encoder.encode(amount)
        try encoder.encode(buyerCID)
        try encoder.encode(date)
        try encoder.encode(zeny)
    }
}

public struct PACKET_CZ_REQ_BAN_GUILD: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 4 + 4 + 40)
    }
    public var packetType: Int16 = 0
    public var guild_id: UInt32 = 0
    public var AID: UInt32 = 0
    public var CID: UInt32 = 0
    @FixedLengthString(lengthOfBytes: 40)
    public var message: String
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        guild_id = try decoder.decode(UInt32.self)
        AID = try decoder.decode(UInt32.self)
        CID = try decoder.decode(UInt32.self)
        message = try decoder.decode(String.self, lengthOfBytes: 40)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(guild_id)
        try encoder.encode(AID)
        try encoder.encode(CID)
        try encoder.encode(message, lengthOfBytes: 40)
    }
}

public struct PACKET_CZ_REQ_LEAVE_GUILD: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 4 + 4 + 40)
    }
    public var packetType: Int16 = 0
    public var guild_id: UInt32 = 0
    public var AID: UInt32 = 0
    public var CID: UInt32 = 0
    @FixedLengthString(lengthOfBytes: 40)
    public var message: String
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        guild_id = try decoder.decode(UInt32.self)
        AID = try decoder.decode(UInt32.self)
        CID = try decoder.decode(UInt32.self)
        message = try decoder.decode(String.self, lengthOfBytes: 40)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(guild_id)
        try encoder.encode(AID)
        try encoder.encode(CID)
        try encoder.encode(message, lengthOfBytes: 40)
    }
}

public struct PACKET_CZ_REQ_DISORGANIZE_GUILD: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 40)
    }
    public var packetType: Int16 = 0
    @FixedLengthString(lengthOfBytes: 40)
    public var key: String
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        key = try decoder.decode(String.self, lengthOfBytes: 40)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(key, lengthOfBytes: 40)
    }
}

public struct PACKET_ZC_ACK_DISORGANIZE_GUILD_RESULT: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4)
    }
    public var packetType: Int16 = 0
    public var result: Int32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        result = try decoder.decode(Int32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(result)
    }
}

public struct PACKET_ZC_RESULT_MAKE_GUILD: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 1)
    }
    public var packetType: Int16 = 0
    public var result: UInt8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        result = try decoder.decode(UInt8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(result)
    }
}

public struct PACKET_CZ_REQ_JOIN_GUILD: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 4 + 4)
    }
    public var packetType: Int16 = 0
    public var AID: UInt32 = 0
    public var inviter_AID: UInt32 = 0
    public var inviter_CID: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        AID = try decoder.decode(UInt32.self)
        inviter_AID = try decoder.decode(UInt32.self)
        inviter_CID = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(AID)
        try encoder.encode(inviter_AID)
        try encoder.encode(inviter_CID)
    }
}

public struct PACKET_ZC_ACK_REQ_JOIN_GUILD: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 1)
    }
    public var packetType: Int16 = 0
    public var result: UInt8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        result = try decoder.decode(UInt8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(result)
    }
}

public struct PACKET_ZC_REQ_JOIN_GUILD: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 24)
    }
    public var packetType: Int16 = 0
    public var guild_id: UInt32 = 0
    @FixedLengthString(lengthOfBytes: 24)
    public var guild_name: String
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        guild_id = try decoder.decode(UInt32.self)
        guild_name = try decoder.decode(String.self, lengthOfBytes: 24)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(guild_id)
        try encoder.encode(guild_name, lengthOfBytes: 24)
    }
}

public struct PACKET_CZ_JOIN_GUILD: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 4)
    }
    public var packetType: Int16 = 0
    public var guild_id: UInt32 = 0
    public var answer: Int32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        guild_id = try decoder.decode(UInt32.self)
        answer = try decoder.decode(Int32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(guild_id)
        try encoder.encode(answer)
    }
}

public struct PACKET_ZC_GUILD_NOTICE: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 60 + 120)
    }
    public var packetType: Int16 = 0
    @FixedLengthString(lengthOfBytes: 60)
    public var subject: String
    @FixedLengthString(lengthOfBytes: 120)
    public var notice: String
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        subject = try decoder.decode(String.self, lengthOfBytes: 60)
        notice = try decoder.decode(String.self, lengthOfBytes: 120)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(subject, lengthOfBytes: 60)
        try encoder.encode(notice, lengthOfBytes: 120)
    }
}

public struct PACKET_CZ_REQ_JOIN_GUILD2: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 24)
    }
    public var packetType: Int16 = 0
    @FixedLengthString(lengthOfBytes: 24)
    public var name: String
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        name = try decoder.decode(String.self, lengthOfBytes: 24)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(name, lengthOfBytes: 24)
    }
}

public struct PACKET_CZ_REQ_JOIN_GROUP: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4)
    }
    public var packetType: Int16 = 0
    public var AID: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        AID = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(AID)
    }
}

public struct PACKET_CZ_JOIN_GROUP: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 4)
    }
    public var packetType: Int16 = 0
    public var party_id: UInt32 = 0
    public var flag: Int32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        party_id = try decoder.decode(UInt32.self)
        flag = try decoder.decode(Int32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(party_id)
        try encoder.encode(flag)
    }
}

public struct PACKET_CZ_REQ_LEAVE_GROUP: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2)
    }
    public var packetType: Int16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
    }
}

public struct PACKET_CZ_REQ_EXPEL_GROUP_MEMBER: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 24)
    }
    public var packetType: Int16 = 0
    public var AID: UInt32 = 0
    @FixedLengthString(lengthOfBytes: 24)
    public var name: String
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        AID = try decoder.decode(UInt32.self)
        name = try decoder.decode(String.self, lengthOfBytes: 24)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(AID)
        try encoder.encode(name, lengthOfBytes: 24)
    }
}

public struct PACKET_CZ_PARTY_JOIN_REQ: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 24)
    }
    public var packetType: Int16 = 0
    @FixedLengthString(lengthOfBytes: 24)
    public var name: String
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        name = try decoder.decode(String.self, lengthOfBytes: 24)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(name, lengthOfBytes: 24)
    }
}

public struct PACKET_CZ_PARTY_JOIN_REQ_ACK: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 1)
    }
    public var packetType: Int16 = 0
    public var party_id: UInt32 = 0
    public var flag: UInt8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        party_id = try decoder.decode(UInt32.self)
        flag = try decoder.decode(UInt8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(party_id)
        try encoder.encode(flag)
    }
}

public struct PACKET_ZC_HO_PAR_CHANGE: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2 + 8)
    }
    public var packetType: Int16 = 0
    public var type: UInt16 = 0
    public var value: UInt64 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        type = try decoder.decode(UInt16.self)
        value = try decoder.decode(UInt64.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(type)
        try encoder.encode(value)
    }
}

public struct PACKET_ZC_EL_PAR_CHANGE: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2 + 4)
    }
    public var packetType: Int16 = 0
    public var type: UInt16 = 0
    public var value: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        type = try decoder.decode(UInt16.self)
        value = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(type)
        try encoder.encode(value)
    }
}

public struct PACKET_ZC_NOTIFY_ACT: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 4 + 4 + 4 + 4 + 4 + 1 + 2 + 1 + 4)
    }
    public var packetType: Int16 = 0
    public var srcID: Int32 = 0
    public var targetID: Int32 = 0
    public var serverTick: Int32 = 0
    public var srcSpeed: Int32 = 0
    public var dmgSpeed: Int32 = 0
    public var damage: Int32 = 0
    public var isSPDamage: Int8 = 0
    public var div: UInt16 = 0
    public var type: UInt8 = 0
    public var damage2: Int32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        srcID = try decoder.decode(Int32.self)
        targetID = try decoder.decode(Int32.self)
        serverTick = try decoder.decode(Int32.self)
        srcSpeed = try decoder.decode(Int32.self)
        dmgSpeed = try decoder.decode(Int32.self)
        damage = try decoder.decode(Int32.self)
        isSPDamage = try decoder.decode(Int8.self)
        div = try decoder.decode(UInt16.self)
        type = try decoder.decode(UInt8.self)
        damage2 = try decoder.decode(Int32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(srcID)
        try encoder.encode(targetID)
        try encoder.encode(serverTick)
        try encoder.encode(srcSpeed)
        try encoder.encode(dmgSpeed)
        try encoder.encode(damage)
        try encoder.encode(isSPDamage)
        try encoder.encode(div)
        try encoder.encode(type)
        try encoder.encode(damage2)
    }
}

public struct PACKET_CZ_REQUEST_MOVENPC: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + (1 * 3))
    }
    public var packetType: Int16 = 0
    public var GID: UInt32 = 0
    @FixedSizeArray(size: 3, initialValue: 0)
    public var PosDir: [UInt8]
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        GID = try decoder.decode(UInt32.self)
        PosDir = try decoder.decode([UInt8].self, count: 3)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(GID)
        try encoder.encode(PosDir)
    }
}

public struct PACKET_ZC_NPCSPRITE_CHANGE: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 1 + 4)
    }
    public var packetType: Int16 = 0
    public var GID: UInt32 = 0
    public var type: UInt8 = 0
    public var class_: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        GID = try decoder.decode(UInt32.self)
        type = try decoder.decode(UInt8.self)
        class_ = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(GID)
        try encoder.encode(type)
        try encoder.encode(class_)
    }
}

public struct PACKET_ZC_MEMBER_NEWENTRY: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2 + 24)
    }
    public var packetType: Int16 = 0
    public var count: UInt16 = 0
    @FixedLengthString(lengthOfBytes: 24)
    public var name: String
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        count = try decoder.decode(UInt16.self)
        name = try decoder.decode(String.self, lengthOfBytes: 24)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(count)
        try encoder.encode(name, lengthOfBytes: 24)
    }
}

public struct PACKET_ZC_MEMBER_EXIT: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2 + 24 + 1)
    }
    public var packetType: Int16 = 0
    public var count: UInt16 = 0
    @FixedLengthString(lengthOfBytes: 24)
    public var name: String
    public var kicked: UInt8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        count = try decoder.decode(UInt16.self)
        name = try decoder.decode(String.self, lengthOfBytes: 24)
        kicked = try decoder.decode(UInt8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(count)
        try encoder.encode(name, lengthOfBytes: 24)
        try encoder.encode(kicked)
    }
}

public struct PACKET_CZ_MOVETO_MAP: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 16 + 2 + 2)
    }
    public var packetType: Int16 = 0
    @FixedLengthString(lengthOfBytes: 16)
    public var map: String
    public var x: UInt16 = 0
    public var y: UInt16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        map = try decoder.decode(String.self, lengthOfBytes: 16)
        x = try decoder.decode(UInt16.self)
        y = try decoder.decode(UInt16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(map, lengthOfBytes: 16)
        try encoder.encode(x)
        try encoder.encode(y)
    }
}

public struct PACKET_CZ_BROADCAST: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        -1
    }
    public var packetType: Int16 = 0
    public var packetLength: Int16 = 0
    public var message: String = ""
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        packetLength = try decoder.decode(Int16.self)
        message = try decoder.decode(String.self, lengthOfBytes: (Int(packetLength) - (2 + 2)))
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(packetLength)
        try encoder.encode(message)
    }
}

public struct PACKET_CZ_REQ_WEAR_EQUIP: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2 + 4)
    }
    public var packetType: Int16 = 0
    public var index: UInt16 = 0
    public var position: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        index = try decoder.decode(UInt16.self)
        position = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(index)
        try encoder.encode(position)
    }
}

public struct PACKET_CZ_ACK_SELECT_DEALTYPE: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 1)
    }
    public var packetType: Int16 = 0
    public var GID: UInt32 = 0
    public var type: UInt8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        GID = try decoder.decode(UInt32.self)
        type = try decoder.decode(UInt8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(GID)
        try encoder.encode(type)
    }
}

public struct PACKET_CZ_CREATE_CHATROOM: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        -1
    }
    public var packetType: Int16 = 0
    public var packetLength: Int16 = 0
    public var limit: UInt16 = 0
    public var type: UInt8 = 0
    @FixedLengthString(lengthOfBytes: 8)
    public var password: String
    public var title: String = ""
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        packetLength = try decoder.decode(Int16.self)
        limit = try decoder.decode(UInt16.self)
        type = try decoder.decode(UInt8.self)
        password = try decoder.decode(String.self, lengthOfBytes: 8)
        title = try decoder.decode(String.self, lengthOfBytes: (Int(packetLength) - (2 + 2 + 2 + 1 + 8)))
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(packetLength)
        try encoder.encode(limit)
        try encoder.encode(type)
        try encoder.encode(password, lengthOfBytes: 8)
        try encoder.encode(title)
    }
}

public struct PACKET_CZ_BLACKSMITH_RANK: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2)
    }
    public var packetType: Int16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
    }
}

public struct PACKET_CZ_ALCHEMIST_RANK: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2)
    }
    public var packetType: Int16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
    }
}

public struct PACKET_ZC_BLACKSMITH_RANK: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + (10 + (4 * 10)))
    }
    public var packetType: Int16 = 0
    public var list: RANKLIST = RANKLIST()
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        list = try decoder.decode(RANKLIST.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(list)
    }
}

public struct PACKET_ZC_ALCHEMIST_RANK: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + (10 + (4 * 10)))
    }
    public var packetType: Int16 = 0
    public var list: RANKLIST = RANKLIST()
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        list = try decoder.decode(RANKLIST.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(list)
    }
}

public struct PACKET_ZC_BLACKSMITH_POINT: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 4)
    }
    public var packetType: Int16 = 0
    public var points: UInt32 = 0
    public var points_total: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        points = try decoder.decode(UInt32.self)
        points_total = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(points)
        try encoder.encode(points_total)
    }
}

public struct PACKET_ZC_ALCHEMIST_POINT: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 4)
    }
    public var packetType: Int16 = 0
    public var points: UInt32 = 0
    public var points_total: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        points = try decoder.decode(UInt32.self)
        points_total = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(points)
        try encoder.encode(points_total)
    }
}

public struct PACKET_ZC_TAEKWON_POINT: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 4)
    }
    public var packetType: Int16 = 0
    public var points: UInt32 = 0
    public var points_total: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        points = try decoder.decode(UInt32.self)
        points_total = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(points)
        try encoder.encode(points_total)
    }
}

public struct PACKET_CZ_TAEKWON_RANK: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2)
    }
    public var packetType: Int16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
    }
}

public struct PACKET_ZC_TAEKWON_RANK: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + (10 + (4 * 10)))
    }
    public var packetType: Int16 = 0
    public var list: RANKLIST = RANKLIST()
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        list = try decoder.decode(RANKLIST.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(list)
    }
}

public struct PACKET_ZC_KILLER_POINT: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 4)
    }
    public var packetType: Int16 = 0
    public var points: UInt32 = 0
    public var points_total: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        points = try decoder.decode(UInt32.self)
        points_total = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(points)
        try encoder.encode(points_total)
    }
}

public struct PACKET_CZ_KILLER_RANK: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2)
    }
    public var packetType: Int16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
    }
}

public struct PACKET_ZC_KILLER_RANK: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + (10 + (4 * 10)))
    }
    public var packetType: Int16 = 0
    public var list: RANKLIST = RANKLIST()
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        list = try decoder.decode(RANKLIST.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(list)
    }
}

public struct PACKET_CZ_REQ_RANKING: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2)
    }
    public var packetType: Int16 = 0
    public var type: UInt16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        type = try decoder.decode(UInt16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(type)
    }
}

public struct PACKET_ZC_ACK_RANKING_sub: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (24 + 4)
    }
    @FixedLengthString(lengthOfBytes: 24)
    public var name: String
    public var points: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        name = try decoder.decode(String.self, lengthOfBytes: 24)
        points = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(name, lengthOfBytes: 24)
        try encoder.encode(points)
    }
}

public struct PACKET_ZC_ACK_RANKING: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2 + (10 + (4 * 10)) + 4)
    }
    public var packetType: Int16 = 0
    public var type: UInt16 = 0
    public var list: RANKLIST = RANKLIST()
    public var mypoints: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        type = try decoder.decode(UInt16.self)
        list = try decoder.decode(RANKLIST.self)
        mypoints = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(type)
        try encoder.encode(list)
        try encoder.encode(mypoints)
    }
}

public struct PACKET_ZC_UPDATE_RANKING_POINT: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2 + 4 + 4)
    }
    public var packetType: Int16 = 0
    public var type: UInt16 = 0
    public var points: UInt32 = 0
    public var points_total: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        type = try decoder.decode(UInt16.self)
        points = try decoder.decode(UInt32.self)
        points_total = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(type)
        try encoder.encode(points)
        try encoder.encode(points_total)
    }
}

public struct PACKET_ZC_ACK_RANKING2: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2 + (4 * 10) + (4 * 10) + 4)
    }
    public var packetType: Int16 = 0
    public var type: UInt16 = 0
    @FixedSizeArray(size: 10, initialValue: 0)
    public var CIDs: [UInt32]
    @FixedSizeArray(size: 10, initialValue: 0)
    public var points: [UInt32]
    public var mypoints: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        type = try decoder.decode(UInt16.self)
        CIDs = try decoder.decode([UInt32].self, count: 10)
        points = try decoder.decode([UInt32].self, count: 10)
        mypoints = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(type)
        try encoder.encode(CIDs)
        try encoder.encode(points)
        try encoder.encode(mypoints)
    }
}

public struct PACKET_CZ_LESSEFFECT: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4)
    }
    public var packetType: Int16 = 0
    public var state: Int32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        state = try decoder.decode(Int32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(state)
    }
}

public struct PACKET_CZ_ACTIVE_QUEST: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 1)
    }
    public var packetType: Int16 = 0
    public var quest_id: UInt32 = 0
    public var active: UInt8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        quest_id = try decoder.decode(UInt32.self)
        active = try decoder.decode(UInt8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(quest_id)
        try encoder.encode(active)
    }
}

public struct PACKET_CZ_JOIN_BABY: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 4 + 4)
    }
    public var packetType: Int16 = 0
    public var father_AID: UInt32 = 0
    public var mother_AID: UInt32 = 0
    public var accepted: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        father_AID = try decoder.decode(UInt32.self)
        mother_AID = try decoder.decode(UInt32.self)
        accepted = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(father_AID)
        try encoder.encode(mother_AID)
        try encoder.encode(accepted)
    }
}

public struct PACKET_CZ_AUCTION_ITEM_SEARCH: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2 + 4 + 24 + 2)
    }
    public var packetType: Int16 = 0
    public var type: UInt16 = 0
    public var auction_id: UInt32 = 0
    @FixedLengthString(lengthOfBytes: 24)
    public var text: String
    public var page: UInt16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        type = try decoder.decode(UInt16.self)
        auction_id = try decoder.decode(UInt32.self)
        text = try decoder.decode(String.self, lengthOfBytes: 24)
        page = try decoder.decode(UInt16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(type)
        try encoder.encode(auction_id)
        try encoder.encode(text, lengthOfBytes: 24)
        try encoder.encode(page)
    }
}

public struct PACKET_CZ_AUCTION_BUY: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 4)
    }
    public var packetType: Int16 = 0
    public var auction_id: UInt32 = 0
    public var money: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        auction_id = try decoder.decode(UInt32.self)
        money = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(auction_id)
        try encoder.encode(money)
    }
}

public struct PACKET_CZ_AUCTION_ADD: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 4 + 2)
    }
    public var packetType: Int16 = 0
    public var now_money: UInt32 = 0
    public var max_money: UInt32 = 0
    public var hours: UInt16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        now_money = try decoder.decode(UInt32.self)
        max_money = try decoder.decode(UInt32.self)
        hours = try decoder.decode(UInt16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(now_money)
        try encoder.encode(max_money)
        try encoder.encode(hours)
    }
}

public struct PACKET_ZC_DRESSROOM_OPEN: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2)
    }
    public var packetType: Int16 = 0
    public var view: UInt16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        view = try decoder.decode(UInt16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(view)
    }
}

public struct PACKET_ZC_ROOM_NEWENTRY: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        -1
    }
    public var packetType: Int16 = 0
    public var packetLength: Int16 = 0
    public var owner: Int32 = 0
    public var id: Int32 = 0
    public var limit: UInt16 = 0
    public var users: UInt16 = 0
    public var type: UInt8 = 0
    public var title: String = ""
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        packetLength = try decoder.decode(Int16.self)
        owner = try decoder.decode(Int32.self)
        id = try decoder.decode(Int32.self)
        limit = try decoder.decode(UInt16.self)
        users = try decoder.decode(UInt16.self)
        type = try decoder.decode(UInt8.self)
        title = try decoder.decode(String.self, lengthOfBytes: (Int(packetLength) - (2 + 2 + 4 + 4 + 2 + 2 + 1)))
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(packetLength)
        try encoder.encode(owner)
        try encoder.encode(id)
        try encoder.encode(limit)
        try encoder.encode(users)
        try encoder.encode(type)
        try encoder.encode(title)
    }
}

public struct PACKET_ZC_MONSTER_INFO: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2 + 2 + 2 + 4 + 2 + 2 + 2 + 2 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1)
    }
    public var packetType: Int16 = 0
    public var class_: UInt16 = 0
    public var level: UInt16 = 0
    public var size: UInt16 = 0
    public var hp: UInt32 = 0
    public var def: Int16 = 0
    public var race: UInt16 = 0
    public var mdef: Int16 = 0
    public var element: UInt16 = 0
    public var water: UInt8 = 0
    public var earth: UInt8 = 0
    public var fire: UInt8 = 0
    public var wind: UInt8 = 0
    public var poison: UInt8 = 0
    public var holy: UInt8 = 0
    public var shadow: UInt8 = 0
    public var ghost: UInt8 = 0
    public var undead: UInt8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        class_ = try decoder.decode(UInt16.self)
        level = try decoder.decode(UInt16.self)
        size = try decoder.decode(UInt16.self)
        hp = try decoder.decode(UInt32.self)
        def = try decoder.decode(Int16.self)
        race = try decoder.decode(UInt16.self)
        mdef = try decoder.decode(Int16.self)
        element = try decoder.decode(UInt16.self)
        water = try decoder.decode(UInt8.self)
        earth = try decoder.decode(UInt8.self)
        fire = try decoder.decode(UInt8.self)
        wind = try decoder.decode(UInt8.self)
        poison = try decoder.decode(UInt8.self)
        holy = try decoder.decode(UInt8.self)
        shadow = try decoder.decode(UInt8.self)
        ghost = try decoder.decode(UInt8.self)
        undead = try decoder.decode(UInt8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(class_)
        try encoder.encode(level)
        try encoder.encode(size)
        try encoder.encode(hp)
        try encoder.encode(def)
        try encoder.encode(race)
        try encoder.encode(mdef)
        try encoder.encode(element)
        try encoder.encode(water)
        try encoder.encode(earth)
        try encoder.encode(fire)
        try encoder.encode(wind)
        try encoder.encode(poison)
        try encoder.encode(holy)
        try encoder.encode(shadow)
        try encoder.encode(ghost)
        try encoder.encode(undead)
    }
}

public struct PACKET_ZC_ACK_REQNAME_BYGID: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2 + 4 + 24)
    }
    public var packetType: Int16 = 0
    public var flag: UInt16 = 0
    public var CID: UInt32 = 0
    @FixedLengthString(lengthOfBytes: 24)
    public var name: String
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        flag = try decoder.decode(UInt16.self)
        CID = try decoder.decode(UInt32.self)
        name = try decoder.decode(String.self, lengthOfBytes: 24)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(flag)
        try encoder.encode(CID)
        try encoder.encode(name, lengthOfBytes: 24)
    }
}

public struct PACKET_ZC_PET_ACT: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 4)
    }
    public var packetType: Int16 = 0
    public var GID: UInt32 = 0
    public var data: Int32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        GID = try decoder.decode(UInt32.self)
        data = try decoder.decode(Int32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(GID)
        try encoder.encode(data)
    }
}

public struct PACKET_ZC_COMBODELAY: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 4)
    }
    public var packetType: Int16 = 0
    public var AID: UInt32 = 0
    public var delay: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        AID = try decoder.decode(UInt32.self)
        delay = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(AID)
        try encoder.encode(delay)
    }
}

public struct PACKET_ZC_BLADESTOP: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 4 + 4)
    }
    public var packetType: Int16 = 0
    public var srcId: UInt32 = 0
    public var targetId: UInt32 = 0
    public var flag: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        srcId = try decoder.decode(UInt32.self)
        targetId = try decoder.decode(UInt32.self)
        flag = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(srcId)
        try encoder.encode(targetId)
        try encoder.encode(flag)
    }
}

public struct PACKET_ZC_MVP: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4)
    }
    public var packetType: Int16 = 0
    public var AID: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        AID = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(AID)
    }
}

public struct PACKET_ZC_MVP_GETTING_SPECIAL_EXP: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4)
    }
    public var packetType: Int16 = 0
    public var exp: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        exp = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(exp)
    }
}

public struct PACKET_ZC_THROW_MVPITEM: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2)
    }
    public var packetType: Int16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
    }
}

public struct PACKET_ZC_UPDATE_MAPINFO: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2 + 2 + 2 + 16)
    }
    public var packetType: Int16 = 0
    public var x: Int16 = 0
    public var y: Int16 = 0
    public var type: Int16 = 0
    @FixedLengthString(lengthOfBytes: 16)
    public var mapname: String
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        x = try decoder.decode(Int16.self)
        y = try decoder.decode(Int16.self)
        type = try decoder.decode(Int16.self)
        mapname = try decoder.decode(String.self, lengthOfBytes: 16)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(x)
        try encoder.encode(y)
        try encoder.encode(type)
        try encoder.encode(mapname, lengthOfBytes: 16)
    }
}

public struct PACKET_CZ_REQ_ENTER_ROOM: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 8)
    }
    public var packetType: Int16 = 0
    public var chat_id: UInt32 = 0
    @FixedLengthString(lengthOfBytes: 8)
    public var password: String
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        chat_id = try decoder.decode(UInt32.self)
        password = try decoder.decode(String.self, lengthOfBytes: 8)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(chat_id)
        try encoder.encode(password, lengthOfBytes: 8)
    }
}

public struct PACKET_CZ_CHANGE_CHATROOM: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        -1
    }
    public var packetType: Int16 = 0
    public var packetLength: Int16 = 0
    public var limit: UInt16 = 0
    public var type: UInt8 = 0
    @FixedLengthString(lengthOfBytes: 8)
    public var password: String
    public var title: String = ""
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        packetLength = try decoder.decode(Int16.self)
        limit = try decoder.decode(UInt16.self)
        type = try decoder.decode(UInt8.self)
        password = try decoder.decode(String.self, lengthOfBytes: 8)
        title = try decoder.decode(String.self, lengthOfBytes: (Int(packetLength) - (2 + 2 + 2 + 1 + 8)))
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(packetLength)
        try encoder.encode(limit)
        try encoder.encode(type)
        try encoder.encode(password, lengthOfBytes: 8)
        try encoder.encode(title)
    }
}

public struct PACKET_CZ_ADD_EXCHANGE_ITEM: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2 + 4)
    }
    public var packetType: Int16 = 0
    public var index: UInt16 = 0
    public var amount: Int32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        index = try decoder.decode(UInt16.self)
        amount = try decoder.decode(Int32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(index)
        try encoder.encode(amount)
    }
}

public struct PACKET_CZ_MOVE_ITEM_FROM_CART_TO_BODY: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2 + 4)
    }
    public var packetType: Int16 = 0
    public var index: UInt16 = 0
    public var amount: Int32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        index = try decoder.decode(UInt16.self)
        amount = try decoder.decode(Int32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(index)
        try encoder.encode(amount)
    }
}

public struct PACKET_CZ_SELECT_WARPPOINT: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2 + 16)
    }
    public var packetType: Int16 = 0
    public var skill_id: Int16 = 0
    @FixedLengthString(lengthOfBytes: 16)
    public var mapname: String
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        skill_id = try decoder.decode(Int16.self)
        mapname = try decoder.decode(String.self, lengthOfBytes: 16)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(skill_id)
        try encoder.encode(mapname, lengthOfBytes: 16)
    }
}

public struct PACKET_CZ_INPUT_EDITDLG: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 4)
    }
    public var packetType: Int16 = 0
    public var GID: UInt32 = 0
    public var value: Int32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        GID = try decoder.decode(UInt32.self)
        value = try decoder.decode(Int32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(GID)
        try encoder.encode(value)
    }
}

public struct PACKET_CZ_INPUT_EDITDLGSTR: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        -1
    }
    public var packetType: Int16 = 0
    public var packetLength: Int16 = 0
    public var GID: Int32 = 0
    public var value: String = ""
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        packetLength = try decoder.decode(Int16.self)
        GID = try decoder.decode(Int32.self)
        value = try decoder.decode(String.self, lengthOfBytes: (Int(packetLength) - (2 + 2 + 4)))
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(packetLength)
        try encoder.encode(GID)
        try encoder.encode(value)
    }
}

public struct PACKET_CZ_CLOSE_DIALOG: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4)
    }
    public var packetType: Int16 = 0
    public var GID: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        GID = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(GID)
    }
}

public struct PACKET_CZ_RESET: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2)
    }
    public var packetType: Int16 = 0
    public var type: UInt16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        type = try decoder.decode(UInt16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(type)
    }
}

public struct PACKET_CZ_MOVE_ITEM_FROM_STORE_TO_CART: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2 + 4)
    }
    public var packetType: Int16 = 0
    public var index: UInt16 = 0
    public var amount: Int32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        index = try decoder.decode(UInt16.self)
        amount = try decoder.decode(Int32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(index)
        try encoder.encode(amount)
    }
}

public struct PACKET_CZ_REQ_ITEMIDENTIFY: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2)
    }
    public var packetType: Int16 = 0
    public var index: UInt16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        index = try decoder.decode(UInt16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(index)
    }
}

public struct PACKET_CZ_SELECTAUTOSPELL: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4)
    }
    public var packetType: Int16 = 0
    public var skill_id: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        skill_id = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(skill_id)
    }
}

public struct PACKET_CZ_REQ_ITEMCOMPOSITION_LIST: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2)
    }
    public var packetType: Int16 = 0
    public var index: UInt16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        index = try decoder.decode(UInt16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(index)
    }
}

public struct PACKET_CZ_REQ_ITEMCOMPOSITION: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2 + 2)
    }
    public var packetType: Int16 = 0
    public var index_card: UInt16 = 0
    public var index_equip: UInt16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        index_card = try decoder.decode(UInt16.self)
        index_equip = try decoder.decode(UInt16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(index_card)
        try encoder.encode(index_equip)
    }
}

public struct PACKET_CZ_LOCALBROADCAST: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        -1
    }
    public var packetType: Int16 = 0
    public var packetLength: Int16 = 0
    public var message: String = ""
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        packetLength = try decoder.decode(Int16.self)
        message = try decoder.decode(String.self, lengthOfBytes: (Int(packetLength) - (2 + 2)))
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(packetLength)
        try encoder.encode(message)
    }
}

public struct PACKET_CZ_MOVE_ITEM_FROM_CART_TO_STORE: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2 + 4)
    }
    public var packetType: Int16 = 0
    public var index: UInt16 = 0
    public var amount: Int32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        index = try decoder.decode(UInt16.self)
        amount = try decoder.decode(Int32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(index)
        try encoder.encode(amount)
    }
}

public struct PACKET_ZC_FRIENDS_STATE: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 4 + 1 + 24)
    }
    public var packetType: Int16 = 0
    public var AID: UInt32 = 0
    public var CID: UInt32 = 0
    public var offline: UInt8 = 0
    @FixedLengthString(lengthOfBytes: 24)
    public var name: String
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        AID = try decoder.decode(UInt32.self)
        CID = try decoder.decode(UInt32.self)
        offline = try decoder.decode(UInt8.self)
        name = try decoder.decode(String.self, lengthOfBytes: 24)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(AID)
        try encoder.encode(CID)
        try encoder.encode(offline)
        try encoder.encode(name, lengthOfBytes: 24)
    }
}

public struct PACKET_CZ_MAKE_GROUP: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 24)
    }
    public var packetType: Int16 = 0
    @FixedLengthString(lengthOfBytes: 24)
    public var name: String
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        name = try decoder.decode(String.self, lengthOfBytes: 24)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(name, lengthOfBytes: 24)
    }
}

public struct PACKET_CZ_MAKE_GROUP2: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 24 + 1 + 1)
    }
    public var packetType: Int16 = 0
    @FixedLengthString(lengthOfBytes: 24)
    public var name: String
    public var item_pickup: UInt8 = 0
    public var item_share: UInt8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        name = try decoder.decode(String.self, lengthOfBytes: 24)
        item_pickup = try decoder.decode(UInt8.self)
        item_share = try decoder.decode(UInt8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(name, lengthOfBytes: 24)
        try encoder.encode(item_pickup)
        try encoder.encode(item_share)
    }
}

public struct PACKET_CZ_GM_CHECKER: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 16)
    }
    public var packetType: Int16 = 0
    @FixedLengthString(lengthOfBytes: 16)
    public var mapname: String
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        mapname = try decoder.decode(String.self, lengthOfBytes: 16)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(mapname, lengthOfBytes: 16)
    }
}

public struct PACKET_ZC_GM_CHECKER: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2)
    }
    public var packetType: Int16 = 0
    public var result: Int16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        result = try decoder.decode(Int16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(result)
    }
}

public struct PACKET_ZC_CONFIG_NOTIFY: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 1)
    }
    public var packetType: Int16 = 0
    public var flag: UInt8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        flag = try decoder.decode(UInt8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(flag)
    }
}

public struct PACKET_ZC_CONGRATULATION: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4)
    }
    public var packetType: Int16 = 0
    public var GID: Int32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        GID = try decoder.decode(Int32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(GID)
    }
}

public struct PACKET_ZC_DIVORCE: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 24)
    }
    public var packetType: Int16 = 0
    @FixedLengthString(lengthOfBytes: 24)
    public var name: String
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        name = try decoder.decode(String.self, lengthOfBytes: 24)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(name, lengthOfBytes: 24)
    }
}

public struct PACKET_ZC_EMOTION: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 1)
    }
    public var packetType: Int16 = 0
    public var GID: Int32 = 0
    public var type: UInt8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        GID = try decoder.decode(Int32.self)
        type = try decoder.decode(UInt8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(GID)
        try encoder.encode(type)
    }
}

public struct PACKET_ZC_MSG: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2)
    }
    public var packetType: Int16 = 0
    public var msgId: UInt16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        msgId = try decoder.decode(UInt16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(msgId)
    }
}

public struct PACKET_ZC_MSG_SKILL: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2 + 4)
    }
    public var packetType: Int16 = 0
    public var skillId: UInt16 = 0
    public var msgId: Int32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        skillId = try decoder.decode(UInt16.self)
        msgId = try decoder.decode(Int32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(skillId)
        try encoder.encode(msgId)
    }
}

public struct PACKET_ZC_MSG_VALUE: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2 + 4)
    }
    public var packetType: Int16 = 0
    public var message: UInt16 = 0
    public var value: Int32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        message = try decoder.decode(UInt16.self)
        value = try decoder.decode(Int32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(message)
        try encoder.encode(value)
    }
}

public struct PACKET_ZC_NOTIFY_MANNER_POINT_GIVEN: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 1 + 24)
    }
    public var packetType: Int16 = 0
    public var type: UInt8 = 0
    @FixedLengthString(lengthOfBytes: 24)
    public var name: String
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        type = try decoder.decode(UInt8.self)
        name = try decoder.decode(String.self, lengthOfBytes: 24)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(type)
        try encoder.encode(name, lengthOfBytes: 24)
    }
}

public struct PACKET_ZC_NOTIFY_TIME: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4)
    }
    public var packetType: Int16 = 0
    public var time: UInt32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        time = try decoder.decode(UInt32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(time)
    }
}

public struct PACKET_ZC_SETTING_WHISPER_PC: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 1 + 1)
    }
    public var packetType: Int16 = 0
    public var type: UInt8 = 0
    public var result: UInt8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        type = try decoder.decode(UInt8.self)
        result = try decoder.decode(UInt8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(type)
        try encoder.encode(result)
    }
}

public struct PACKET_ZC_SETTING_WHISPER_STATE: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 1 + 1)
    }
    public var packetType: Int16 = 0
    public var type: UInt8 = 0
    public var result: UInt8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        type = try decoder.decode(UInt8.self)
        result = try decoder.decode(UInt8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(type)
        try encoder.encode(result)
    }
}

public struct PACKET_ZC_SKILLMSG: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4)
    }
    public var packetType: Int16 = 0
    public var msgId: Int32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        packetType = try decoder.decode(Int16.self)
        msgId = try decoder.decode(Int32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(packetType)
        try encoder.encode(msgId)
    }
}

public struct EQUIPSLOTINFO: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        ((4 * 4))
    }
    @FixedSizeArray(size: 4, initialValue: 0)
    public var card: [UInt32]
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        card = try decoder.decode([UInt32].self, count: 4)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(card)
    }
}

public struct ItemOptions: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2 + 1)
    }
    public var index: Int16 = 0
    public var value: Int16 = 0
    public var param: UInt8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        index = try decoder.decode(Int16.self)
        value = try decoder.decode(Int16.self)
        param = try decoder.decode(UInt8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(index)
        try encoder.encode(value)
        try encoder.encode(param)
    }
}

public struct NORMALITEM_INFO: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 1 + 2 + 4 + ((4 * 4)) + 4 + 1)
    }
    public var index: Int16 = 0
    public var ITID: UInt32 = 0
    public var type: UInt8 = 0
    public var count: Int16 = 0
    public var WearState: UInt32 = 0
    public var slot: EQUIPSLOTINFO = EQUIPSLOTINFO()
    public var HireExpireDate: Int32 = 0
    public var Flag: UInt8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        index = try decoder.decode(Int16.self)
        ITID = try decoder.decode(UInt32.self)
        type = try decoder.decode(UInt8.self)
        count = try decoder.decode(Int16.self)
        WearState = try decoder.decode(UInt32.self)
        slot = try decoder.decode(EQUIPSLOTINFO.self)
        HireExpireDate = try decoder.decode(Int32.self)
        Flag = try decoder.decode(UInt8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(index)
        try encoder.encode(ITID)
        try encoder.encode(type)
        try encoder.encode(count)
        try encoder.encode(WearState)
        try encoder.encode(slot)
        try encoder.encode(HireExpireDate)
        try encoder.encode(Flag)
    }
}

public struct EQUIPITEM_INFO: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 1 + 4 + 4 + ((4 * 4)) + 4 + 2 + 2 + 1 + ((2 + 2 + 1) * 5) + 1 + 1 + 1)
    }
    public var index: Int16 = 0
    public var ITID: UInt32 = 0
    public var type: UInt8 = 0
    public var location: UInt32 = 0
    public var WearState: UInt32 = 0
    public var slot: EQUIPSLOTINFO = EQUIPSLOTINFO()
    public var HireExpireDate: Int32 = 0
    public var bindOnEquipType: UInt16 = 0
    public var wItemSpriteNumber: UInt16 = 0
    public var option_count: UInt8 = 0
    @FixedSizeArray(size: 5, initialValue: ItemOptions())
    public var option_data: [ItemOptions]
    public var RefiningLevel: UInt8 = 0
    public var grade: UInt8 = 0
    public var Flag: UInt8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        index = try decoder.decode(Int16.self)
        ITID = try decoder.decode(UInt32.self)
        type = try decoder.decode(UInt8.self)
        location = try decoder.decode(UInt32.self)
        WearState = try decoder.decode(UInt32.self)
        slot = try decoder.decode(EQUIPSLOTINFO.self)
        HireExpireDate = try decoder.decode(Int32.self)
        bindOnEquipType = try decoder.decode(UInt16.self)
        wItemSpriteNumber = try decoder.decode(UInt16.self)
        option_count = try decoder.decode(UInt8.self)
        option_data = try decoder.decode([ItemOptions].self, count: 5)
        RefiningLevel = try decoder.decode(UInt8.self)
        grade = try decoder.decode(UInt8.self)
        Flag = try decoder.decode(UInt8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(index)
        try encoder.encode(ITID)
        try encoder.encode(type)
        try encoder.encode(location)
        try encoder.encode(WearState)
        try encoder.encode(slot)
        try encoder.encode(HireExpireDate)
        try encoder.encode(bindOnEquipType)
        try encoder.encode(wItemSpriteNumber)
        try encoder.encode(option_count)
        try encoder.encode(option_data)
        try encoder.encode(RefiningLevel)
        try encoder.encode(grade)
        try encoder.encode(Flag)
    }
}

public struct hotkey_data: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (1 + 4 + 2)
    }
    public var isSkill: Int8 = 0
    public var id: UInt32 = 0
    public var count: Int16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        isSkill = try decoder.decode(Int8.self)
        id = try decoder.decode(UInt32.self)
        count = try decoder.decode(Int16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(isSkill)
        try encoder.encode(id)
        try encoder.encode(count)
    }
}

public struct REPAIRITEM_INFO2: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + ((4 * 4)) + 1 + 1)
    }
    public var index: Int16 = 0
    public var itemId: UInt32 = 0
    public var slot: EQUIPSLOTINFO = EQUIPSLOTINFO()
    public var refine: UInt8 = 0
    public var grade: UInt8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        index = try decoder.decode(Int16.self)
        itemId = try decoder.decode(UInt32.self)
        slot = try decoder.decode(EQUIPSLOTINFO.self)
        refine = try decoder.decode(UInt8.self)
        grade = try decoder.decode(UInt8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(index)
        try encoder.encode(itemId)
        try encoder.encode(slot)
        try encoder.encode(refine)
        try encoder.encode(grade)
    }
}

public struct REPAIRITEM_INFO1: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 1 + ((4 * 4)))
    }
    public var index: Int16 = 0
    public var itemId: UInt32 = 0
    public var refine: UInt8 = 0
    public var slot: EQUIPSLOTINFO = EQUIPSLOTINFO()
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        index = try decoder.decode(Int16.self)
        itemId = try decoder.decode(UInt32.self)
        refine = try decoder.decode(UInt8.self)
        slot = try decoder.decode(EQUIPSLOTINFO.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(index)
        try encoder.encode(itemId)
        try encoder.encode(refine)
        try encoder.encode(slot)
    }
}

public struct ach_list_info: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (4 + 1 + (4 * 10) + 4 + 1)
    }
    public var ach_id: UInt32 = 0
    public var completed: UInt8 = 0
    @FixedSizeArray(size: 10, initialValue: 0)
    public var objective: [UInt32]
    public var completed_at: UInt32 = 0
    public var reward: UInt8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        ach_id = try decoder.decode(UInt32.self)
        completed = try decoder.decode(UInt8.self)
        objective = try decoder.decode([UInt32].self, count: 10)
        completed_at = try decoder.decode(UInt32.self)
        reward = try decoder.decode(UInt8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(ach_id)
        try encoder.encode(completed)
        try encoder.encode(objective)
        try encoder.encode(completed_at)
        try encoder.encode(reward)
    }
}

public struct SKILLDATA: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 2 + 2 + 2 + 1 + 2)
    }
    public var id: UInt16 = 0
    public var inf: Int32 = 0
    public var level: UInt16 = 0
    public var sp: UInt16 = 0
    public var range2: UInt16 = 0
    public var upFlag: UInt8 = 0
    public var level2: UInt16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        id = try decoder.decode(UInt16.self)
        inf = try decoder.decode(Int32.self)
        level = try decoder.decode(UInt16.self)
        sp = try decoder.decode(UInt16.self)
        range2 = try decoder.decode(UInt16.self)
        upFlag = try decoder.decode(UInt8.self)
        level2 = try decoder.decode(UInt16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(id)
        try encoder.encode(inf)
        try encoder.encode(level)
        try encoder.encode(sp)
        try encoder.encode(range2)
        try encoder.encode(upFlag)
        try encoder.encode(level2)
    }
}

public struct GUILD_MEMBER_INFO: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (4 + 4 + 2 + 2 + 2 + 2 + 2 + 4 + 4 + 4 + 4 + 24)
    }
    public var AID: UInt32 = 0
    public var GID: UInt32 = 0
    public var head: Int16 = 0
    public var headPalette: Int16 = 0
    public var sex: Int16 = 0
    public var job: Int16 = 0
    public var level: Int16 = 0
    public var contributionExp: Int32 = 0
    public var currentState: Int32 = 0
    public var positionID: Int32 = 0
    public var lastLoginTime: UInt32 = 0
    @FixedLengthString(lengthOfBytes: 24)
    public var char_name: String
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        AID = try decoder.decode(UInt32.self)
        GID = try decoder.decode(UInt32.self)
        head = try decoder.decode(Int16.self)
        headPalette = try decoder.decode(Int16.self)
        sex = try decoder.decode(Int16.self)
        job = try decoder.decode(Int16.self)
        level = try decoder.decode(Int16.self)
        contributionExp = try decoder.decode(Int32.self)
        currentState = try decoder.decode(Int32.self)
        positionID = try decoder.decode(Int32.self)
        lastLoginTime = try decoder.decode(UInt32.self)
        char_name = try decoder.decode(String.self, lengthOfBytes: 24)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(AID)
        try encoder.encode(GID)
        try encoder.encode(head)
        try encoder.encode(headPalette)
        try encoder.encode(sex)
        try encoder.encode(job)
        try encoder.encode(level)
        try encoder.encode(contributionExp)
        try encoder.encode(currentState)
        try encoder.encode(positionID)
        try encoder.encode(lastLoginTime)
        try encoder.encode(char_name, lengthOfBytes: 24)
    }
}

public struct GUILD_SKILLDATA: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 4 + 2 + 2 + 2 + 24 + 1)
    }
    public var id: UInt16 = 0
    public var inf: Int32 = 0
    public var level: UInt16 = 0
    public var sp: UInt16 = 0
    public var range2: UInt16 = 0
    @FixedLengthString(lengthOfBytes: 24)
    public var name: String
    public var upFlag: UInt8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        id = try decoder.decode(UInt16.self)
        inf = try decoder.decode(Int32.self)
        level = try decoder.decode(UInt16.self)
        sp = try decoder.decode(UInt16.self)
        range2 = try decoder.decode(UInt16.self)
        name = try decoder.decode(String.self, lengthOfBytes: 24)
        upFlag = try decoder.decode(UInt8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(id)
        try encoder.encode(inf)
        try encoder.encode(level)
        try encoder.encode(sp)
        try encoder.encode(range2)
        try encoder.encode(name, lengthOfBytes: 24)
        try encoder.encode(upFlag)
    }
}

public struct RELATED_GUILD_INFO: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (4 + 4 + 24)
    }
    public var relation: Int32 = 0
    public var GDID: Int32 = 0
    @FixedLengthString(lengthOfBytes: 24)
    public var guildname: String
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        relation = try decoder.decode(Int32.self)
        GDID = try decoder.decode(Int32.self)
        guildname = try decoder.decode(String.self, lengthOfBytes: 24)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(relation)
        try encoder.encode(GDID)
        try encoder.encode(guildname, lengthOfBytes: 24)
    }
}

public struct GRADE_ENCHANT_BLESSING: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (4 + 4 + 4 + 4)
    }
    public var id: Int32 = 0
    public var amount: Int32 = 0
    public var max_blessing: Int32 = 0
    public var bonus: Int32 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        id = try decoder.decode(Int32.self)
        amount = try decoder.decode(Int32.self)
        max_blessing = try decoder.decode(Int32.self)
        bonus = try decoder.decode(Int32.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(id)
        try encoder.encode(amount)
        try encoder.encode(max_blessing)
        try encoder.encode(bonus)
    }
}

public struct GRADE_ENCHANT_MATERIAL: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (4 + 4 + 4 + 4 + 1)
    }
    public var nameid: Int32 = 0
    public var amount: Int32 = 0
    public var price: Int32 = 0
    public var downgrade: Int32 = 0
    public var breakable: Int8 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        nameid = try decoder.decode(Int32.self)
        amount = try decoder.decode(Int32.self)
        price = try decoder.decode(Int32.self)
        downgrade = try decoder.decode(Int32.self)
        breakable = try decoder.decode(Int8.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(nameid)
        try encoder.encode(amount)
        try encoder.encode(price)
        try encoder.encode(downgrade)
        try encoder.encode(breakable)
    }
}

public struct CZ_PURCHASE_ITEM_FROMMC: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2)
    }
    public var count: Int16 = 0
    public var index: Int16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        count = try decoder.decode(Int16.self)
        index = try decoder.decode(Int16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(count)
        try encoder.encode(index)
    }
}

public struct RANKLIST: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (10 + (4 * 10))
    }
    @FixedLengthString(lengthOfBytes: 10)
    public var names: String
    @FixedSizeArray(size: 10, initialValue: 0)
    public var points: [UInt32]
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        names = try decoder.decode(String.self, lengthOfBytes: 10)
        points = try decoder.decode([UInt32].self, count: 10)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(names, lengthOfBytes: 10)
        try encoder.encode(points)
    }
}

public struct packet_roulette_info_ack_sub: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (2 + 2 + 4 + 2 + 2)
    }
    public var Row: UInt16 = 0
    public var Position: UInt16 = 0
    public var ItemId: UInt32 = 0
    public var Count: UInt16 = 0
    public var unused: UInt16 = 0
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        Row = try decoder.decode(UInt16.self)
        Position = try decoder.decode(UInt16.self)
        ItemId = try decoder.decode(UInt32.self)
        Count = try decoder.decode(UInt16.self)
        unused = try decoder.decode(UInt16.self)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(Row)
        try encoder.encode(Position)
        try encoder.encode(ItemId)
        try encoder.encode(Count)
        try encoder.encode(unused)
    }
}

public struct PACKET_ZC_POSITION_ID_NAME_INFO_sub: BinaryDecodable, BinaryEncodable, Sendable {
    public static var size: Int {
        (4 + 24)
    }
    public var positionID: Int32 = 0
    @FixedLengthString(lengthOfBytes: 24)
    public var posName: String
    public init() {
    }
    public init(from decoder: BinaryDecoder) throws {
        positionID = try decoder.decode(Int32.self)
        posName = try decoder.decode(String.self, lengthOfBytes: 24)
    }
    public func encode(to encoder: BinaryEncoder) throws {
        try encoder.encode(positionID)
        try encoder.encode(posName, lengthOfBytes: 24)
    }
}
