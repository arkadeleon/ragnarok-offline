//
//  common_packets.swift
//  RagnarokOffline
//
//  Generated by ROCodeGenerator.
//

import ROCore

public let HEADER_CA_LOGIN = 0x64
public let HEADER_AC_ACCEPT_LOGIN = 0xac4
public let HEADER_AC_REFUSE_LOGIN = 0x83e
//public let HEADER_SC_NOTIFY_BAN = 0x81
public let HEADER_CA_REQ_HASH = 0x1db
public let HEADER_AC_ACK_HASH = 0x1dc
public let HEADER_CA_LOGIN2 = 0x1dd
public let HEADER_CA_LOGIN3 = 0x1fa
public let HEADER_CA_CONNECT_INFO_CHANGED = 0x200
public let HEADER_CA_EXE_HASHCHECK = 0x204
public let HEADER_CA_LOGIN_PCBANG = 0x277
public let HEADER_CA_LOGIN4 = 0x27c
public let HEADER_CA_LOGIN_CHANNEL = 0x2b0
public let HEADER_CA_SSO_LOGIN_REQ = 0x825
public let HEADER_CT_AUTH = 0xacf
public let HEADER_TC_RESULT = 0xae3

public struct PACKET_CA_LOGIN: Sendable {
    public var packetType: Int16
    public var version: UInt32
    @FixedSizeArray(size: 24, initialValue: .init())
    public var username: [Int8]
    @FixedSizeArray(size: 24, initialValue: .init())
    public var password: [Int8]
    public var clienttype: UInt8
    public init() {
        packetType = .init()
        version = .init()
        clienttype = .init()
    }
}

public struct PACKET_AC_ACCEPT_LOGIN_sub: Sendable {
    public var ip: UInt32
    public var port: UInt16
    @FixedSizeArray(size: 20, initialValue: .init())
    public var name: [Int8]
    public var users: UInt16
    public var type: UInt16
    public var new_: UInt16
    @FixedSizeArray(size: 128, initialValue: .init())
    public var unknown: [UInt8]
    public init() {
        ip = .init()
        port = .init()
        users = .init()
        type = .init()
        new_ = .init()
    }
}

public struct PACKET_AC_ACCEPT_LOGIN: Sendable {
    public var packetType: Int16
    public var packetLength: Int16
    public var login_id1: UInt32
    public var AID: UInt32
    public var login_id2: UInt32
    public var last_ip: UInt32
    @FixedSizeArray(size: 26, initialValue: .init())
    public var last_login: [Int8]
    public var sex: UInt8
    @FixedSizeArray(size: 17, initialValue: .init())
    public var token: [Int8]
    public var char_servers: [PACKET_AC_ACCEPT_LOGIN_sub]
    public init() {
        packetType = .init()
        packetLength = .init()
        login_id1 = .init()
        AID = .init()
        login_id2 = .init()
        last_ip = .init()
        sex = .init()
        char_servers = .init()
    }
}

public struct PACKET_AC_REFUSE_LOGIN: Sendable {
    public var packetType: Int16
    public var error: UInt32
    @FixedSizeArray(size: 20, initialValue: .init())
    public var unblock_time: [Int8]
    public init() {
        packetType = .init()
        error = .init()
    }
}

//public struct PACKET_SC_NOTIFY_BAN: Sendable {
//    public var packetType: Int16
//    public var result: UInt8
//    public init() {
//        packetType = .init()
//        result = .init()
//    }
//}

public struct PACKET_CA_REQ_HASH: Sendable {
    public var packetType: Int16
    public init() {
        packetType = .init()
    }
}

public struct PACKET_AC_ACK_HASH: Sendable {
    public var packetType: Int16
    public var packetLength: Int16
    public var salt: [Int8]
    public init() {
        packetType = .init()
        packetLength = .init()
        salt = .init()
    }
}

public struct PACKET_CA_LOGIN2: Sendable {
    public var packetType: Int16
    public var version: UInt32
    @FixedSizeArray(size: 24, initialValue: .init())
    public var username: [Int8]
    @FixedSizeArray(size: 16, initialValue: .init())
    public var passwordMD5: [UInt8]
    public var clienttype: UInt8
    public init() {
        packetType = .init()
        version = .init()
        clienttype = .init()
    }
}

public struct PACKET_CA_LOGIN3: Sendable {
    public var packetType: Int16
    public var version: UInt32
    @FixedSizeArray(size: 24, initialValue: .init())
    public var username: [Int8]
    @FixedSizeArray(size: 16, initialValue: .init())
    public var passwordMD5: [UInt8]
    public var clienttype: UInt8
    public var clientinfo: UInt8
    public init() {
        packetType = .init()
        version = .init()
        clienttype = .init()
        clientinfo = .init()
    }
}

public struct PACKET_CA_CONNECT_INFO_CHANGED: Sendable {
    public var packetType: Int16
    @FixedSizeArray(size: 24, initialValue: .init())
    public var name: [Int8]
    public init() {
        packetType = .init()
    }
}

public struct PACKET_CA_EXE_HASHCHECK: Sendable {
    public var packetType: Int16
    @FixedSizeArray(size: 16, initialValue: .init())
    public var hash: [Int8]
    public init() {
        packetType = .init()
    }
}

public struct PACKET_CA_LOGIN_PCBANG: Sendable {
    public var packetType: Int16
    public var version: UInt32
    @FixedSizeArray(size: 24, initialValue: .init())
    public var username: [Int8]
    @FixedSizeArray(size: 24, initialValue: .init())
    public var password: [Int8]
    public var clienttype: UInt8
    @FixedSizeArray(size: 16, initialValue: .init())
    public var ip: [Int8]
    @FixedSizeArray(size: 13, initialValue: .init())
    public var mac: [Int8]
    public init() {
        packetType = .init()
        version = .init()
        clienttype = .init()
    }
}

public struct PACKET_CA_LOGIN4: Sendable {
    public var packetType: Int16
    public var version: UInt32
    @FixedSizeArray(size: 24, initialValue: .init())
    public var username: [Int8]
    @FixedSizeArray(size: 16, initialValue: .init())
    public var passwordMD5: [UInt8]
    public var clienttype: UInt8
    @FixedSizeArray(size: 13, initialValue: .init())
    public var mac: [Int8]
    public init() {
        packetType = .init()
        version = .init()
        clienttype = .init()
    }
}

public struct PACKET_CA_LOGIN_CHANNEL: Sendable {
    public var packetType: Int16
    public var version: UInt32
    @FixedSizeArray(size: 24, initialValue: .init())
    public var username: [Int8]
    @FixedSizeArray(size: 24, initialValue: .init())
    public var password: [Int8]
    public var clienttype: UInt8
    @FixedSizeArray(size: 16, initialValue: .init())
    public var ip: [Int8]
    @FixedSizeArray(size: 13, initialValue: .init())
    public var mac: [Int8]
    public var is_gravity: UInt8
    public init() {
        packetType = .init()
        version = .init()
        clienttype = .init()
        is_gravity = .init()
    }
}

public struct PACKET_CA_SSO_LOGIN_REQ: Sendable {
    public var packetType: Int16
    public var packetLength: Int16
    public var version: UInt32
    public var clienttype: UInt8
    @FixedSizeArray(size: 24, initialValue: .init())
    public var username: [Int8]
    @FixedSizeArray(size: 27, initialValue: .init())
    public var password: [Int8]
    @FixedSizeArray(size: 17, initialValue: .init())
    public var mac: [Int8]
    @FixedSizeArray(size: 15, initialValue: .init())
    public var ip: [Int8]
    public var token: [Int8]
    public init() {
        packetType = .init()
        packetLength = .init()
        version = .init()
        clienttype = .init()
        token = .init()
    }
}

public struct PACKET_CT_AUTH: Sendable {
    public var packetType: Int16
    @FixedSizeArray(size: 66, initialValue: .init())
    public var unknown: [UInt8]
    public init() {
        packetType = .init()
    }
}

public struct PACKET_TC_RESULT: Sendable {
    public var packetType: Int16
    public var packetLength: Int16
    public var type: UInt32
    @FixedSizeArray(size: 20, initialValue: .init())
    public var unknown1: [Int8]
    @FixedSizeArray(size: 6, initialValue: .init())
    public var unknown2: [Int8]
    public init() {
        packetType = .init()
        packetLength = .init()
        type = .init()
    }
}
