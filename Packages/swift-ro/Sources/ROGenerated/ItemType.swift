//
//  ItemType.swift
//  RagnarokOffline
//
//  Generated by ROGenerator.
//

public enum ItemType: Int, CodingKey, CodingKeyRepresentable, Decodable, Sendable {
    case healing = 0
    case usable = 2
    case etc = 3
    case armor = 4
    case weapon = 5
    case card = 6
    case petegg = 7
    case petarmor = 8
    case ammo = 10
    case delayconsume = 11
    case shadowgear = 12
    case cash = 18

    public init?(stringValue: String) {
        switch stringValue.uppercased() {
        case "HEALING": self = .healing
        case "USABLE": self = .usable
        case "ETC": self = .etc
        case "ARMOR": self = .armor
        case "WEAPON": self = .weapon
        case "CARD": self = .card
        case "PETEGG": self = .petegg
        case "PETARMOR": self = .petarmor
        case "AMMO": self = .ammo
        case "DELAYCONSUME": self = .delayconsume
        case "SHADOWGEAR": self = .shadowgear
        case "CASH": self = .cash
        default: return nil
        }
    }

    public init?<T>(codingKey: T) where T: CodingKey {
        self.init(stringValue: codingKey.stringValue)
    }

    public init(from decoder: any Decoder) throws {
        let container = try decoder.singleValueContainer()
        let stringValue = try container.decode(String.self)
        if let value = Self.init(stringValue: stringValue) {
            self = value
        } else {
            throw DecodingError.dataCorruptedError(in: container, debugDescription: "Could not initialize \(Self.self) from invalid string value \(stringValue)")
        }
    }
}
