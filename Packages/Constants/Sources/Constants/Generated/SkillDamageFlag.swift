//
//  SkillDamageFlag.swift
//  Constants
//
//  Generated by RagnarokOfflineGenerator.
//

/// Converted from `e_skill_nk` in `map/skill.hpp`.
public enum SkillDamageFlag: Int, CaseIterable, Sendable {
    case nodamage = 0
    case splash = 1
    case splashsplit = 2
    case ignoreatkcard = 3
    case ignoreelement = 4
    case ignoredefense = 5
    case ignoreflee = 6
    case ignoredefcard = 7
    case critical = 8
    case ignorelongcard = 9
    case simpledefense = 10
}

extension SkillDamageFlag: CodingKey {
    public var stringValue: String {
        switch self {
        case .nodamage: "NODAMAGE"
        case .splash: "SPLASH"
        case .splashsplit: "SPLASHSPLIT"
        case .ignoreatkcard: "IGNOREATKCARD"
        case .ignoreelement: "IGNOREELEMENT"
        case .ignoredefense: "IGNOREDEFENSE"
        case .ignoreflee: "IGNOREFLEE"
        case .ignoredefcard: "IGNOREDEFCARD"
        case .critical: "CRITICAL"
        case .ignorelongcard: "IGNORELONGCARD"
        case .simpledefense: "SIMPLEDEFENSE"
        }
    }

    public init?(stringValue: String) {
        switch stringValue.uppercased() {
        case "NODAMAGE": self = .nodamage
        case "SPLASH": self = .splash
        case "SPLASHSPLIT": self = .splashsplit
        case "IGNOREATKCARD": self = .ignoreatkcard
        case "IGNOREELEMENT": self = .ignoreelement
        case "IGNOREDEFENSE": self = .ignoredefense
        case "IGNOREFLEE": self = .ignoreflee
        case "IGNOREDEFCARD": self = .ignoredefcard
        case "CRITICAL": self = .critical
        case "IGNORELONGCARD": self = .ignorelongcard
        case "SIMPLEDEFENSE": self = .simpledefense
        default: return nil
        }
    }

    public var intValue: Int? {
        rawValue
    }

    public init?(intValue: Int) {
        self.init(rawValue: intValue)
    }
}

extension SkillDamageFlag: CodingKeyRepresentable {
    public var codingKey: any CodingKey {
        self
    }

    public init?<T>(codingKey: T) where T: CodingKey {
        self.init(stringValue: codingKey.stringValue)
    }
}

extension SkillDamageFlag: Decodable {
    public init(from decoder: any Decoder) throws {
        let container = try decoder.singleValueContainer()
        let stringValue = try container.decode(String.self)
        if let value = Self.init(stringValue: stringValue) {
            self = value
        } else {
            throw DecodingError.dataCorruptedError(in: container, debugDescription: "Could not initialize \(Self.self) from invalid string value \(stringValue)")
        }
    }
}
