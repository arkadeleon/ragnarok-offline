//
//  WeaponType.swift
//  Constants
//
//  Generated by RagnarokOfflineGenerator.
//

/// Converted from `weapon_type` in `map/pc.hpp`.
public enum WeaponType: Int, CaseIterable, Sendable {
    case w_fist = 0
    case w_dagger = 1
    case w_1hsword = 2
    case w_2hsword = 3
    case w_1hspear = 4
    case w_2hspear = 5
    case w_1haxe = 6
    case w_2haxe = 7
    case w_mace = 8
    case w_2hmace = 9
    case w_staff = 10
    case w_bow = 11
    case w_knuckle = 12
    case w_musical = 13
    case w_whip = 14
    case w_book = 15
    case w_katar = 16
    case w_revolver = 17
    case w_rifle = 18
    case w_gatling = 19
    case w_shotgun = 20
    case w_grenade = 21
    case w_huuma = 22
    case w_2hstaff = 23
    case w_shield = 24
}

extension WeaponType: CodingKey {
    public var stringValue: String {
        switch self {
        case .w_fist: "FIST"
        case .w_dagger: "DAGGER"
        case .w_1hsword: "1HSWORD"
        case .w_2hsword: "2HSWORD"
        case .w_1hspear: "1HSPEAR"
        case .w_2hspear: "2HSPEAR"
        case .w_1haxe: "1HAXE"
        case .w_2haxe: "2HAXE"
        case .w_mace: "MACE"
        case .w_2hmace: "2HMACE"
        case .w_staff: "STAFF"
        case .w_bow: "BOW"
        case .w_knuckle: "KNUCKLE"
        case .w_musical: "MUSICAL"
        case .w_whip: "WHIP"
        case .w_book: "BOOK"
        case .w_katar: "KATAR"
        case .w_revolver: "REVOLVER"
        case .w_rifle: "RIFLE"
        case .w_gatling: "GATLING"
        case .w_shotgun: "SHOTGUN"
        case .w_grenade: "GRENADE"
        case .w_huuma: "HUUMA"
        case .w_2hstaff: "2HSTAFF"
        case .w_shield: "SHIELD"
        }
    }

    public init?(stringValue: String) {
        switch stringValue.uppercased() {
        case "FIST": self = .w_fist
        case "DAGGER": self = .w_dagger
        case "1HSWORD": self = .w_1hsword
        case "2HSWORD": self = .w_2hsword
        case "1HSPEAR": self = .w_1hspear
        case "2HSPEAR": self = .w_2hspear
        case "1HAXE": self = .w_1haxe
        case "2HAXE": self = .w_2haxe
        case "MACE": self = .w_mace
        case "2HMACE": self = .w_2hmace
        case "STAFF": self = .w_staff
        case "BOW": self = .w_bow
        case "KNUCKLE": self = .w_knuckle
        case "MUSICAL": self = .w_musical
        case "WHIP": self = .w_whip
        case "BOOK": self = .w_book
        case "KATAR": self = .w_katar
        case "REVOLVER": self = .w_revolver
        case "RIFLE": self = .w_rifle
        case "GATLING": self = .w_gatling
        case "SHOTGUN": self = .w_shotgun
        case "GRENADE": self = .w_grenade
        case "HUUMA": self = .w_huuma
        case "2HSTAFF": self = .w_2hstaff
        case "SHIELD": self = .w_shield
        default: return nil
        }
    }

    public var intValue: Int? {
        rawValue
    }

    public init?(intValue: Int) {
        self.init(rawValue: intValue)
    }
}

extension WeaponType: CodingKeyRepresentable {
    public var codingKey: any CodingKey {
        self
    }

    public init?<T>(codingKey: T) where T: CodingKey {
        self.init(stringValue: codingKey.stringValue)
    }
}

extension WeaponType: Decodable {
    public init(from decoder: any Decoder) throws {
        let container = try decoder.singleValueContainer()
        let stringValue = try container.decode(String.self)
        if let value = Self.init(stringValue: stringValue) {
            self = value
        } else {
            throw DecodingError.dataCorruptedError(in: container, debugDescription: "Could not initialize \(Self.self) from invalid string value \(stringValue)")
        }
    }
}
