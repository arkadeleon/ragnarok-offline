//
//  Element.swift
//  Constants
//
//  Generated by RagnarokOfflineGenerator.
//

/// Converted from `e_element` in `map/map.hpp`.
public enum Element: Int, CaseIterable, Sendable {
    case neutral = 0
    case water = 1
    case earth = 2
    case fire = 3
    case wind = 4
    case poison = 5
    case holy = 6
    case dark = 7
    case ghost = 8
    case undead = 9
    case weapon = 12
    case endowed = 13
    case random = 14
}

extension Element: CodingKey {
    public var stringValue: String {
        switch self {
        case .neutral: "NEUTRAL"
        case .water: "WATER"
        case .earth: "EARTH"
        case .fire: "FIRE"
        case .wind: "WIND"
        case .poison: "POISON"
        case .holy: "HOLY"
        case .dark: "DARK"
        case .ghost: "GHOST"
        case .undead: "UNDEAD"
        case .weapon: "WEAPON"
        case .endowed: "ENDOWED"
        case .random: "RANDOM"
        }
    }

    public init?(stringValue: String) {
        switch stringValue.uppercased() {
        case "NEUTRAL": self = .neutral
        case "WATER": self = .water
        case "EARTH": self = .earth
        case "FIRE": self = .fire
        case "WIND": self = .wind
        case "POISON": self = .poison
        case "HOLY": self = .holy
        case "DARK": self = .dark
        case "GHOST": self = .ghost
        case "UNDEAD": self = .undead
        case "WEAPON": self = .weapon
        case "ENDOWED": self = .endowed
        case "RANDOM": self = .random
        default: return nil
        }
    }

    public var intValue: Int? {
        rawValue
    }

    public init?(intValue: Int) {
        self.init(rawValue: intValue)
    }
}

extension Element: CodingKeyRepresentable {
    public var codingKey: any CodingKey {
        self
    }

    public init?<T>(codingKey: T) where T: CodingKey {
        self.init(stringValue: codingKey.stringValue)
    }
}

extension Element: Decodable {
    public init(from decoder: any Decoder) throws {
        let container = try decoder.singleValueContainer()
        let stringValue = try container.decode(String.self)
        if let value = Self.init(stringValue: stringValue) {
            self = value
        } else {
            throw DecodingError.dataCorruptedError(in: container, debugDescription: "Could not initialize \(Self.self) from invalid string value \(stringValue)")
        }
    }
}
