//
//  EquipPositions.swift
//  RagnarokOffline
//
//  Generated by ROCodeGenerator.
//

/// Converted from `equip_pos` in `common/mmo.hpp`.
public struct EquipPositions: OptionSet, Hashable, Sendable {
    public static let head_low = EquipPositions(rawValue: 0x1)
    public static let head_mid = EquipPositions(rawValue: 0x200)
    public static let head_top = EquipPositions(rawValue: 0x100)
    public static let right_hand = EquipPositions(rawValue: 0x2)
    public static let left_hand = EquipPositions(rawValue: 0x20)
    public static let armor = EquipPositions(rawValue: 0x10)
    public static let shoes = EquipPositions(rawValue: 0x40)
    public static let garment = EquipPositions(rawValue: 0x4)
    public static let right_accessory = EquipPositions(rawValue: 0x8)
    public static let left_accessory = EquipPositions(rawValue: 0x80)
    public static let costume_head_top = EquipPositions(rawValue: 0x400)
    public static let costume_head_mid = EquipPositions(rawValue: 0x800)
    public static let costume_head_low = EquipPositions(rawValue: 0x1000)
    public static let costume_garment = EquipPositions(rawValue: 0x2000)
    public static let ammo = EquipPositions(rawValue: 0x8000)
    public static let shadow_armor = EquipPositions(rawValue: 0x10000)
    public static let shadow_weapon = EquipPositions(rawValue: 0x20000)
    public static let shadow_shield = EquipPositions(rawValue: 0x40000)
    public static let shadow_shoes = EquipPositions(rawValue: 0x80000)
    public static let shadow_right_accessory = EquipPositions(rawValue: 0x100000)
    public static let shadow_left_accessory = EquipPositions(rawValue: 0x200000)
    public static let both_accessory = EquipPositions(rawValue: 0x88)
    public static let both_hand = EquipPositions(rawValue: 0x22)

    public let rawValue: Int

    public init(rawValue: Int) {
        self.rawValue = rawValue
    }
}

extension EquipPositions: CodingKey {
    public var stringValue: String {
        switch self {
        case .head_low: "HEAD_LOW"
        case .head_mid: "HEAD_MID"
        case .head_top: "HEAD_TOP"
        case .right_hand: "RIGHT_HAND"
        case .left_hand: "LEFT_HAND"
        case .armor: "ARMOR"
        case .shoes: "SHOES"
        case .garment: "GARMENT"
        case .right_accessory: "RIGHT_ACCESSORY"
        case .left_accessory: "LEFT_ACCESSORY"
        case .costume_head_top: "COSTUME_HEAD_TOP"
        case .costume_head_mid: "COSTUME_HEAD_MID"
        case .costume_head_low: "COSTUME_HEAD_LOW"
        case .costume_garment: "COSTUME_GARMENT"
        case .ammo: "AMMO"
        case .shadow_armor: "SHADOW_ARMOR"
        case .shadow_weapon: "SHADOW_WEAPON"
        case .shadow_shield: "SHADOW_SHIELD"
        case .shadow_shoes: "SHADOW_SHOES"
        case .shadow_right_accessory: "SHADOW_RIGHT_ACCESSORY"
        case .shadow_left_accessory: "SHADOW_LEFT_ACCESSORY"
        case .both_accessory: "BOTH_ACCESSORY"
        case .both_hand: "BOTH_HAND"
        default: ""
        }
    }

    public init?(stringValue: String) {
        switch stringValue.uppercased() {
        case "HEAD_LOW": self = .head_low
        case "HEAD_MID": self = .head_mid
        case "HEAD_TOP": self = .head_top
        case "RIGHT_HAND": self = .right_hand
        case "LEFT_HAND": self = .left_hand
        case "ARMOR": self = .armor
        case "SHOES": self = .shoes
        case "GARMENT": self = .garment
        case "RIGHT_ACCESSORY": self = .right_accessory
        case "LEFT_ACCESSORY": self = .left_accessory
        case "COSTUME_HEAD_TOP": self = .costume_head_top
        case "COSTUME_HEAD_MID": self = .costume_head_mid
        case "COSTUME_HEAD_LOW": self = .costume_head_low
        case "COSTUME_GARMENT": self = .costume_garment
        case "AMMO": self = .ammo
        case "SHADOW_ARMOR": self = .shadow_armor
        case "SHADOW_WEAPON": self = .shadow_weapon
        case "SHADOW_SHIELD": self = .shadow_shield
        case "SHADOW_SHOES": self = .shadow_shoes
        case "SHADOW_RIGHT_ACCESSORY": self = .shadow_right_accessory
        case "SHADOW_LEFT_ACCESSORY": self = .shadow_left_accessory
        case "BOTH_ACCESSORY": self = .both_accessory
        case "BOTH_HAND": self = .both_hand
        default: return nil
        }
    }

    public var intValue: Int? {
        rawValue
    }

    public init?(intValue: Int) {
        self.init(rawValue: intValue)
    }
}

extension EquipPositions: Decodable {
    public init(from decoder: any Decoder) throws {
        let container = try decoder.singleValueContainer()
        let dictionary = try container.decode([String : Bool].self)
        let trueKeys = dictionary.compactMap {
            $0.value ? $0.key : nil
        }
        let falseKeys = dictionary.compactMap {
            !$0.value ? $0.key : nil
        }

        self.rawValue = 0
        for trueKey in trueKeys {
            if let member = EquipPositions(stringValue: trueKey) {
                self.insert(member)
            }
        }
        for falseKey in falseKeys {
            if let member = EquipPositions(stringValue: falseKey) {
                self.remove(member)
            }
        }
    }
}
