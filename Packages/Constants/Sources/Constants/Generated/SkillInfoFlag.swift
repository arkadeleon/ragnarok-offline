//
//  SkillInfoFlag.swift
//  Constants
//
//  Generated by RagnarokOfflineGenerator.
//

/// Converted from `e_skill_inf` in `map/skill.hpp`.
public enum SkillInfoFlag: Int, CaseIterable, Sendable {
    case passive = 0x0
    case attack = 0x1
    case ground = 0x2
    case _self = 0x4
    case support = 0x10
    case trap = 0x20
}

extension SkillInfoFlag: CodingKey {
    public var stringValue: String {
        switch self {
        case .passive: "PASSIVE"
        case .attack: "ATTACK"
        case .ground: "GROUND"
        case ._self: "SELF"
        case .support: "SUPPORT"
        case .trap: "TRAP"
        }
    }

    public init?(stringValue: String) {
        switch stringValue.uppercased() {
        case "PASSIVE": self = .passive
        case "ATTACK": self = .attack
        case "GROUND": self = .ground
        case "SELF": self = ._self
        case "SUPPORT": self = .support
        case "TRAP": self = .trap
        default: return nil
        }
    }

    public var intValue: Int? {
        rawValue
    }

    public init?(intValue: Int) {
        self.init(rawValue: intValue)
    }
}

extension SkillInfoFlag: CodingKeyRepresentable {
    public var codingKey: any CodingKey {
        self
    }

    public init?<T>(codingKey: T) where T: CodingKey {
        self.init(stringValue: codingKey.stringValue)
    }
}

extension SkillInfoFlag: Decodable {
    public init(from decoder: any Decoder) throws {
        let container = try decoder.singleValueContainer()
        let stringValue = try container.decode(String.self)
        if let value = Self.init(stringValue: stringValue) {
            self = value
        } else {
            throw DecodingError.dataCorruptedError(in: container, debugDescription: "Could not initialize \(Self.self) from invalid string value \(stringValue)")
        }
    }
}
