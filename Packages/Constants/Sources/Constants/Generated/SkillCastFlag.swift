//
//  SkillCastFlag.swift
//  Constants
//
//  Generated by RagnarokOfflineGenerator.
//

/// Converted from `e_skill_cast_flags` in `map/skill.hpp`.
public enum SkillCastFlag: Int, CaseIterable, Sendable {
    case ignoredex = 0x1
    case ignorestatus = 0x2
    case ignoreitembonus = 0x4
}

extension SkillCastFlag: CodingKey {
    public var stringValue: String {
        switch self {
        case .ignoredex: "IGNOREDEX"
        case .ignorestatus: "IGNORESTATUS"
        case .ignoreitembonus: "IGNOREITEMBONUS"
        }
    }

    public init?(stringValue: String) {
        switch stringValue.uppercased() {
        case "IGNOREDEX": self = .ignoredex
        case "IGNORESTATUS": self = .ignorestatus
        case "IGNOREITEMBONUS": self = .ignoreitembonus
        default: return nil
        }
    }

    public var intValue: Int? {
        rawValue
    }

    public init?(intValue: Int) {
        self.init(rawValue: intValue)
    }
}

extension SkillCastFlag: CodingKeyRepresentable {
    public var codingKey: any CodingKey {
        self
    }

    public init?<T>(codingKey: T) where T: CodingKey {
        self.init(stringValue: codingKey.stringValue)
    }
}

extension SkillCastFlag: Decodable {
    public init(from decoder: any Decoder) throws {
        let container = try decoder.singleValueContainer()
        let stringValue = try container.decode(String.self)
        if let value = Self.init(stringValue: stringValue) {
            self = value
        } else {
            throw DecodingError.dataCorruptedError(in: container, debugDescription: "Could not initialize \(Self.self) from invalid string value \(stringValue)")
        }
    }
}
