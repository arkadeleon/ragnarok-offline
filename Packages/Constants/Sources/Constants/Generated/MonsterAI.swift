//
//  MonsterAI.swift
//  RagnarokOffline
//
//  Generated by ROCodeGenerator.
//

/// Converted from `e_aegis_monstertype` in `map/mob.hpp`.
public enum MonsterAI: CaseIterable, Sendable {
    case _01
    case _02
    case _03
    case _04
    case _05
    case _06
    case _07
    case _08
    case _09
    case _10
    case _11
    case _12
    case _13
    case _17
    case _19
    case _20
    case _21
    case _24
    case _25
    case _26
    case _27
    case abr_passive
    case abr_offensive
}

extension MonsterAI: RawRepresentable {
    public var rawValue: Int {
        switch self {
        case ._01: 0x81
        case ._02: 0x83
        case ._03: 0x1089
        case ._04: 0x3885
        case ._05: 0x2085
        case ._06: 0x0
        case ._07: 0x108b
        case ._08: 0x7085
        case ._09: 0x3095
        case ._10: 0x84
        case ._11: 0x84
        case ._12: 0x2085
        case ._13: 0x308d
        case ._17: 0x91
        case ._19: 0x3095
        case ._20: 0x3295
        case ._21: 0x3695
        case ._24: 0xa1
        case ._25: 0x1
        case ._26: 0xb695
        case ._27: 0x8084
        case .abr_passive: 0x21
        case .abr_offensive: 0xa5
        }
    }

    public init?(rawValue: Int) {
        switch rawValue {
        case 0x81: self = ._01
        case 0x83: self = ._02
        case 0x1089: self = ._03
        case 0x3885: self = ._04
        case 0x2085: self = ._05
        case 0x0: self = ._06
        case 0x108b: self = ._07
        case 0x7085: self = ._08
        case 0x3095: self = ._09
        case 0x84: self = ._10
        case 0x84: self = ._11
        case 0x2085: self = ._12
        case 0x308d: self = ._13
        case 0x91: self = ._17
        case 0x3095: self = ._19
        case 0x3295: self = ._20
        case 0x3695: self = ._21
        case 0xa1: self = ._24
        case 0x1: self = ._25
        case 0xb695: self = ._26
        case 0x8084: self = ._27
        case 0x21: self = .abr_passive
        case 0xa5: self = .abr_offensive
        default: return nil
        }
    }
}

extension MonsterAI: CodingKey {
    public var stringValue: String {
        switch self {
        case ._01: "01"
        case ._02: "02"
        case ._03: "03"
        case ._04: "04"
        case ._05: "05"
        case ._06: "06"
        case ._07: "07"
        case ._08: "08"
        case ._09: "09"
        case ._10: "10"
        case ._11: "11"
        case ._12: "12"
        case ._13: "13"
        case ._17: "17"
        case ._19: "19"
        case ._20: "20"
        case ._21: "21"
        case ._24: "24"
        case ._25: "25"
        case ._26: "26"
        case ._27: "27"
        case .abr_passive: "ABR_PASSIVE"
        case .abr_offensive: "ABR_OFFENSIVE"
        }
    }

    public init?(stringValue: String) {
        switch stringValue.uppercased() {
        case "01": self = ._01
        case "02": self = ._02
        case "03": self = ._03
        case "04": self = ._04
        case "05": self = ._05
        case "06": self = ._06
        case "07": self = ._07
        case "08": self = ._08
        case "09": self = ._09
        case "10": self = ._10
        case "11": self = ._11
        case "12": self = ._12
        case "13": self = ._13
        case "17": self = ._17
        case "19": self = ._19
        case "20": self = ._20
        case "21": self = ._21
        case "24": self = ._24
        case "25": self = ._25
        case "26": self = ._26
        case "27": self = ._27
        case "ABR_PASSIVE": self = .abr_passive
        case "ABR_OFFENSIVE": self = .abr_offensive
        default: return nil
        }
    }

    public var intValue: Int? {
        rawValue
    }

    public init?(intValue: Int) {
        self.init(rawValue: intValue)
    }
}

extension MonsterAI: CodingKeyRepresentable {
    public var codingKey: any CodingKey {
        self
    }

    public init?<T>(codingKey: T) where T: CodingKey {
        self.init(stringValue: codingKey.stringValue)
    }
}

extension MonsterAI: Decodable {
    public init(from decoder: any Decoder) throws {
        let container = try decoder.singleValueContainer()
        let stringValue = try container.decode(String.self)
        if let value = Self.init(stringValue: stringValue) {
            self = value
        } else {
            throw DecodingError.dataCorruptedError(in: container, debugDescription: "Could not initialize \(Self.self) from invalid string value \(stringValue)")
        }
    }
}
