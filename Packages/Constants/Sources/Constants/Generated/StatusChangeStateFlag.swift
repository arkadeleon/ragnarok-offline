//
//  StatusChangeStateFlag.swift
//  Constants
//
//  Generated by RagnarokOfflineGenerator.
//

/// Converted from `e_scs_flag` in `map/status.hpp`.
public enum StatusChangeStateFlag: Int, CaseIterable, Sendable {
    case none = 0
    case nomovecond = 1
    case nomove = 2
    case nopickitemcond = 3
    case nopickitem = 4
    case nodropitemcond = 5
    case nodropitem = 6
    case nocastcond = 7
    case nocast = 8
    case nochat = 9
    case nochatcond = 10
    case noequipitem = 11
    case noequipitemcond = 12
    case nounequipitem = 13
    case nounequipitemcond = 14
    case noconsumeitem = 15
    case noconsumeitemcond = 16
    case noattack = 17
    case noattackcond = 18
    case nowarp = 19
    case nowarpcond = 20
    case nodeathpenalty = 21
    case nodeathpenaltycond = 22
    case nointeract = 23
    case nointeractcond = 24
}

extension StatusChangeStateFlag: CodingKey {
    public var stringValue: String {
        switch self {
        case .none: "NONE"
        case .nomovecond: "NOMOVECOND"
        case .nomove: "NOMOVE"
        case .nopickitemcond: "NOPICKITEMCOND"
        case .nopickitem: "NOPICKITEM"
        case .nodropitemcond: "NODROPITEMCOND"
        case .nodropitem: "NODROPITEM"
        case .nocastcond: "NOCASTCOND"
        case .nocast: "NOCAST"
        case .nochat: "NOCHAT"
        case .nochatcond: "NOCHATCOND"
        case .noequipitem: "NOEQUIPITEM"
        case .noequipitemcond: "NOEQUIPITEMCOND"
        case .nounequipitem: "NOUNEQUIPITEM"
        case .nounequipitemcond: "NOUNEQUIPITEMCOND"
        case .noconsumeitem: "NOCONSUMEITEM"
        case .noconsumeitemcond: "NOCONSUMEITEMCOND"
        case .noattack: "NOATTACK"
        case .noattackcond: "NOATTACKCOND"
        case .nowarp: "NOWARP"
        case .nowarpcond: "NOWARPCOND"
        case .nodeathpenalty: "NODEATHPENALTY"
        case .nodeathpenaltycond: "NODEATHPENALTYCOND"
        case .nointeract: "NOINTERACT"
        case .nointeractcond: "NOINTERACTCOND"
        }
    }

    public init?(stringValue: String) {
        switch stringValue.uppercased() {
        case "NONE": self = .none
        case "NOMOVECOND": self = .nomovecond
        case "NOMOVE": self = .nomove
        case "NOPICKITEMCOND": self = .nopickitemcond
        case "NOPICKITEM": self = .nopickitem
        case "NODROPITEMCOND": self = .nodropitemcond
        case "NODROPITEM": self = .nodropitem
        case "NOCASTCOND": self = .nocastcond
        case "NOCAST": self = .nocast
        case "NOCHAT": self = .nochat
        case "NOCHATCOND": self = .nochatcond
        case "NOEQUIPITEM": self = .noequipitem
        case "NOEQUIPITEMCOND": self = .noequipitemcond
        case "NOUNEQUIPITEM": self = .nounequipitem
        case "NOUNEQUIPITEMCOND": self = .nounequipitemcond
        case "NOCONSUMEITEM": self = .noconsumeitem
        case "NOCONSUMEITEMCOND": self = .noconsumeitemcond
        case "NOATTACK": self = .noattack
        case "NOATTACKCOND": self = .noattackcond
        case "NOWARP": self = .nowarp
        case "NOWARPCOND": self = .nowarpcond
        case "NODEATHPENALTY": self = .nodeathpenalty
        case "NODEATHPENALTYCOND": self = .nodeathpenaltycond
        case "NOINTERACT": self = .nointeract
        case "NOINTERACTCOND": self = .nointeractcond
        default: return nil
        }
    }

    public var intValue: Int? {
        rawValue
    }

    public init?(intValue: Int) {
        self.init(rawValue: intValue)
    }
}

extension StatusChangeStateFlag: CodingKeyRepresentable {
    public var codingKey: any CodingKey {
        self
    }

    public init?<T>(codingKey: T) where T: CodingKey {
        self.init(stringValue: codingKey.stringValue)
    }
}

extension StatusChangeStateFlag: Decodable {
    public init(from decoder: any Decoder) throws {
        let container = try decoder.singleValueContainer()
        let stringValue = try container.decode(String.self)
        if let value = Self.init(stringValue: stringValue) {
            self = value
        } else {
            throw DecodingError.dataCorruptedError(in: container, debugDescription: "Could not initialize \(Self.self) from invalid string value \(stringValue)")
        }
    }
}
