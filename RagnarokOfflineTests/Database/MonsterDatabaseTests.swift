//
//  MonsterDatabaseTests.swift
//  RagnarokOfflineTests
//
//  Created by Leon Li on 2024/5/9.
//

import XCTest
import rAthenaResources
@testable import DatabaseCore

final class MonsterDatabaseTests: XCTestCase {
    func testPrerenewal() async throws {
        let database = MonsterDatabase(baseURL: serverResourceBaseURL, mode: .prerenewal)

        let poring = await database.monster(forAegisName: "PORING")!
        XCTAssertEqual(poring.aegisName, "PORING")
        XCTAssertEqual(poring.name, "Poring")
        XCTAssertEqual(poring.level, 1)
        XCTAssertEqual(poring.hp, 50)
        XCTAssertEqual(poring.baseExp, 2)
        XCTAssertEqual(poring.jobExp, 1)
        XCTAssertEqual(poring.attack, 7)
        XCTAssertEqual(poring.attack2, 10)
        XCTAssertEqual(poring.magicDefense, 5)
        XCTAssertEqual(poring.str, 1)
        XCTAssertEqual(poring.agi, 1)
        XCTAssertEqual(poring.vit, 1)
        XCTAssertEqual(poring.int, 0)
        XCTAssertEqual(poring.dex, 6)
        XCTAssertEqual(poring.luk, 30)
        XCTAssertEqual(poring.attackRange, 1)
        XCTAssertEqual(poring.skillRange, 10)
        XCTAssertEqual(poring.chaseRange, 12)
        XCTAssertEqual(poring.size, .medium)
        XCTAssertEqual(poring.race, .plant)
        XCTAssertEqual(poring.element, .water)
        XCTAssertEqual(poring.elementLevel, 1)
        XCTAssertEqual(poring.walkSpeed.rawValue, 400)
        XCTAssertEqual(poring.attackDelay, 1872)
        XCTAssertEqual(poring.attackMotion, 672)
        XCTAssertEqual(poring.clientAttackMotion, 288)
        XCTAssertEqual(poring.damageMotion, 480)
        XCTAssertEqual(poring.ai, ._02)
        XCTAssertEqual(poring.class, .normal)
        XCTAssertEqual(poring.drops?.count, 8)

        let archerSkeleton = await database.monster(forAegisName: "ARCHER_SKELETON")!
        XCTAssertEqual(archerSkeleton.aegisName, "ARCHER_SKELETON")
        XCTAssertEqual(archerSkeleton.name, "Archer Skeleton")
        XCTAssertEqual(archerSkeleton.level, 31)
        XCTAssertEqual(archerSkeleton.hp, 3040)
        XCTAssertEqual(archerSkeleton.baseExp, 483)
        XCTAssertEqual(archerSkeleton.jobExp, 283)
        XCTAssertEqual(archerSkeleton.attack, 128)
        XCTAssertEqual(archerSkeleton.attack2, 153)
        XCTAssertEqual(archerSkeleton.str, 1)
        XCTAssertEqual(archerSkeleton.agi, 8)
        XCTAssertEqual(archerSkeleton.vit, 14)
        XCTAssertEqual(archerSkeleton.int, 5)
        XCTAssertEqual(archerSkeleton.dex, 90)
        XCTAssertEqual(archerSkeleton.luk, 5)
        XCTAssertEqual(archerSkeleton.attackRange, 9)
        XCTAssertEqual(archerSkeleton.skillRange, 10)
        XCTAssertEqual(archerSkeleton.chaseRange, 12)
        XCTAssertEqual(archerSkeleton.size, .medium)
        XCTAssertEqual(archerSkeleton.race, .undead)
        XCTAssertEqual(archerSkeleton.element, .undead)
        XCTAssertEqual(archerSkeleton.elementLevel, 1)
        XCTAssertEqual(archerSkeleton.walkSpeed.rawValue, 300)
        XCTAssertEqual(archerSkeleton.attackDelay, 2864)
        XCTAssertEqual(archerSkeleton.attackMotion, 864)
        XCTAssertEqual(archerSkeleton.clientAttackMotion, 672)
        XCTAssertEqual(archerSkeleton.damageMotion, 576)
        XCTAssertEqual(archerSkeleton.ai, ._05)
        XCTAssertEqual(archerSkeleton.class, .normal)
        XCTAssertEqual(archerSkeleton.drops?.count, 8)

        let osiris = await database.monster(forAegisName: "OSIRIS")!
        XCTAssertEqual(osiris.ai, ._21)
        XCTAssertEqual(osiris.class, .boss)
        XCTAssertEqual(osiris.modes, [.mvp])
        XCTAssertEqual(osiris.mvpDrops?.count, 3)
    }

    func testRenewal() async throws {
        let database = MonsterDatabase(baseURL: serverResourceBaseURL, mode: .renewal)

        let poring = await database.monster(forAegisName: "PORING")!
        XCTAssertEqual(poring.aegisName, "PORING")
        XCTAssertEqual(poring.name, "Poring")
        XCTAssertEqual(poring.level, 1)
        XCTAssertEqual(poring.hp, 55)
        XCTAssertEqual(poring.baseExp, 150)
        XCTAssertEqual(poring.jobExp, 40)
        XCTAssertEqual(poring.attack, 1)
        XCTAssertEqual(poring.attack2, 1)
        XCTAssertEqual(poring.defense, 2)
        XCTAssertEqual(poring.magicDefense, 5)
        XCTAssertEqual(poring.str, 6)
        XCTAssertEqual(poring.agi, 1)
        XCTAssertEqual(poring.vit, 1)
        XCTAssertEqual(poring.int, 0)
        XCTAssertEqual(poring.dex, 6)
        XCTAssertEqual(poring.luk, 5)
        XCTAssertEqual(poring.attackRange, 1)
        XCTAssertEqual(poring.skillRange, 10)
        XCTAssertEqual(poring.chaseRange, 12)
        XCTAssertEqual(poring.size, .medium)
        XCTAssertEqual(poring.race, .plant)
        XCTAssertEqual(poring.element, .water)
        XCTAssertEqual(poring.elementLevel, 1)
        XCTAssertEqual(poring.walkSpeed.rawValue, 400)
        XCTAssertEqual(poring.attackDelay, 1872)
        XCTAssertEqual(poring.attackMotion, 672)
        XCTAssertEqual(poring.clientAttackMotion, 288)
        XCTAssertEqual(poring.damageMotion, 480)
        XCTAssertEqual(poring.ai, ._02)
        XCTAssertEqual(poring.class, .normal)
        XCTAssertEqual(poring.drops?.count, 8)

        let archerSkeleton = await database.monster(forAegisName: "ARCHER_SKELETON")!
        XCTAssertEqual(archerSkeleton.aegisName, "ARCHER_SKELETON")
        XCTAssertEqual(archerSkeleton.name, "Archer Skeleton")
        XCTAssertEqual(archerSkeleton.level, 50)
        XCTAssertEqual(archerSkeleton.hp, 1458)
        XCTAssertEqual(archerSkeleton.baseExp, 436)
        XCTAssertEqual(archerSkeleton.jobExp, 327)
        XCTAssertEqual(archerSkeleton.attack, 101)
        XCTAssertEqual(archerSkeleton.attack2, 23)
        XCTAssertEqual(archerSkeleton.defense, 47)
        XCTAssertEqual(archerSkeleton.magicDefense, 10)
        XCTAssertEqual(archerSkeleton.str, 30)
        XCTAssertEqual(archerSkeleton.agi, 29)
        XCTAssertEqual(archerSkeleton.vit, 20)
        XCTAssertEqual(archerSkeleton.int, 10)
        XCTAssertEqual(archerSkeleton.dex, 35)
        XCTAssertEqual(archerSkeleton.luk, 5)
        XCTAssertEqual(archerSkeleton.attackRange, 9)
        XCTAssertEqual(archerSkeleton.skillRange, 10)
        XCTAssertEqual(archerSkeleton.chaseRange, 12)
        XCTAssertEqual(archerSkeleton.size, .medium)
        XCTAssertEqual(archerSkeleton.race, .undead)
        XCTAssertEqual(archerSkeleton.raceGroups, [.clocktower])
        XCTAssertEqual(archerSkeleton.element, .undead)
        XCTAssertEqual(archerSkeleton.elementLevel, 1)
        XCTAssertEqual(archerSkeleton.walkSpeed.rawValue, 300)
        XCTAssertEqual(archerSkeleton.attackDelay, 2864)
        XCTAssertEqual(archerSkeleton.attackMotion, 864)
        XCTAssertEqual(archerSkeleton.clientAttackMotion, 672)
        XCTAssertEqual(archerSkeleton.damageMotion, 576)
        XCTAssertEqual(archerSkeleton.ai, ._05)
        XCTAssertEqual(archerSkeleton.class, .normal)
        XCTAssertEqual(archerSkeleton.drops?.count, 8)

        let osiris = await database.monster(forAegisName: "OSIRIS")!
        XCTAssertEqual(osiris.ai, ._21)
        XCTAssertEqual(osiris.class, .boss)
        XCTAssertEqual(osiris.modes, [.mvp])
        XCTAssertEqual(osiris.mvpDrops?.count, 3)
    }
}
